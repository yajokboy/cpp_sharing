// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: UnityAPI.proto

#include "UnityAPI.pb.h"
#include "UnityAPI.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace UnityAPI {

static const char* UnityAPIService_method_names[] = {
  "/UnityAPI.UnityAPIService/FrontLowLightControl",
  "/UnityAPI.UnityAPIService/FrontHighLightControl",
  "/UnityAPI.UnityAPIService/RearLightControl",
  "/UnityAPI.UnityAPIService/FrontDaytimeLightControl",
  "/UnityAPI.UnityAPIService/BrakeLightControl",
  "/UnityAPI.UnityAPIService/ReverseLightControl",
  "/UnityAPI.UnityAPIService/FrontFogLightControl",
  "/UnityAPI.UnityAPIService/RearFogLightControl",
  "/UnityAPI.UnityAPIService/ClearanceLampControl",
  "/UnityAPI.UnityAPIService/FrontLeftBlinkerLightControl",
  "/UnityAPI.UnityAPIService/FrontRightBlinkerLightControl",
  "/UnityAPI.UnityAPIService/RearLeftBlinkerLightControl",
  "/UnityAPI.UnityAPIService/RearRightBlinkerLightControl",
  "/UnityAPI.UnityAPIService/FrontWiperControl",
  "/UnityAPI.UnityAPIService/RearWiperControl",
  "/UnityAPI.UnityAPIService/LeftSideMirrorControl",
  "/UnityAPI.UnityAPIService/RightSideMirrorControl",
  "/UnityAPI.UnityAPIService/FrontRightDoorControl",
  "/UnityAPI.UnityAPIService/FrontLeftDoorControl",
  "/UnityAPI.UnityAPIService/RearRightDoorControl",
  "/UnityAPI.UnityAPIService/RearLeftDoorControl",
  "/UnityAPI.UnityAPIService/TrunkControl",
  "/UnityAPI.UnityAPIService/SunRoofControl",
  "/UnityAPI.UnityAPIService/FrontRightPowerWindowsControl",
  "/UnityAPI.UnityAPIService/FrontLeftPowerWindowsControl",
  "/UnityAPI.UnityAPIService/RearRightPowerWindowsControl",
  "/UnityAPI.UnityAPIService/RearLeftPowerWindowsControl",
  "/UnityAPI.UnityAPIService/SideMirrorSwitchControl",
  "/UnityAPI.UnityAPIService/InstrumentLightControl",
  "/UnityAPI.UnityAPIService/PassgenerRoomDomeLightControl",
  "/UnityAPI.UnityAPIService/ReadingLightDriverSideControl",
  "/UnityAPI.UnityAPIService/ReadingLightPassgenerSideControl",
  "/UnityAPI.UnityAPIService/FrontRightPowerWindowsSwitchControl",
  "/UnityAPI.UnityAPIService/FrontLeftPowerWindowsSwitchControl",
  "/UnityAPI.UnityAPIService/RearRightPowerWindowsSwitchControl",
  "/UnityAPI.UnityAPIService/RearLeftPowerWindowsSwitchControl",
  "/UnityAPI.UnityAPIService/HornControl",
  "/UnityAPI.UnityAPIService/BuzzerControl",
  "/UnityAPI.UnityAPIService/AirConditionerControl",
  "/UnityAPI.UnityAPIService/AirConditionerTemperatureControl",
  "/UnityAPI.UnityAPIService/AirConditionerFanSpeedControl",
  "/UnityAPI.UnityAPIService/HandlingControl",
  "/UnityAPI.UnityAPIService/CentralDoorLockSwitchControl",
  "/UnityAPI.UnityAPIService/FrontRightDoorLockSwitchControl",
  "/UnityAPI.UnityAPIService/FrontLeftDoorLockSwitchControl",
  "/UnityAPI.UnityAPIService/RearRightDoorLockSwitchControl",
  "/UnityAPI.UnityAPIService/RearLeftDoorLockSwitchControl",
  "/UnityAPI.UnityAPIService/get_database",
  "/UnityAPI.UnityAPIService/send_update_database",
};

std::unique_ptr< UnityAPIService::Stub> UnityAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UnityAPIService::Stub> stub(new UnityAPIService::Stub(channel));
  return stub;
}

UnityAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FrontLowLightControl_(UnityAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontHighLightControl_(UnityAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearLightControl_(UnityAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontDaytimeLightControl_(UnityAPIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BrakeLightControl_(UnityAPIService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReverseLightControl_(UnityAPIService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontFogLightControl_(UnityAPIService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearFogLightControl_(UnityAPIService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearanceLampControl_(UnityAPIService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontLeftBlinkerLightControl_(UnityAPIService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontRightBlinkerLightControl_(UnityAPIService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearLeftBlinkerLightControl_(UnityAPIService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearRightBlinkerLightControl_(UnityAPIService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontWiperControl_(UnityAPIService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearWiperControl_(UnityAPIService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeftSideMirrorControl_(UnityAPIService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RightSideMirrorControl_(UnityAPIService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontRightDoorControl_(UnityAPIService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontLeftDoorControl_(UnityAPIService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearRightDoorControl_(UnityAPIService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearLeftDoorControl_(UnityAPIService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TrunkControl_(UnityAPIService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SunRoofControl_(UnityAPIService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontRightPowerWindowsControl_(UnityAPIService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontLeftPowerWindowsControl_(UnityAPIService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearRightPowerWindowsControl_(UnityAPIService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearLeftPowerWindowsControl_(UnityAPIService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SideMirrorSwitchControl_(UnityAPIService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstrumentLightControl_(UnityAPIService_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PassgenerRoomDomeLightControl_(UnityAPIService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadingLightDriverSideControl_(UnityAPIService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadingLightPassgenerSideControl_(UnityAPIService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontRightPowerWindowsSwitchControl_(UnityAPIService_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontLeftPowerWindowsSwitchControl_(UnityAPIService_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearRightPowerWindowsSwitchControl_(UnityAPIService_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearLeftPowerWindowsSwitchControl_(UnityAPIService_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HornControl_(UnityAPIService_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuzzerControl_(UnityAPIService_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AirConditionerControl_(UnityAPIService_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AirConditionerTemperatureControl_(UnityAPIService_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AirConditionerFanSpeedControl_(UnityAPIService_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandlingControl_(UnityAPIService_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CentralDoorLockSwitchControl_(UnityAPIService_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontRightDoorLockSwitchControl_(UnityAPIService_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrontLeftDoorLockSwitchControl_(UnityAPIService_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearRightDoorLockSwitchControl_(UnityAPIService_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RearLeftDoorLockSwitchControl_(UnityAPIService_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_database_(UnityAPIService_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_send_update_database_(UnityAPIService_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UnityAPIService::Stub::FrontLowLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLowLightRequest& request, ::UnityAPI::FrontLowLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontLowLightRequest, ::UnityAPI::FrontLowLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontLowLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontLowLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLowLightRequest* request, ::UnityAPI::FrontLowLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontLowLightRequest, ::UnityAPI::FrontLowLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLowLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontLowLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLowLightRequest* request, ::UnityAPI::FrontLowLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLowLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLowLightReply>* UnityAPIService::Stub::PrepareAsyncFrontLowLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLowLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontLowLightReply, ::UnityAPI::FrontLowLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontLowLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLowLightReply>* UnityAPIService::Stub::AsyncFrontLowLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLowLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontLowLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontHighLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontHighLightRequest& request, ::UnityAPI::FrontHighLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontHighLightRequest, ::UnityAPI::FrontHighLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontHighLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontHighLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontHighLightRequest* request, ::UnityAPI::FrontHighLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontHighLightRequest, ::UnityAPI::FrontHighLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontHighLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontHighLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontHighLightRequest* request, ::UnityAPI::FrontHighLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontHighLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontHighLightReply>* UnityAPIService::Stub::PrepareAsyncFrontHighLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontHighLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontHighLightReply, ::UnityAPI::FrontHighLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontHighLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontHighLightReply>* UnityAPIService::Stub::AsyncFrontHighLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontHighLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontHighLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearLightRequest& request, ::UnityAPI::RearLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearLightRequest, ::UnityAPI::RearLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearLightRequest* request, ::UnityAPI::RearLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearLightRequest, ::UnityAPI::RearLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearLightRequest* request, ::UnityAPI::RearLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLightReply>* UnityAPIService::Stub::PrepareAsyncRearLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearLightReply, ::UnityAPI::RearLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLightReply>* UnityAPIService::Stub::AsyncRearLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontDaytimeLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontDaytimeLightRequest& request, ::UnityAPI::FrontDaytimeLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontDaytimeLightRequest, ::UnityAPI::FrontDaytimeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontDaytimeLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontDaytimeLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontDaytimeLightRequest* request, ::UnityAPI::FrontDaytimeLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontDaytimeLightRequest, ::UnityAPI::FrontDaytimeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontDaytimeLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontDaytimeLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontDaytimeLightRequest* request, ::UnityAPI::FrontDaytimeLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontDaytimeLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontDaytimeLightReply>* UnityAPIService::Stub::PrepareAsyncFrontDaytimeLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontDaytimeLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontDaytimeLightReply, ::UnityAPI::FrontDaytimeLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontDaytimeLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontDaytimeLightReply>* UnityAPIService::Stub::AsyncFrontDaytimeLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontDaytimeLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontDaytimeLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::BrakeLightControl(::grpc::ClientContext* context, const ::UnityAPI::BrakeLightRequest& request, ::UnityAPI::BrakeLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::BrakeLightRequest, ::UnityAPI::BrakeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BrakeLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::BrakeLightControl(::grpc::ClientContext* context, const ::UnityAPI::BrakeLightRequest* request, ::UnityAPI::BrakeLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::BrakeLightRequest, ::UnityAPI::BrakeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BrakeLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::BrakeLightControl(::grpc::ClientContext* context, const ::UnityAPI::BrakeLightRequest* request, ::UnityAPI::BrakeLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BrakeLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::BrakeLightReply>* UnityAPIService::Stub::PrepareAsyncBrakeLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::BrakeLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::BrakeLightReply, ::UnityAPI::BrakeLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BrakeLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::BrakeLightReply>* UnityAPIService::Stub::AsyncBrakeLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::BrakeLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBrakeLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::ReverseLightControl(::grpc::ClientContext* context, const ::UnityAPI::ReverseLightRequest& request, ::UnityAPI::ReverseLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::ReverseLightRequest, ::UnityAPI::ReverseLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReverseLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::ReverseLightControl(::grpc::ClientContext* context, const ::UnityAPI::ReverseLightRequest* request, ::UnityAPI::ReverseLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::ReverseLightRequest, ::UnityAPI::ReverseLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReverseLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::ReverseLightControl(::grpc::ClientContext* context, const ::UnityAPI::ReverseLightRequest* request, ::UnityAPI::ReverseLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReverseLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::ReverseLightReply>* UnityAPIService::Stub::PrepareAsyncReverseLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::ReverseLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::ReverseLightReply, ::UnityAPI::ReverseLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReverseLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::ReverseLightReply>* UnityAPIService::Stub::AsyncReverseLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::ReverseLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReverseLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontFogLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontFogLightRequest& request, ::UnityAPI::FrontFogLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontFogLightRequest, ::UnityAPI::FrontFogLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontFogLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontFogLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontFogLightRequest* request, ::UnityAPI::FrontFogLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontFogLightRequest, ::UnityAPI::FrontFogLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontFogLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontFogLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontFogLightRequest* request, ::UnityAPI::FrontFogLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontFogLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontFogLightReply>* UnityAPIService::Stub::PrepareAsyncFrontFogLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontFogLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontFogLightReply, ::UnityAPI::FrontFogLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontFogLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontFogLightReply>* UnityAPIService::Stub::AsyncFrontFogLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontFogLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontFogLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearFogLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearFogLightRequest& request, ::UnityAPI::RearFogLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearFogLightRequest, ::UnityAPI::RearFogLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearFogLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearFogLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearFogLightRequest* request, ::UnityAPI::RearFogLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearFogLightRequest, ::UnityAPI::RearFogLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearFogLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearFogLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearFogLightRequest* request, ::UnityAPI::RearFogLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearFogLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearFogLightReply>* UnityAPIService::Stub::PrepareAsyncRearFogLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearFogLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearFogLightReply, ::UnityAPI::RearFogLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearFogLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearFogLightReply>* UnityAPIService::Stub::AsyncRearFogLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearFogLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearFogLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::ClearanceLampControl(::grpc::ClientContext* context, const ::UnityAPI::ClearanceLampRequest& request, ::UnityAPI::ClearanceLampReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::ClearanceLampRequest, ::UnityAPI::ClearanceLampReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearanceLampControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::ClearanceLampControl(::grpc::ClientContext* context, const ::UnityAPI::ClearanceLampRequest* request, ::UnityAPI::ClearanceLampReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::ClearanceLampRequest, ::UnityAPI::ClearanceLampReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearanceLampControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::ClearanceLampControl(::grpc::ClientContext* context, const ::UnityAPI::ClearanceLampRequest* request, ::UnityAPI::ClearanceLampReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearanceLampControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::ClearanceLampReply>* UnityAPIService::Stub::PrepareAsyncClearanceLampControlRaw(::grpc::ClientContext* context, const ::UnityAPI::ClearanceLampRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::ClearanceLampReply, ::UnityAPI::ClearanceLampRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearanceLampControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::ClearanceLampReply>* UnityAPIService::Stub::AsyncClearanceLampControlRaw(::grpc::ClientContext* context, const ::UnityAPI::ClearanceLampRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearanceLampControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontLeftBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftBlinkerLightRequest& request, ::UnityAPI::FrontLeftBlinkerLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontLeftBlinkerLightRequest, ::UnityAPI::FrontLeftBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontLeftBlinkerLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontLeftBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftBlinkerLightRequest* request, ::UnityAPI::FrontLeftBlinkerLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontLeftBlinkerLightRequest, ::UnityAPI::FrontLeftBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftBlinkerLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontLeftBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftBlinkerLightRequest* request, ::UnityAPI::FrontLeftBlinkerLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftBlinkerLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftBlinkerLightReply>* UnityAPIService::Stub::PrepareAsyncFrontLeftBlinkerLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftBlinkerLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontLeftBlinkerLightReply, ::UnityAPI::FrontLeftBlinkerLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontLeftBlinkerLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftBlinkerLightReply>* UnityAPIService::Stub::AsyncFrontLeftBlinkerLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftBlinkerLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontLeftBlinkerLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontRightBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightBlinkerLightRequest& request, ::UnityAPI::FrontRightBlinkerLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontRightBlinkerLightRequest, ::UnityAPI::FrontRightBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontRightBlinkerLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontRightBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightBlinkerLightRequest* request, ::UnityAPI::FrontRightBlinkerLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontRightBlinkerLightRequest, ::UnityAPI::FrontRightBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightBlinkerLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontRightBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightBlinkerLightRequest* request, ::UnityAPI::FrontRightBlinkerLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightBlinkerLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightBlinkerLightReply>* UnityAPIService::Stub::PrepareAsyncFrontRightBlinkerLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightBlinkerLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontRightBlinkerLightReply, ::UnityAPI::FrontRightBlinkerLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontRightBlinkerLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightBlinkerLightReply>* UnityAPIService::Stub::AsyncFrontRightBlinkerLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightBlinkerLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontRightBlinkerLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearLeftBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftBlinkerLightRequest& request, ::UnityAPI::RearLeftBlinkerLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearLeftBlinkerLightRequest, ::UnityAPI::RearLeftBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearLeftBlinkerLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearLeftBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftBlinkerLightRequest* request, ::UnityAPI::RearLeftBlinkerLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearLeftBlinkerLightRequest, ::UnityAPI::RearLeftBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftBlinkerLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearLeftBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftBlinkerLightRequest* request, ::UnityAPI::RearLeftBlinkerLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftBlinkerLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftBlinkerLightReply>* UnityAPIService::Stub::PrepareAsyncRearLeftBlinkerLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftBlinkerLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearLeftBlinkerLightReply, ::UnityAPI::RearLeftBlinkerLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearLeftBlinkerLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftBlinkerLightReply>* UnityAPIService::Stub::AsyncRearLeftBlinkerLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftBlinkerLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearLeftBlinkerLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearRightBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightBlinkerLightRequest& request, ::UnityAPI::RearRightBlinkerLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearRightBlinkerLightRequest, ::UnityAPI::RearRightBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearRightBlinkerLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearRightBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightBlinkerLightRequest* request, ::UnityAPI::RearRightBlinkerLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearRightBlinkerLightRequest, ::UnityAPI::RearRightBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightBlinkerLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearRightBlinkerLightControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightBlinkerLightRequest* request, ::UnityAPI::RearRightBlinkerLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightBlinkerLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightBlinkerLightReply>* UnityAPIService::Stub::PrepareAsyncRearRightBlinkerLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightBlinkerLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearRightBlinkerLightReply, ::UnityAPI::RearRightBlinkerLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearRightBlinkerLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightBlinkerLightReply>* UnityAPIService::Stub::AsyncRearRightBlinkerLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightBlinkerLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearRightBlinkerLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontWiperControl(::grpc::ClientContext* context, const ::UnityAPI::FrontWiperRequest& request, ::UnityAPI::FrontWiperReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontWiperRequest, ::UnityAPI::FrontWiperReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontWiperControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontWiperControl(::grpc::ClientContext* context, const ::UnityAPI::FrontWiperRequest* request, ::UnityAPI::FrontWiperReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontWiperRequest, ::UnityAPI::FrontWiperReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontWiperControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontWiperControl(::grpc::ClientContext* context, const ::UnityAPI::FrontWiperRequest* request, ::UnityAPI::FrontWiperReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontWiperControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontWiperReply>* UnityAPIService::Stub::PrepareAsyncFrontWiperControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontWiperRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontWiperReply, ::UnityAPI::FrontWiperRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontWiperControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontWiperReply>* UnityAPIService::Stub::AsyncFrontWiperControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontWiperRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontWiperControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearWiperControl(::grpc::ClientContext* context, const ::UnityAPI::RearWiperRequest& request, ::UnityAPI::RearWiperReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearWiperRequest, ::UnityAPI::RearWiperReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearWiperControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearWiperControl(::grpc::ClientContext* context, const ::UnityAPI::RearWiperRequest* request, ::UnityAPI::RearWiperReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearWiperRequest, ::UnityAPI::RearWiperReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearWiperControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearWiperControl(::grpc::ClientContext* context, const ::UnityAPI::RearWiperRequest* request, ::UnityAPI::RearWiperReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearWiperControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearWiperReply>* UnityAPIService::Stub::PrepareAsyncRearWiperControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearWiperRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearWiperReply, ::UnityAPI::RearWiperRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearWiperControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearWiperReply>* UnityAPIService::Stub::AsyncRearWiperControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearWiperRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearWiperControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::LeftSideMirrorControl(::grpc::ClientContext* context, const ::UnityAPI::LeftSideMirrorRequest& request, ::UnityAPI::LeftSideMirrorReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::LeftSideMirrorRequest, ::UnityAPI::LeftSideMirrorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeftSideMirrorControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::LeftSideMirrorControl(::grpc::ClientContext* context, const ::UnityAPI::LeftSideMirrorRequest* request, ::UnityAPI::LeftSideMirrorReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::LeftSideMirrorRequest, ::UnityAPI::LeftSideMirrorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftSideMirrorControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::LeftSideMirrorControl(::grpc::ClientContext* context, const ::UnityAPI::LeftSideMirrorRequest* request, ::UnityAPI::LeftSideMirrorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftSideMirrorControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::LeftSideMirrorReply>* UnityAPIService::Stub::PrepareAsyncLeftSideMirrorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::LeftSideMirrorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::LeftSideMirrorReply, ::UnityAPI::LeftSideMirrorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeftSideMirrorControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::LeftSideMirrorReply>* UnityAPIService::Stub::AsyncLeftSideMirrorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::LeftSideMirrorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeftSideMirrorControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RightSideMirrorControl(::grpc::ClientContext* context, const ::UnityAPI::RightSideMirrorRequest& request, ::UnityAPI::RightSideMirrorReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RightSideMirrorRequest, ::UnityAPI::RightSideMirrorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RightSideMirrorControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RightSideMirrorControl(::grpc::ClientContext* context, const ::UnityAPI::RightSideMirrorRequest* request, ::UnityAPI::RightSideMirrorReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RightSideMirrorRequest, ::UnityAPI::RightSideMirrorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RightSideMirrorControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RightSideMirrorControl(::grpc::ClientContext* context, const ::UnityAPI::RightSideMirrorRequest* request, ::UnityAPI::RightSideMirrorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RightSideMirrorControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RightSideMirrorReply>* UnityAPIService::Stub::PrepareAsyncRightSideMirrorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RightSideMirrorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RightSideMirrorReply, ::UnityAPI::RightSideMirrorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RightSideMirrorControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RightSideMirrorReply>* UnityAPIService::Stub::AsyncRightSideMirrorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RightSideMirrorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRightSideMirrorControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontRightDoorControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorRequest& request, ::UnityAPI::FrontRightDoorReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontRightDoorRequest, ::UnityAPI::FrontRightDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontRightDoorControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontRightDoorControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorRequest* request, ::UnityAPI::FrontRightDoorReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontRightDoorRequest, ::UnityAPI::FrontRightDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightDoorControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontRightDoorControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorRequest* request, ::UnityAPI::FrontRightDoorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightDoorControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightDoorReply>* UnityAPIService::Stub::PrepareAsyncFrontRightDoorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontRightDoorReply, ::UnityAPI::FrontRightDoorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontRightDoorControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightDoorReply>* UnityAPIService::Stub::AsyncFrontRightDoorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontRightDoorControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontLeftDoorControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorRequest& request, ::UnityAPI::FrontLeftDoorReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontLeftDoorRequest, ::UnityAPI::FrontLeftDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontLeftDoorControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontLeftDoorControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorRequest* request, ::UnityAPI::FrontLeftDoorReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontLeftDoorRequest, ::UnityAPI::FrontLeftDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftDoorControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontLeftDoorControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorRequest* request, ::UnityAPI::FrontLeftDoorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftDoorControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftDoorReply>* UnityAPIService::Stub::PrepareAsyncFrontLeftDoorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontLeftDoorReply, ::UnityAPI::FrontLeftDoorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontLeftDoorControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftDoorReply>* UnityAPIService::Stub::AsyncFrontLeftDoorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontLeftDoorControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearRightDoorControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorRequest& request, ::UnityAPI::RearRightDoorReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearRightDoorRequest, ::UnityAPI::RearRightDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearRightDoorControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearRightDoorControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorRequest* request, ::UnityAPI::RearRightDoorReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearRightDoorRequest, ::UnityAPI::RearRightDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightDoorControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearRightDoorControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorRequest* request, ::UnityAPI::RearRightDoorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightDoorControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightDoorReply>* UnityAPIService::Stub::PrepareAsyncRearRightDoorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearRightDoorReply, ::UnityAPI::RearRightDoorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearRightDoorControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightDoorReply>* UnityAPIService::Stub::AsyncRearRightDoorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearRightDoorControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearLeftDoorControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorRequest& request, ::UnityAPI::RearLeftDoorReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearLeftDoorRequest, ::UnityAPI::RearLeftDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearLeftDoorControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearLeftDoorControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorRequest* request, ::UnityAPI::RearLeftDoorReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearLeftDoorRequest, ::UnityAPI::RearLeftDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftDoorControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearLeftDoorControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorRequest* request, ::UnityAPI::RearLeftDoorReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftDoorControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftDoorReply>* UnityAPIService::Stub::PrepareAsyncRearLeftDoorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearLeftDoorReply, ::UnityAPI::RearLeftDoorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearLeftDoorControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftDoorReply>* UnityAPIService::Stub::AsyncRearLeftDoorControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearLeftDoorControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::TrunkControl(::grpc::ClientContext* context, const ::UnityAPI::TrunkRequest& request, ::UnityAPI::TrunkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::TrunkRequest, ::UnityAPI::TrunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TrunkControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::TrunkControl(::grpc::ClientContext* context, const ::UnityAPI::TrunkRequest* request, ::UnityAPI::TrunkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::TrunkRequest, ::UnityAPI::TrunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TrunkControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::TrunkControl(::grpc::ClientContext* context, const ::UnityAPI::TrunkRequest* request, ::UnityAPI::TrunkReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TrunkControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::TrunkReply>* UnityAPIService::Stub::PrepareAsyncTrunkControlRaw(::grpc::ClientContext* context, const ::UnityAPI::TrunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::TrunkReply, ::UnityAPI::TrunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TrunkControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::TrunkReply>* UnityAPIService::Stub::AsyncTrunkControlRaw(::grpc::ClientContext* context, const ::UnityAPI::TrunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTrunkControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::SunRoofControl(::grpc::ClientContext* context, const ::UnityAPI::SunRoofRequest& request, ::UnityAPI::SunRoofReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::SunRoofRequest, ::UnityAPI::SunRoofReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SunRoofControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::SunRoofControl(::grpc::ClientContext* context, const ::UnityAPI::SunRoofRequest* request, ::UnityAPI::SunRoofReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::SunRoofRequest, ::UnityAPI::SunRoofReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SunRoofControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::SunRoofControl(::grpc::ClientContext* context, const ::UnityAPI::SunRoofRequest* request, ::UnityAPI::SunRoofReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SunRoofControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::SunRoofReply>* UnityAPIService::Stub::PrepareAsyncSunRoofControlRaw(::grpc::ClientContext* context, const ::UnityAPI::SunRoofRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::SunRoofReply, ::UnityAPI::SunRoofRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SunRoofControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::SunRoofReply>* UnityAPIService::Stub::AsyncSunRoofControlRaw(::grpc::ClientContext* context, const ::UnityAPI::SunRoofRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSunRoofControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontRightPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsRequest& request, ::UnityAPI::FrontRightPowerWindowsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontRightPowerWindowsRequest, ::UnityAPI::FrontRightPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontRightPowerWindowsControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontRightPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsRequest* request, ::UnityAPI::FrontRightPowerWindowsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontRightPowerWindowsRequest, ::UnityAPI::FrontRightPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightPowerWindowsControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontRightPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsRequest* request, ::UnityAPI::FrontRightPowerWindowsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightPowerWindowsControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightPowerWindowsReply>* UnityAPIService::Stub::PrepareAsyncFrontRightPowerWindowsControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontRightPowerWindowsReply, ::UnityAPI::FrontRightPowerWindowsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontRightPowerWindowsControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightPowerWindowsReply>* UnityAPIService::Stub::AsyncFrontRightPowerWindowsControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontRightPowerWindowsControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontLeftPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsRequest& request, ::UnityAPI::FrontLeftPowerWindowsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontLeftPowerWindowsRequest, ::UnityAPI::FrontLeftPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontLeftPowerWindowsControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontLeftPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsRequest* request, ::UnityAPI::FrontLeftPowerWindowsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontLeftPowerWindowsRequest, ::UnityAPI::FrontLeftPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftPowerWindowsControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontLeftPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsRequest* request, ::UnityAPI::FrontLeftPowerWindowsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftPowerWindowsControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftPowerWindowsReply>* UnityAPIService::Stub::PrepareAsyncFrontLeftPowerWindowsControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontLeftPowerWindowsReply, ::UnityAPI::FrontLeftPowerWindowsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontLeftPowerWindowsControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftPowerWindowsReply>* UnityAPIService::Stub::AsyncFrontLeftPowerWindowsControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontLeftPowerWindowsControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearRightPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsRequest& request, ::UnityAPI::RearRightPowerWindowsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearRightPowerWindowsRequest, ::UnityAPI::RearRightPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearRightPowerWindowsControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearRightPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsRequest* request, ::UnityAPI::RearRightPowerWindowsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearRightPowerWindowsRequest, ::UnityAPI::RearRightPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightPowerWindowsControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearRightPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsRequest* request, ::UnityAPI::RearRightPowerWindowsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightPowerWindowsControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightPowerWindowsReply>* UnityAPIService::Stub::PrepareAsyncRearRightPowerWindowsControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearRightPowerWindowsReply, ::UnityAPI::RearRightPowerWindowsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearRightPowerWindowsControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightPowerWindowsReply>* UnityAPIService::Stub::AsyncRearRightPowerWindowsControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearRightPowerWindowsControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearLeftPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsRequest& request, ::UnityAPI::RearLeftPowerWindowsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearLeftPowerWindowsRequest, ::UnityAPI::RearLeftPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearLeftPowerWindowsControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearLeftPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsRequest* request, ::UnityAPI::RearLeftPowerWindowsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearLeftPowerWindowsRequest, ::UnityAPI::RearLeftPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftPowerWindowsControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearLeftPowerWindowsControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsRequest* request, ::UnityAPI::RearLeftPowerWindowsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftPowerWindowsControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftPowerWindowsReply>* UnityAPIService::Stub::PrepareAsyncRearLeftPowerWindowsControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearLeftPowerWindowsReply, ::UnityAPI::RearLeftPowerWindowsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearLeftPowerWindowsControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftPowerWindowsReply>* UnityAPIService::Stub::AsyncRearLeftPowerWindowsControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearLeftPowerWindowsControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::SideMirrorSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::SideMirrorSwitchRequest& request, ::UnityAPI::SideMirrorSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::SideMirrorSwitchRequest, ::UnityAPI::SideMirrorSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SideMirrorSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::SideMirrorSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::SideMirrorSwitchRequest* request, ::UnityAPI::SideMirrorSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::SideMirrorSwitchRequest, ::UnityAPI::SideMirrorSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SideMirrorSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::SideMirrorSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::SideMirrorSwitchRequest* request, ::UnityAPI::SideMirrorSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SideMirrorSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::SideMirrorSwitchReply>* UnityAPIService::Stub::PrepareAsyncSideMirrorSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::SideMirrorSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::SideMirrorSwitchReply, ::UnityAPI::SideMirrorSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SideMirrorSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::SideMirrorSwitchReply>* UnityAPIService::Stub::AsyncSideMirrorSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::SideMirrorSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSideMirrorSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::InstrumentLightControl(::grpc::ClientContext* context, const ::UnityAPI::InstrumentLightRequest& request, ::UnityAPI::InstrumentLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::InstrumentLightRequest, ::UnityAPI::InstrumentLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstrumentLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::InstrumentLightControl(::grpc::ClientContext* context, const ::UnityAPI::InstrumentLightRequest* request, ::UnityAPI::InstrumentLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::InstrumentLightRequest, ::UnityAPI::InstrumentLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstrumentLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::InstrumentLightControl(::grpc::ClientContext* context, const ::UnityAPI::InstrumentLightRequest* request, ::UnityAPI::InstrumentLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstrumentLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::InstrumentLightReply>* UnityAPIService::Stub::PrepareAsyncInstrumentLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::InstrumentLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::InstrumentLightReply, ::UnityAPI::InstrumentLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstrumentLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::InstrumentLightReply>* UnityAPIService::Stub::AsyncInstrumentLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::InstrumentLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstrumentLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::PassgenerRoomDomeLightControl(::grpc::ClientContext* context, const ::UnityAPI::PassgenerRoomDomeLightRequest& request, ::UnityAPI::PassgenerRoomDomeLightReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::PassgenerRoomDomeLightRequest, ::UnityAPI::PassgenerRoomDomeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PassgenerRoomDomeLightControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::PassgenerRoomDomeLightControl(::grpc::ClientContext* context, const ::UnityAPI::PassgenerRoomDomeLightRequest* request, ::UnityAPI::PassgenerRoomDomeLightReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::PassgenerRoomDomeLightRequest, ::UnityAPI::PassgenerRoomDomeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PassgenerRoomDomeLightControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::PassgenerRoomDomeLightControl(::grpc::ClientContext* context, const ::UnityAPI::PassgenerRoomDomeLightRequest* request, ::UnityAPI::PassgenerRoomDomeLightReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PassgenerRoomDomeLightControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::PassgenerRoomDomeLightReply>* UnityAPIService::Stub::PrepareAsyncPassgenerRoomDomeLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::PassgenerRoomDomeLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::PassgenerRoomDomeLightReply, ::UnityAPI::PassgenerRoomDomeLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PassgenerRoomDomeLightControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::PassgenerRoomDomeLightReply>* UnityAPIService::Stub::AsyncPassgenerRoomDomeLightControlRaw(::grpc::ClientContext* context, const ::UnityAPI::PassgenerRoomDomeLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPassgenerRoomDomeLightControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::ReadingLightDriverSideControl(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightDriverSideRequest& request, ::UnityAPI::ReadingLightDriverSideReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::ReadingLightDriverSideRequest, ::UnityAPI::ReadingLightDriverSideReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadingLightDriverSideControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::ReadingLightDriverSideControl(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightDriverSideRequest* request, ::UnityAPI::ReadingLightDriverSideReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::ReadingLightDriverSideRequest, ::UnityAPI::ReadingLightDriverSideReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadingLightDriverSideControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::ReadingLightDriverSideControl(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightDriverSideRequest* request, ::UnityAPI::ReadingLightDriverSideReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadingLightDriverSideControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::ReadingLightDriverSideReply>* UnityAPIService::Stub::PrepareAsyncReadingLightDriverSideControlRaw(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightDriverSideRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::ReadingLightDriverSideReply, ::UnityAPI::ReadingLightDriverSideRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadingLightDriverSideControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::ReadingLightDriverSideReply>* UnityAPIService::Stub::AsyncReadingLightDriverSideControlRaw(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightDriverSideRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadingLightDriverSideControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::ReadingLightPassgenerSideControl(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightPassgenerSideRequest& request, ::UnityAPI::ReadingLightPassgenerSideReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::ReadingLightPassgenerSideRequest, ::UnityAPI::ReadingLightPassgenerSideReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadingLightPassgenerSideControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::ReadingLightPassgenerSideControl(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightPassgenerSideRequest* request, ::UnityAPI::ReadingLightPassgenerSideReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::ReadingLightPassgenerSideRequest, ::UnityAPI::ReadingLightPassgenerSideReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadingLightPassgenerSideControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::ReadingLightPassgenerSideControl(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightPassgenerSideRequest* request, ::UnityAPI::ReadingLightPassgenerSideReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadingLightPassgenerSideControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::ReadingLightPassgenerSideReply>* UnityAPIService::Stub::PrepareAsyncReadingLightPassgenerSideControlRaw(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightPassgenerSideRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::ReadingLightPassgenerSideReply, ::UnityAPI::ReadingLightPassgenerSideRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadingLightPassgenerSideControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::ReadingLightPassgenerSideReply>* UnityAPIService::Stub::AsyncReadingLightPassgenerSideControlRaw(::grpc::ClientContext* context, const ::UnityAPI::ReadingLightPassgenerSideRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadingLightPassgenerSideControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontRightPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsSwitchRequest& request, ::UnityAPI::FrontRightPowerWindowsSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontRightPowerWindowsSwitchRequest, ::UnityAPI::FrontRightPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontRightPowerWindowsSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontRightPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsSwitchRequest* request, ::UnityAPI::FrontRightPowerWindowsSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontRightPowerWindowsSwitchRequest, ::UnityAPI::FrontRightPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightPowerWindowsSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontRightPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsSwitchRequest* request, ::UnityAPI::FrontRightPowerWindowsSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightPowerWindowsSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightPowerWindowsSwitchReply>* UnityAPIService::Stub::PrepareAsyncFrontRightPowerWindowsSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontRightPowerWindowsSwitchReply, ::UnityAPI::FrontRightPowerWindowsSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontRightPowerWindowsSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightPowerWindowsSwitchReply>* UnityAPIService::Stub::AsyncFrontRightPowerWindowsSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightPowerWindowsSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontRightPowerWindowsSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontLeftPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsSwitchRequest& request, ::UnityAPI::FrontLeftPowerWindowsSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontLeftPowerWindowsSwitchRequest, ::UnityAPI::FrontLeftPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontLeftPowerWindowsSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontLeftPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsSwitchRequest* request, ::UnityAPI::FrontLeftPowerWindowsSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontLeftPowerWindowsSwitchRequest, ::UnityAPI::FrontLeftPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftPowerWindowsSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontLeftPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsSwitchRequest* request, ::UnityAPI::FrontLeftPowerWindowsSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftPowerWindowsSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftPowerWindowsSwitchReply>* UnityAPIService::Stub::PrepareAsyncFrontLeftPowerWindowsSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontLeftPowerWindowsSwitchReply, ::UnityAPI::FrontLeftPowerWindowsSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontLeftPowerWindowsSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftPowerWindowsSwitchReply>* UnityAPIService::Stub::AsyncFrontLeftPowerWindowsSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftPowerWindowsSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontLeftPowerWindowsSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearRightPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsSwitchRequest& request, ::UnityAPI::RearRightPowerWindowsSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearRightPowerWindowsSwitchRequest, ::UnityAPI::RearRightPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearRightPowerWindowsSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearRightPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsSwitchRequest* request, ::UnityAPI::RearRightPowerWindowsSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearRightPowerWindowsSwitchRequest, ::UnityAPI::RearRightPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightPowerWindowsSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearRightPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsSwitchRequest* request, ::UnityAPI::RearRightPowerWindowsSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightPowerWindowsSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightPowerWindowsSwitchReply>* UnityAPIService::Stub::PrepareAsyncRearRightPowerWindowsSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearRightPowerWindowsSwitchReply, ::UnityAPI::RearRightPowerWindowsSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearRightPowerWindowsSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightPowerWindowsSwitchReply>* UnityAPIService::Stub::AsyncRearRightPowerWindowsSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightPowerWindowsSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearRightPowerWindowsSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearLeftPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsSwitchRequest& request, ::UnityAPI::RearLeftPowerWindowsSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearLeftPowerWindowsSwitchRequest, ::UnityAPI::RearLeftPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearLeftPowerWindowsSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearLeftPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsSwitchRequest* request, ::UnityAPI::RearLeftPowerWindowsSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearLeftPowerWindowsSwitchRequest, ::UnityAPI::RearLeftPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftPowerWindowsSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearLeftPowerWindowsSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsSwitchRequest* request, ::UnityAPI::RearLeftPowerWindowsSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftPowerWindowsSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftPowerWindowsSwitchReply>* UnityAPIService::Stub::PrepareAsyncRearLeftPowerWindowsSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearLeftPowerWindowsSwitchReply, ::UnityAPI::RearLeftPowerWindowsSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearLeftPowerWindowsSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftPowerWindowsSwitchReply>* UnityAPIService::Stub::AsyncRearLeftPowerWindowsSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftPowerWindowsSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearLeftPowerWindowsSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::HornControl(::grpc::ClientContext* context, const ::UnityAPI::HornRequest& request, ::UnityAPI::HornReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::HornRequest, ::UnityAPI::HornReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HornControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::HornControl(::grpc::ClientContext* context, const ::UnityAPI::HornRequest* request, ::UnityAPI::HornReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::HornRequest, ::UnityAPI::HornReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HornControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::HornControl(::grpc::ClientContext* context, const ::UnityAPI::HornRequest* request, ::UnityAPI::HornReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HornControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::HornReply>* UnityAPIService::Stub::PrepareAsyncHornControlRaw(::grpc::ClientContext* context, const ::UnityAPI::HornRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::HornReply, ::UnityAPI::HornRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HornControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::HornReply>* UnityAPIService::Stub::AsyncHornControlRaw(::grpc::ClientContext* context, const ::UnityAPI::HornRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHornControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::BuzzerControl(::grpc::ClientContext* context, const ::UnityAPI::BuzzerRequest& request, ::UnityAPI::BuzzerReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::BuzzerRequest, ::UnityAPI::BuzzerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BuzzerControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::BuzzerControl(::grpc::ClientContext* context, const ::UnityAPI::BuzzerRequest* request, ::UnityAPI::BuzzerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::BuzzerRequest, ::UnityAPI::BuzzerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuzzerControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::BuzzerControl(::grpc::ClientContext* context, const ::UnityAPI::BuzzerRequest* request, ::UnityAPI::BuzzerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuzzerControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::BuzzerReply>* UnityAPIService::Stub::PrepareAsyncBuzzerControlRaw(::grpc::ClientContext* context, const ::UnityAPI::BuzzerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::BuzzerReply, ::UnityAPI::BuzzerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BuzzerControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::BuzzerReply>* UnityAPIService::Stub::AsyncBuzzerControlRaw(::grpc::ClientContext* context, const ::UnityAPI::BuzzerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBuzzerControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::AirConditionerControl(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerRequest& request, ::UnityAPI::AirConditionerReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::AirConditionerRequest, ::UnityAPI::AirConditionerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AirConditionerControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::AirConditionerControl(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerRequest* request, ::UnityAPI::AirConditionerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::AirConditionerRequest, ::UnityAPI::AirConditionerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AirConditionerControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::AirConditionerControl(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerRequest* request, ::UnityAPI::AirConditionerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AirConditionerControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::AirConditionerReply>* UnityAPIService::Stub::PrepareAsyncAirConditionerControlRaw(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::AirConditionerReply, ::UnityAPI::AirConditionerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AirConditionerControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::AirConditionerReply>* UnityAPIService::Stub::AsyncAirConditionerControlRaw(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAirConditionerControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::AirConditionerTemperatureControl(::grpc::ClientContext* context, const ::UnityAPI::AirCondTemperatureRequest& request, ::UnityAPI::AirCondTemperatureReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::AirCondTemperatureRequest, ::UnityAPI::AirCondTemperatureReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AirConditionerTemperatureControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::AirConditionerTemperatureControl(::grpc::ClientContext* context, const ::UnityAPI::AirCondTemperatureRequest* request, ::UnityAPI::AirCondTemperatureReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::AirCondTemperatureRequest, ::UnityAPI::AirCondTemperatureReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AirConditionerTemperatureControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::AirConditionerTemperatureControl(::grpc::ClientContext* context, const ::UnityAPI::AirCondTemperatureRequest* request, ::UnityAPI::AirCondTemperatureReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AirConditionerTemperatureControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::AirCondTemperatureReply>* UnityAPIService::Stub::PrepareAsyncAirConditionerTemperatureControlRaw(::grpc::ClientContext* context, const ::UnityAPI::AirCondTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::AirCondTemperatureReply, ::UnityAPI::AirCondTemperatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AirConditionerTemperatureControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::AirCondTemperatureReply>* UnityAPIService::Stub::AsyncAirConditionerTemperatureControlRaw(::grpc::ClientContext* context, const ::UnityAPI::AirCondTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAirConditionerTemperatureControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::AirConditionerFanSpeedControl(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerFanSpeedRequest& request, ::UnityAPI::AirConditionerFanSpeedReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::AirConditionerFanSpeedRequest, ::UnityAPI::AirConditionerFanSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AirConditionerFanSpeedControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::AirConditionerFanSpeedControl(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerFanSpeedRequest* request, ::UnityAPI::AirConditionerFanSpeedReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::AirConditionerFanSpeedRequest, ::UnityAPI::AirConditionerFanSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AirConditionerFanSpeedControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::AirConditionerFanSpeedControl(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerFanSpeedRequest* request, ::UnityAPI::AirConditionerFanSpeedReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AirConditionerFanSpeedControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::AirConditionerFanSpeedReply>* UnityAPIService::Stub::PrepareAsyncAirConditionerFanSpeedControlRaw(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerFanSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::AirConditionerFanSpeedReply, ::UnityAPI::AirConditionerFanSpeedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AirConditionerFanSpeedControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::AirConditionerFanSpeedReply>* UnityAPIService::Stub::AsyncAirConditionerFanSpeedControlRaw(::grpc::ClientContext* context, const ::UnityAPI::AirConditionerFanSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAirConditionerFanSpeedControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::HandlingControl(::grpc::ClientContext* context, const ::UnityAPI::HandlingRequest& request, ::UnityAPI::HandlingReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::HandlingRequest, ::UnityAPI::HandlingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandlingControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::HandlingControl(::grpc::ClientContext* context, const ::UnityAPI::HandlingRequest* request, ::UnityAPI::HandlingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::HandlingRequest, ::UnityAPI::HandlingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandlingControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::HandlingControl(::grpc::ClientContext* context, const ::UnityAPI::HandlingRequest* request, ::UnityAPI::HandlingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandlingControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::HandlingReply>* UnityAPIService::Stub::PrepareAsyncHandlingControlRaw(::grpc::ClientContext* context, const ::UnityAPI::HandlingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::HandlingReply, ::UnityAPI::HandlingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandlingControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::HandlingReply>* UnityAPIService::Stub::AsyncHandlingControlRaw(::grpc::ClientContext* context, const ::UnityAPI::HandlingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandlingControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::CentralDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::CentralDoorLockSwitchRequest& request, ::UnityAPI::CentralDoorLockSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::CentralDoorLockSwitchRequest, ::UnityAPI::CentralDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CentralDoorLockSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::CentralDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::CentralDoorLockSwitchRequest* request, ::UnityAPI::CentralDoorLockSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::CentralDoorLockSwitchRequest, ::UnityAPI::CentralDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CentralDoorLockSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::CentralDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::CentralDoorLockSwitchRequest* request, ::UnityAPI::CentralDoorLockSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CentralDoorLockSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::CentralDoorLockSwitchReply>* UnityAPIService::Stub::PrepareAsyncCentralDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::CentralDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::CentralDoorLockSwitchReply, ::UnityAPI::CentralDoorLockSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CentralDoorLockSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::CentralDoorLockSwitchReply>* UnityAPIService::Stub::AsyncCentralDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::CentralDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCentralDoorLockSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontRightDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorLockSwitchRequest& request, ::UnityAPI::FrontRightDoorLockSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontRightDoorLockSwitchRequest, ::UnityAPI::FrontRightDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontRightDoorLockSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontRightDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorLockSwitchRequest* request, ::UnityAPI::FrontRightDoorLockSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontRightDoorLockSwitchRequest, ::UnityAPI::FrontRightDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightDoorLockSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontRightDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorLockSwitchRequest* request, ::UnityAPI::FrontRightDoorLockSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontRightDoorLockSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightDoorLockSwitchReply>* UnityAPIService::Stub::PrepareAsyncFrontRightDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontRightDoorLockSwitchReply, ::UnityAPI::FrontRightDoorLockSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontRightDoorLockSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontRightDoorLockSwitchReply>* UnityAPIService::Stub::AsyncFrontRightDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontRightDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontRightDoorLockSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::FrontLeftDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorLockSwitchRequest& request, ::UnityAPI::FrontLeftDoorLockSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::FrontLeftDoorLockSwitchRequest, ::UnityAPI::FrontLeftDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrontLeftDoorLockSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::FrontLeftDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorLockSwitchRequest* request, ::UnityAPI::FrontLeftDoorLockSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::FrontLeftDoorLockSwitchRequest, ::UnityAPI::FrontLeftDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftDoorLockSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::FrontLeftDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorLockSwitchRequest* request, ::UnityAPI::FrontLeftDoorLockSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrontLeftDoorLockSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftDoorLockSwitchReply>* UnityAPIService::Stub::PrepareAsyncFrontLeftDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::FrontLeftDoorLockSwitchReply, ::UnityAPI::FrontLeftDoorLockSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrontLeftDoorLockSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::FrontLeftDoorLockSwitchReply>* UnityAPIService::Stub::AsyncFrontLeftDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::FrontLeftDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrontLeftDoorLockSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearRightDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorLockSwitchRequest& request, ::UnityAPI::RearRightDoorLockSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearRightDoorLockSwitchRequest, ::UnityAPI::RearRightDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearRightDoorLockSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearRightDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorLockSwitchRequest* request, ::UnityAPI::RearRightDoorLockSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearRightDoorLockSwitchRequest, ::UnityAPI::RearRightDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightDoorLockSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearRightDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorLockSwitchRequest* request, ::UnityAPI::RearRightDoorLockSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearRightDoorLockSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightDoorLockSwitchReply>* UnityAPIService::Stub::PrepareAsyncRearRightDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearRightDoorLockSwitchReply, ::UnityAPI::RearRightDoorLockSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearRightDoorLockSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearRightDoorLockSwitchReply>* UnityAPIService::Stub::AsyncRearRightDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearRightDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearRightDoorLockSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::RearLeftDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorLockSwitchRequest& request, ::UnityAPI::RearLeftDoorLockSwitchReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::RearLeftDoorLockSwitchRequest, ::UnityAPI::RearLeftDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RearLeftDoorLockSwitchControl_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::RearLeftDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorLockSwitchRequest* request, ::UnityAPI::RearLeftDoorLockSwitchReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::RearLeftDoorLockSwitchRequest, ::UnityAPI::RearLeftDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftDoorLockSwitchControl_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::RearLeftDoorLockSwitchControl(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorLockSwitchRequest* request, ::UnityAPI::RearLeftDoorLockSwitchReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RearLeftDoorLockSwitchControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftDoorLockSwitchReply>* UnityAPIService::Stub::PrepareAsyncRearLeftDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::RearLeftDoorLockSwitchReply, ::UnityAPI::RearLeftDoorLockSwitchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RearLeftDoorLockSwitchControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::RearLeftDoorLockSwitchReply>* UnityAPIService::Stub::AsyncRearLeftDoorLockSwitchControlRaw(::grpc::ClientContext* context, const ::UnityAPI::RearLeftDoorLockSwitchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRearLeftDoorLockSwitchControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::get_database(::grpc::ClientContext* context, const ::UnityAPI::getDBRequest& request, ::UnityAPI::getDBReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::getDBRequest, ::UnityAPI::getDBReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_database_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::get_database(::grpc::ClientContext* context, const ::UnityAPI::getDBRequest* request, ::UnityAPI::getDBReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::getDBRequest, ::UnityAPI::getDBReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_database_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::get_database(::grpc::ClientContext* context, const ::UnityAPI::getDBRequest* request, ::UnityAPI::getDBReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_database_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::getDBReply>* UnityAPIService::Stub::PrepareAsyncget_databaseRaw(::grpc::ClientContext* context, const ::UnityAPI::getDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::getDBReply, ::UnityAPI::getDBRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_database_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::getDBReply>* UnityAPIService::Stub::Asyncget_databaseRaw(::grpc::ClientContext* context, const ::UnityAPI::getDBRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_databaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UnityAPIService::Stub::send_update_database(::grpc::ClientContext* context, const ::UnityAPI::setDBRequest& request, ::UnityAPI::setDBReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UnityAPI::setDBRequest, ::UnityAPI::setDBReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_send_update_database_, context, request, response);
}

void UnityAPIService::Stub::experimental_async::send_update_database(::grpc::ClientContext* context, const ::UnityAPI::setDBRequest* request, ::UnityAPI::setDBReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UnityAPI::setDBRequest, ::UnityAPI::setDBReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_update_database_, context, request, response, std::move(f));
}

void UnityAPIService::Stub::experimental_async::send_update_database(::grpc::ClientContext* context, const ::UnityAPI::setDBRequest* request, ::UnityAPI::setDBReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_update_database_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::setDBReply>* UnityAPIService::Stub::PrepareAsyncsend_update_databaseRaw(::grpc::ClientContext* context, const ::UnityAPI::setDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UnityAPI::setDBReply, ::UnityAPI::setDBRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_send_update_database_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UnityAPI::setDBReply>* UnityAPIService::Stub::Asyncsend_update_databaseRaw(::grpc::ClientContext* context, const ::UnityAPI::setDBRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsend_update_databaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

UnityAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontLowLightRequest, ::UnityAPI::FrontLowLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontLowLightRequest* req,
             ::UnityAPI::FrontLowLightReply* resp) {
               return service->FrontLowLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontHighLightRequest, ::UnityAPI::FrontHighLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontHighLightRequest* req,
             ::UnityAPI::FrontHighLightReply* resp) {
               return service->FrontHighLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearLightRequest, ::UnityAPI::RearLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearLightRequest* req,
             ::UnityAPI::RearLightReply* resp) {
               return service->RearLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontDaytimeLightRequest, ::UnityAPI::FrontDaytimeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontDaytimeLightRequest* req,
             ::UnityAPI::FrontDaytimeLightReply* resp) {
               return service->FrontDaytimeLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::BrakeLightRequest, ::UnityAPI::BrakeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::BrakeLightRequest* req,
             ::UnityAPI::BrakeLightReply* resp) {
               return service->BrakeLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::ReverseLightRequest, ::UnityAPI::ReverseLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::ReverseLightRequest* req,
             ::UnityAPI::ReverseLightReply* resp) {
               return service->ReverseLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontFogLightRequest, ::UnityAPI::FrontFogLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontFogLightRequest* req,
             ::UnityAPI::FrontFogLightReply* resp) {
               return service->FrontFogLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearFogLightRequest, ::UnityAPI::RearFogLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearFogLightRequest* req,
             ::UnityAPI::RearFogLightReply* resp) {
               return service->RearFogLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::ClearanceLampRequest, ::UnityAPI::ClearanceLampReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::ClearanceLampRequest* req,
             ::UnityAPI::ClearanceLampReply* resp) {
               return service->ClearanceLampControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontLeftBlinkerLightRequest, ::UnityAPI::FrontLeftBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontLeftBlinkerLightRequest* req,
             ::UnityAPI::FrontLeftBlinkerLightReply* resp) {
               return service->FrontLeftBlinkerLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontRightBlinkerLightRequest, ::UnityAPI::FrontRightBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontRightBlinkerLightRequest* req,
             ::UnityAPI::FrontRightBlinkerLightReply* resp) {
               return service->FrontRightBlinkerLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearLeftBlinkerLightRequest, ::UnityAPI::RearLeftBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearLeftBlinkerLightRequest* req,
             ::UnityAPI::RearLeftBlinkerLightReply* resp) {
               return service->RearLeftBlinkerLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearRightBlinkerLightRequest, ::UnityAPI::RearRightBlinkerLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearRightBlinkerLightRequest* req,
             ::UnityAPI::RearRightBlinkerLightReply* resp) {
               return service->RearRightBlinkerLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontWiperRequest, ::UnityAPI::FrontWiperReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontWiperRequest* req,
             ::UnityAPI::FrontWiperReply* resp) {
               return service->FrontWiperControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearWiperRequest, ::UnityAPI::RearWiperReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearWiperRequest* req,
             ::UnityAPI::RearWiperReply* resp) {
               return service->RearWiperControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::LeftSideMirrorRequest, ::UnityAPI::LeftSideMirrorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::LeftSideMirrorRequest* req,
             ::UnityAPI::LeftSideMirrorReply* resp) {
               return service->LeftSideMirrorControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RightSideMirrorRequest, ::UnityAPI::RightSideMirrorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RightSideMirrorRequest* req,
             ::UnityAPI::RightSideMirrorReply* resp) {
               return service->RightSideMirrorControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontRightDoorRequest, ::UnityAPI::FrontRightDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontRightDoorRequest* req,
             ::UnityAPI::FrontRightDoorReply* resp) {
               return service->FrontRightDoorControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontLeftDoorRequest, ::UnityAPI::FrontLeftDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontLeftDoorRequest* req,
             ::UnityAPI::FrontLeftDoorReply* resp) {
               return service->FrontLeftDoorControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearRightDoorRequest, ::UnityAPI::RearRightDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearRightDoorRequest* req,
             ::UnityAPI::RearRightDoorReply* resp) {
               return service->RearRightDoorControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearLeftDoorRequest, ::UnityAPI::RearLeftDoorReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearLeftDoorRequest* req,
             ::UnityAPI::RearLeftDoorReply* resp) {
               return service->RearLeftDoorControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::TrunkRequest, ::UnityAPI::TrunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::TrunkRequest* req,
             ::UnityAPI::TrunkReply* resp) {
               return service->TrunkControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::SunRoofRequest, ::UnityAPI::SunRoofReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::SunRoofRequest* req,
             ::UnityAPI::SunRoofReply* resp) {
               return service->SunRoofControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontRightPowerWindowsRequest, ::UnityAPI::FrontRightPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontRightPowerWindowsRequest* req,
             ::UnityAPI::FrontRightPowerWindowsReply* resp) {
               return service->FrontRightPowerWindowsControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontLeftPowerWindowsRequest, ::UnityAPI::FrontLeftPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontLeftPowerWindowsRequest* req,
             ::UnityAPI::FrontLeftPowerWindowsReply* resp) {
               return service->FrontLeftPowerWindowsControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearRightPowerWindowsRequest, ::UnityAPI::RearRightPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearRightPowerWindowsRequest* req,
             ::UnityAPI::RearRightPowerWindowsReply* resp) {
               return service->RearRightPowerWindowsControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearLeftPowerWindowsRequest, ::UnityAPI::RearLeftPowerWindowsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearLeftPowerWindowsRequest* req,
             ::UnityAPI::RearLeftPowerWindowsReply* resp) {
               return service->RearLeftPowerWindowsControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::SideMirrorSwitchRequest, ::UnityAPI::SideMirrorSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::SideMirrorSwitchRequest* req,
             ::UnityAPI::SideMirrorSwitchReply* resp) {
               return service->SideMirrorSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::InstrumentLightRequest, ::UnityAPI::InstrumentLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::InstrumentLightRequest* req,
             ::UnityAPI::InstrumentLightReply* resp) {
               return service->InstrumentLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::PassgenerRoomDomeLightRequest, ::UnityAPI::PassgenerRoomDomeLightReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::PassgenerRoomDomeLightRequest* req,
             ::UnityAPI::PassgenerRoomDomeLightReply* resp) {
               return service->PassgenerRoomDomeLightControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::ReadingLightDriverSideRequest, ::UnityAPI::ReadingLightDriverSideReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::ReadingLightDriverSideRequest* req,
             ::UnityAPI::ReadingLightDriverSideReply* resp) {
               return service->ReadingLightDriverSideControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::ReadingLightPassgenerSideRequest, ::UnityAPI::ReadingLightPassgenerSideReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::ReadingLightPassgenerSideRequest* req,
             ::UnityAPI::ReadingLightPassgenerSideReply* resp) {
               return service->ReadingLightPassgenerSideControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontRightPowerWindowsSwitchRequest, ::UnityAPI::FrontRightPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontRightPowerWindowsSwitchRequest* req,
             ::UnityAPI::FrontRightPowerWindowsSwitchReply* resp) {
               return service->FrontRightPowerWindowsSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontLeftPowerWindowsSwitchRequest, ::UnityAPI::FrontLeftPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontLeftPowerWindowsSwitchRequest* req,
             ::UnityAPI::FrontLeftPowerWindowsSwitchReply* resp) {
               return service->FrontLeftPowerWindowsSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearRightPowerWindowsSwitchRequest, ::UnityAPI::RearRightPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearRightPowerWindowsSwitchRequest* req,
             ::UnityAPI::RearRightPowerWindowsSwitchReply* resp) {
               return service->RearRightPowerWindowsSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearLeftPowerWindowsSwitchRequest, ::UnityAPI::RearLeftPowerWindowsSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearLeftPowerWindowsSwitchRequest* req,
             ::UnityAPI::RearLeftPowerWindowsSwitchReply* resp) {
               return service->RearLeftPowerWindowsSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::HornRequest, ::UnityAPI::HornReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::HornRequest* req,
             ::UnityAPI::HornReply* resp) {
               return service->HornControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::BuzzerRequest, ::UnityAPI::BuzzerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::BuzzerRequest* req,
             ::UnityAPI::BuzzerReply* resp) {
               return service->BuzzerControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::AirConditionerRequest, ::UnityAPI::AirConditionerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::AirConditionerRequest* req,
             ::UnityAPI::AirConditionerReply* resp) {
               return service->AirConditionerControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::AirCondTemperatureRequest, ::UnityAPI::AirCondTemperatureReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::AirCondTemperatureRequest* req,
             ::UnityAPI::AirCondTemperatureReply* resp) {
               return service->AirConditionerTemperatureControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::AirConditionerFanSpeedRequest, ::UnityAPI::AirConditionerFanSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::AirConditionerFanSpeedRequest* req,
             ::UnityAPI::AirConditionerFanSpeedReply* resp) {
               return service->AirConditionerFanSpeedControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::HandlingRequest, ::UnityAPI::HandlingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::HandlingRequest* req,
             ::UnityAPI::HandlingReply* resp) {
               return service->HandlingControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::CentralDoorLockSwitchRequest, ::UnityAPI::CentralDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::CentralDoorLockSwitchRequest* req,
             ::UnityAPI::CentralDoorLockSwitchReply* resp) {
               return service->CentralDoorLockSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontRightDoorLockSwitchRequest, ::UnityAPI::FrontRightDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontRightDoorLockSwitchRequest* req,
             ::UnityAPI::FrontRightDoorLockSwitchReply* resp) {
               return service->FrontRightDoorLockSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::FrontLeftDoorLockSwitchRequest, ::UnityAPI::FrontLeftDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::FrontLeftDoorLockSwitchRequest* req,
             ::UnityAPI::FrontLeftDoorLockSwitchReply* resp) {
               return service->FrontLeftDoorLockSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearRightDoorLockSwitchRequest, ::UnityAPI::RearRightDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearRightDoorLockSwitchRequest* req,
             ::UnityAPI::RearRightDoorLockSwitchReply* resp) {
               return service->RearRightDoorLockSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::RearLeftDoorLockSwitchRequest, ::UnityAPI::RearLeftDoorLockSwitchReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::RearLeftDoorLockSwitchRequest* req,
             ::UnityAPI::RearLeftDoorLockSwitchReply* resp) {
               return service->RearLeftDoorLockSwitchControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::getDBRequest, ::UnityAPI::getDBReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::getDBRequest* req,
             ::UnityAPI::getDBReply* resp) {
               return service->get_database(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UnityAPIService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UnityAPIService::Service, ::UnityAPI::setDBRequest, ::UnityAPI::setDBReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UnityAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UnityAPI::setDBRequest* req,
             ::UnityAPI::setDBReply* resp) {
               return service->send_update_database(ctx, req, resp);
             }, this)));
}

UnityAPIService::Service::~Service() {
}

::grpc::Status UnityAPIService::Service::FrontLowLightControl(::grpc::ServerContext* context, const ::UnityAPI::FrontLowLightRequest* request, ::UnityAPI::FrontLowLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontHighLightControl(::grpc::ServerContext* context, const ::UnityAPI::FrontHighLightRequest* request, ::UnityAPI::FrontHighLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearLightControl(::grpc::ServerContext* context, const ::UnityAPI::RearLightRequest* request, ::UnityAPI::RearLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontDaytimeLightControl(::grpc::ServerContext* context, const ::UnityAPI::FrontDaytimeLightRequest* request, ::UnityAPI::FrontDaytimeLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::BrakeLightControl(::grpc::ServerContext* context, const ::UnityAPI::BrakeLightRequest* request, ::UnityAPI::BrakeLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::ReverseLightControl(::grpc::ServerContext* context, const ::UnityAPI::ReverseLightRequest* request, ::UnityAPI::ReverseLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontFogLightControl(::grpc::ServerContext* context, const ::UnityAPI::FrontFogLightRequest* request, ::UnityAPI::FrontFogLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearFogLightControl(::grpc::ServerContext* context, const ::UnityAPI::RearFogLightRequest* request, ::UnityAPI::RearFogLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::ClearanceLampControl(::grpc::ServerContext* context, const ::UnityAPI::ClearanceLampRequest* request, ::UnityAPI::ClearanceLampReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontLeftBlinkerLightControl(::grpc::ServerContext* context, const ::UnityAPI::FrontLeftBlinkerLightRequest* request, ::UnityAPI::FrontLeftBlinkerLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontRightBlinkerLightControl(::grpc::ServerContext* context, const ::UnityAPI::FrontRightBlinkerLightRequest* request, ::UnityAPI::FrontRightBlinkerLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearLeftBlinkerLightControl(::grpc::ServerContext* context, const ::UnityAPI::RearLeftBlinkerLightRequest* request, ::UnityAPI::RearLeftBlinkerLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearRightBlinkerLightControl(::grpc::ServerContext* context, const ::UnityAPI::RearRightBlinkerLightRequest* request, ::UnityAPI::RearRightBlinkerLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontWiperControl(::grpc::ServerContext* context, const ::UnityAPI::FrontWiperRequest* request, ::UnityAPI::FrontWiperReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearWiperControl(::grpc::ServerContext* context, const ::UnityAPI::RearWiperRequest* request, ::UnityAPI::RearWiperReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::LeftSideMirrorControl(::grpc::ServerContext* context, const ::UnityAPI::LeftSideMirrorRequest* request, ::UnityAPI::LeftSideMirrorReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RightSideMirrorControl(::grpc::ServerContext* context, const ::UnityAPI::RightSideMirrorRequest* request, ::UnityAPI::RightSideMirrorReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontRightDoorControl(::grpc::ServerContext* context, const ::UnityAPI::FrontRightDoorRequest* request, ::UnityAPI::FrontRightDoorReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontLeftDoorControl(::grpc::ServerContext* context, const ::UnityAPI::FrontLeftDoorRequest* request, ::UnityAPI::FrontLeftDoorReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearRightDoorControl(::grpc::ServerContext* context, const ::UnityAPI::RearRightDoorRequest* request, ::UnityAPI::RearRightDoorReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearLeftDoorControl(::grpc::ServerContext* context, const ::UnityAPI::RearLeftDoorRequest* request, ::UnityAPI::RearLeftDoorReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::TrunkControl(::grpc::ServerContext* context, const ::UnityAPI::TrunkRequest* request, ::UnityAPI::TrunkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::SunRoofControl(::grpc::ServerContext* context, const ::UnityAPI::SunRoofRequest* request, ::UnityAPI::SunRoofReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontRightPowerWindowsControl(::grpc::ServerContext* context, const ::UnityAPI::FrontRightPowerWindowsRequest* request, ::UnityAPI::FrontRightPowerWindowsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontLeftPowerWindowsControl(::grpc::ServerContext* context, const ::UnityAPI::FrontLeftPowerWindowsRequest* request, ::UnityAPI::FrontLeftPowerWindowsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearRightPowerWindowsControl(::grpc::ServerContext* context, const ::UnityAPI::RearRightPowerWindowsRequest* request, ::UnityAPI::RearRightPowerWindowsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearLeftPowerWindowsControl(::grpc::ServerContext* context, const ::UnityAPI::RearLeftPowerWindowsRequest* request, ::UnityAPI::RearLeftPowerWindowsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::SideMirrorSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::SideMirrorSwitchRequest* request, ::UnityAPI::SideMirrorSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::InstrumentLightControl(::grpc::ServerContext* context, const ::UnityAPI::InstrumentLightRequest* request, ::UnityAPI::InstrumentLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::PassgenerRoomDomeLightControl(::grpc::ServerContext* context, const ::UnityAPI::PassgenerRoomDomeLightRequest* request, ::UnityAPI::PassgenerRoomDomeLightReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::ReadingLightDriverSideControl(::grpc::ServerContext* context, const ::UnityAPI::ReadingLightDriverSideRequest* request, ::UnityAPI::ReadingLightDriverSideReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::ReadingLightPassgenerSideControl(::grpc::ServerContext* context, const ::UnityAPI::ReadingLightPassgenerSideRequest* request, ::UnityAPI::ReadingLightPassgenerSideReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontRightPowerWindowsSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::FrontRightPowerWindowsSwitchRequest* request, ::UnityAPI::FrontRightPowerWindowsSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontLeftPowerWindowsSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::FrontLeftPowerWindowsSwitchRequest* request, ::UnityAPI::FrontLeftPowerWindowsSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearRightPowerWindowsSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::RearRightPowerWindowsSwitchRequest* request, ::UnityAPI::RearRightPowerWindowsSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearLeftPowerWindowsSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::RearLeftPowerWindowsSwitchRequest* request, ::UnityAPI::RearLeftPowerWindowsSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::HornControl(::grpc::ServerContext* context, const ::UnityAPI::HornRequest* request, ::UnityAPI::HornReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::BuzzerControl(::grpc::ServerContext* context, const ::UnityAPI::BuzzerRequest* request, ::UnityAPI::BuzzerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::AirConditionerControl(::grpc::ServerContext* context, const ::UnityAPI::AirConditionerRequest* request, ::UnityAPI::AirConditionerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::AirConditionerTemperatureControl(::grpc::ServerContext* context, const ::UnityAPI::AirCondTemperatureRequest* request, ::UnityAPI::AirCondTemperatureReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::AirConditionerFanSpeedControl(::grpc::ServerContext* context, const ::UnityAPI::AirConditionerFanSpeedRequest* request, ::UnityAPI::AirConditionerFanSpeedReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::HandlingControl(::grpc::ServerContext* context, const ::UnityAPI::HandlingRequest* request, ::UnityAPI::HandlingReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::CentralDoorLockSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::CentralDoorLockSwitchRequest* request, ::UnityAPI::CentralDoorLockSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontRightDoorLockSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::FrontRightDoorLockSwitchRequest* request, ::UnityAPI::FrontRightDoorLockSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::FrontLeftDoorLockSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::FrontLeftDoorLockSwitchRequest* request, ::UnityAPI::FrontLeftDoorLockSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearRightDoorLockSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::RearRightDoorLockSwitchRequest* request, ::UnityAPI::RearRightDoorLockSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::RearLeftDoorLockSwitchControl(::grpc::ServerContext* context, const ::UnityAPI::RearLeftDoorLockSwitchRequest* request, ::UnityAPI::RearLeftDoorLockSwitchReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::get_database(::grpc::ServerContext* context, const ::UnityAPI::getDBRequest* request, ::UnityAPI::getDBReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UnityAPIService::Service::send_update_database(::grpc::ServerContext* context, const ::UnityAPI::setDBRequest* request, ::UnityAPI::setDBReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace UnityAPI

