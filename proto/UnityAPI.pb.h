// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnityAPI.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UnityAPI_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UnityAPI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UnityAPI_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UnityAPI_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[94]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UnityAPI_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_UnityAPI_2eproto_metadata_getter(int index);
namespace UnityAPI {
class AirCondTemperatureReply;
struct AirCondTemperatureReplyDefaultTypeInternal;
extern AirCondTemperatureReplyDefaultTypeInternal _AirCondTemperatureReply_default_instance_;
class AirCondTemperatureRequest;
struct AirCondTemperatureRequestDefaultTypeInternal;
extern AirCondTemperatureRequestDefaultTypeInternal _AirCondTemperatureRequest_default_instance_;
class AirConditionerFanSpeedReply;
struct AirConditionerFanSpeedReplyDefaultTypeInternal;
extern AirConditionerFanSpeedReplyDefaultTypeInternal _AirConditionerFanSpeedReply_default_instance_;
class AirConditionerFanSpeedRequest;
struct AirConditionerFanSpeedRequestDefaultTypeInternal;
extern AirConditionerFanSpeedRequestDefaultTypeInternal _AirConditionerFanSpeedRequest_default_instance_;
class AirConditionerReply;
struct AirConditionerReplyDefaultTypeInternal;
extern AirConditionerReplyDefaultTypeInternal _AirConditionerReply_default_instance_;
class AirConditionerRequest;
struct AirConditionerRequestDefaultTypeInternal;
extern AirConditionerRequestDefaultTypeInternal _AirConditionerRequest_default_instance_;
class BrakeLightReply;
struct BrakeLightReplyDefaultTypeInternal;
extern BrakeLightReplyDefaultTypeInternal _BrakeLightReply_default_instance_;
class BrakeLightRequest;
struct BrakeLightRequestDefaultTypeInternal;
extern BrakeLightRequestDefaultTypeInternal _BrakeLightRequest_default_instance_;
class BuzzerReply;
struct BuzzerReplyDefaultTypeInternal;
extern BuzzerReplyDefaultTypeInternal _BuzzerReply_default_instance_;
class BuzzerRequest;
struct BuzzerRequestDefaultTypeInternal;
extern BuzzerRequestDefaultTypeInternal _BuzzerRequest_default_instance_;
class CentralDoorLockSwitchReply;
struct CentralDoorLockSwitchReplyDefaultTypeInternal;
extern CentralDoorLockSwitchReplyDefaultTypeInternal _CentralDoorLockSwitchReply_default_instance_;
class CentralDoorLockSwitchRequest;
struct CentralDoorLockSwitchRequestDefaultTypeInternal;
extern CentralDoorLockSwitchRequestDefaultTypeInternal _CentralDoorLockSwitchRequest_default_instance_;
class ClearanceLampReply;
struct ClearanceLampReplyDefaultTypeInternal;
extern ClearanceLampReplyDefaultTypeInternal _ClearanceLampReply_default_instance_;
class ClearanceLampRequest;
struct ClearanceLampRequestDefaultTypeInternal;
extern ClearanceLampRequestDefaultTypeInternal _ClearanceLampRequest_default_instance_;
class FrontDaytimeLightReply;
struct FrontDaytimeLightReplyDefaultTypeInternal;
extern FrontDaytimeLightReplyDefaultTypeInternal _FrontDaytimeLightReply_default_instance_;
class FrontDaytimeLightRequest;
struct FrontDaytimeLightRequestDefaultTypeInternal;
extern FrontDaytimeLightRequestDefaultTypeInternal _FrontDaytimeLightRequest_default_instance_;
class FrontFogLightReply;
struct FrontFogLightReplyDefaultTypeInternal;
extern FrontFogLightReplyDefaultTypeInternal _FrontFogLightReply_default_instance_;
class FrontFogLightRequest;
struct FrontFogLightRequestDefaultTypeInternal;
extern FrontFogLightRequestDefaultTypeInternal _FrontFogLightRequest_default_instance_;
class FrontHighLightReply;
struct FrontHighLightReplyDefaultTypeInternal;
extern FrontHighLightReplyDefaultTypeInternal _FrontHighLightReply_default_instance_;
class FrontHighLightRequest;
struct FrontHighLightRequestDefaultTypeInternal;
extern FrontHighLightRequestDefaultTypeInternal _FrontHighLightRequest_default_instance_;
class FrontLeftBlinkerLightReply;
struct FrontLeftBlinkerLightReplyDefaultTypeInternal;
extern FrontLeftBlinkerLightReplyDefaultTypeInternal _FrontLeftBlinkerLightReply_default_instance_;
class FrontLeftBlinkerLightRequest;
struct FrontLeftBlinkerLightRequestDefaultTypeInternal;
extern FrontLeftBlinkerLightRequestDefaultTypeInternal _FrontLeftBlinkerLightRequest_default_instance_;
class FrontLeftDoorLockSwitchReply;
struct FrontLeftDoorLockSwitchReplyDefaultTypeInternal;
extern FrontLeftDoorLockSwitchReplyDefaultTypeInternal _FrontLeftDoorLockSwitchReply_default_instance_;
class FrontLeftDoorLockSwitchRequest;
struct FrontLeftDoorLockSwitchRequestDefaultTypeInternal;
extern FrontLeftDoorLockSwitchRequestDefaultTypeInternal _FrontLeftDoorLockSwitchRequest_default_instance_;
class FrontLeftDoorReply;
struct FrontLeftDoorReplyDefaultTypeInternal;
extern FrontLeftDoorReplyDefaultTypeInternal _FrontLeftDoorReply_default_instance_;
class FrontLeftDoorRequest;
struct FrontLeftDoorRequestDefaultTypeInternal;
extern FrontLeftDoorRequestDefaultTypeInternal _FrontLeftDoorRequest_default_instance_;
class FrontLeftPowerWindowsReply;
struct FrontLeftPowerWindowsReplyDefaultTypeInternal;
extern FrontLeftPowerWindowsReplyDefaultTypeInternal _FrontLeftPowerWindowsReply_default_instance_;
class FrontLeftPowerWindowsRequest;
struct FrontLeftPowerWindowsRequestDefaultTypeInternal;
extern FrontLeftPowerWindowsRequestDefaultTypeInternal _FrontLeftPowerWindowsRequest_default_instance_;
class FrontLeftPowerWindowsSwitchReply;
struct FrontLeftPowerWindowsSwitchReplyDefaultTypeInternal;
extern FrontLeftPowerWindowsSwitchReplyDefaultTypeInternal _FrontLeftPowerWindowsSwitchReply_default_instance_;
class FrontLeftPowerWindowsSwitchRequest;
struct FrontLeftPowerWindowsSwitchRequestDefaultTypeInternal;
extern FrontLeftPowerWindowsSwitchRequestDefaultTypeInternal _FrontLeftPowerWindowsSwitchRequest_default_instance_;
class FrontLowLightReply;
struct FrontLowLightReplyDefaultTypeInternal;
extern FrontLowLightReplyDefaultTypeInternal _FrontLowLightReply_default_instance_;
class FrontLowLightRequest;
struct FrontLowLightRequestDefaultTypeInternal;
extern FrontLowLightRequestDefaultTypeInternal _FrontLowLightRequest_default_instance_;
class FrontRightBlinkerLightReply;
struct FrontRightBlinkerLightReplyDefaultTypeInternal;
extern FrontRightBlinkerLightReplyDefaultTypeInternal _FrontRightBlinkerLightReply_default_instance_;
class FrontRightBlinkerLightRequest;
struct FrontRightBlinkerLightRequestDefaultTypeInternal;
extern FrontRightBlinkerLightRequestDefaultTypeInternal _FrontRightBlinkerLightRequest_default_instance_;
class FrontRightDoorLockSwitchReply;
struct FrontRightDoorLockSwitchReplyDefaultTypeInternal;
extern FrontRightDoorLockSwitchReplyDefaultTypeInternal _FrontRightDoorLockSwitchReply_default_instance_;
class FrontRightDoorLockSwitchRequest;
struct FrontRightDoorLockSwitchRequestDefaultTypeInternal;
extern FrontRightDoorLockSwitchRequestDefaultTypeInternal _FrontRightDoorLockSwitchRequest_default_instance_;
class FrontRightDoorReply;
struct FrontRightDoorReplyDefaultTypeInternal;
extern FrontRightDoorReplyDefaultTypeInternal _FrontRightDoorReply_default_instance_;
class FrontRightDoorRequest;
struct FrontRightDoorRequestDefaultTypeInternal;
extern FrontRightDoorRequestDefaultTypeInternal _FrontRightDoorRequest_default_instance_;
class FrontRightPowerWindowsReply;
struct FrontRightPowerWindowsReplyDefaultTypeInternal;
extern FrontRightPowerWindowsReplyDefaultTypeInternal _FrontRightPowerWindowsReply_default_instance_;
class FrontRightPowerWindowsRequest;
struct FrontRightPowerWindowsRequestDefaultTypeInternal;
extern FrontRightPowerWindowsRequestDefaultTypeInternal _FrontRightPowerWindowsRequest_default_instance_;
class FrontRightPowerWindowsSwitchReply;
struct FrontRightPowerWindowsSwitchReplyDefaultTypeInternal;
extern FrontRightPowerWindowsSwitchReplyDefaultTypeInternal _FrontRightPowerWindowsSwitchReply_default_instance_;
class FrontRightPowerWindowsSwitchRequest;
struct FrontRightPowerWindowsSwitchRequestDefaultTypeInternal;
extern FrontRightPowerWindowsSwitchRequestDefaultTypeInternal _FrontRightPowerWindowsSwitchRequest_default_instance_;
class FrontWiperReply;
struct FrontWiperReplyDefaultTypeInternal;
extern FrontWiperReplyDefaultTypeInternal _FrontWiperReply_default_instance_;
class FrontWiperRequest;
struct FrontWiperRequestDefaultTypeInternal;
extern FrontWiperRequestDefaultTypeInternal _FrontWiperRequest_default_instance_;
class HandlingReply;
struct HandlingReplyDefaultTypeInternal;
extern HandlingReplyDefaultTypeInternal _HandlingReply_default_instance_;
class HandlingRequest;
struct HandlingRequestDefaultTypeInternal;
extern HandlingRequestDefaultTypeInternal _HandlingRequest_default_instance_;
class HornReply;
struct HornReplyDefaultTypeInternal;
extern HornReplyDefaultTypeInternal _HornReply_default_instance_;
class HornRequest;
struct HornRequestDefaultTypeInternal;
extern HornRequestDefaultTypeInternal _HornRequest_default_instance_;
class InstrumentLightReply;
struct InstrumentLightReplyDefaultTypeInternal;
extern InstrumentLightReplyDefaultTypeInternal _InstrumentLightReply_default_instance_;
class InstrumentLightRequest;
struct InstrumentLightRequestDefaultTypeInternal;
extern InstrumentLightRequestDefaultTypeInternal _InstrumentLightRequest_default_instance_;
class LeftSideMirrorReply;
struct LeftSideMirrorReplyDefaultTypeInternal;
extern LeftSideMirrorReplyDefaultTypeInternal _LeftSideMirrorReply_default_instance_;
class LeftSideMirrorRequest;
struct LeftSideMirrorRequestDefaultTypeInternal;
extern LeftSideMirrorRequestDefaultTypeInternal _LeftSideMirrorRequest_default_instance_;
class PassgenerRoomDomeLightReply;
struct PassgenerRoomDomeLightReplyDefaultTypeInternal;
extern PassgenerRoomDomeLightReplyDefaultTypeInternal _PassgenerRoomDomeLightReply_default_instance_;
class PassgenerRoomDomeLightRequest;
struct PassgenerRoomDomeLightRequestDefaultTypeInternal;
extern PassgenerRoomDomeLightRequestDefaultTypeInternal _PassgenerRoomDomeLightRequest_default_instance_;
class ReadingLightDriverSideReply;
struct ReadingLightDriverSideReplyDefaultTypeInternal;
extern ReadingLightDriverSideReplyDefaultTypeInternal _ReadingLightDriverSideReply_default_instance_;
class ReadingLightDriverSideRequest;
struct ReadingLightDriverSideRequestDefaultTypeInternal;
extern ReadingLightDriverSideRequestDefaultTypeInternal _ReadingLightDriverSideRequest_default_instance_;
class ReadingLightPassgenerSideReply;
struct ReadingLightPassgenerSideReplyDefaultTypeInternal;
extern ReadingLightPassgenerSideReplyDefaultTypeInternal _ReadingLightPassgenerSideReply_default_instance_;
class ReadingLightPassgenerSideRequest;
struct ReadingLightPassgenerSideRequestDefaultTypeInternal;
extern ReadingLightPassgenerSideRequestDefaultTypeInternal _ReadingLightPassgenerSideRequest_default_instance_;
class RearFogLightReply;
struct RearFogLightReplyDefaultTypeInternal;
extern RearFogLightReplyDefaultTypeInternal _RearFogLightReply_default_instance_;
class RearFogLightRequest;
struct RearFogLightRequestDefaultTypeInternal;
extern RearFogLightRequestDefaultTypeInternal _RearFogLightRequest_default_instance_;
class RearLeftBlinkerLightReply;
struct RearLeftBlinkerLightReplyDefaultTypeInternal;
extern RearLeftBlinkerLightReplyDefaultTypeInternal _RearLeftBlinkerLightReply_default_instance_;
class RearLeftBlinkerLightRequest;
struct RearLeftBlinkerLightRequestDefaultTypeInternal;
extern RearLeftBlinkerLightRequestDefaultTypeInternal _RearLeftBlinkerLightRequest_default_instance_;
class RearLeftDoorLockSwitchReply;
struct RearLeftDoorLockSwitchReplyDefaultTypeInternal;
extern RearLeftDoorLockSwitchReplyDefaultTypeInternal _RearLeftDoorLockSwitchReply_default_instance_;
class RearLeftDoorLockSwitchRequest;
struct RearLeftDoorLockSwitchRequestDefaultTypeInternal;
extern RearLeftDoorLockSwitchRequestDefaultTypeInternal _RearLeftDoorLockSwitchRequest_default_instance_;
class RearLeftDoorReply;
struct RearLeftDoorReplyDefaultTypeInternal;
extern RearLeftDoorReplyDefaultTypeInternal _RearLeftDoorReply_default_instance_;
class RearLeftDoorRequest;
struct RearLeftDoorRequestDefaultTypeInternal;
extern RearLeftDoorRequestDefaultTypeInternal _RearLeftDoorRequest_default_instance_;
class RearLeftPowerWindowsReply;
struct RearLeftPowerWindowsReplyDefaultTypeInternal;
extern RearLeftPowerWindowsReplyDefaultTypeInternal _RearLeftPowerWindowsReply_default_instance_;
class RearLeftPowerWindowsRequest;
struct RearLeftPowerWindowsRequestDefaultTypeInternal;
extern RearLeftPowerWindowsRequestDefaultTypeInternal _RearLeftPowerWindowsRequest_default_instance_;
class RearLeftPowerWindowsSwitchReply;
struct RearLeftPowerWindowsSwitchReplyDefaultTypeInternal;
extern RearLeftPowerWindowsSwitchReplyDefaultTypeInternal _RearLeftPowerWindowsSwitchReply_default_instance_;
class RearLeftPowerWindowsSwitchRequest;
struct RearLeftPowerWindowsSwitchRequestDefaultTypeInternal;
extern RearLeftPowerWindowsSwitchRequestDefaultTypeInternal _RearLeftPowerWindowsSwitchRequest_default_instance_;
class RearLightReply;
struct RearLightReplyDefaultTypeInternal;
extern RearLightReplyDefaultTypeInternal _RearLightReply_default_instance_;
class RearLightRequest;
struct RearLightRequestDefaultTypeInternal;
extern RearLightRequestDefaultTypeInternal _RearLightRequest_default_instance_;
class RearRightBlinkerLightReply;
struct RearRightBlinkerLightReplyDefaultTypeInternal;
extern RearRightBlinkerLightReplyDefaultTypeInternal _RearRightBlinkerLightReply_default_instance_;
class RearRightBlinkerLightRequest;
struct RearRightBlinkerLightRequestDefaultTypeInternal;
extern RearRightBlinkerLightRequestDefaultTypeInternal _RearRightBlinkerLightRequest_default_instance_;
class RearRightDoorLockSwitchReply;
struct RearRightDoorLockSwitchReplyDefaultTypeInternal;
extern RearRightDoorLockSwitchReplyDefaultTypeInternal _RearRightDoorLockSwitchReply_default_instance_;
class RearRightDoorLockSwitchRequest;
struct RearRightDoorLockSwitchRequestDefaultTypeInternal;
extern RearRightDoorLockSwitchRequestDefaultTypeInternal _RearRightDoorLockSwitchRequest_default_instance_;
class RearRightDoorReply;
struct RearRightDoorReplyDefaultTypeInternal;
extern RearRightDoorReplyDefaultTypeInternal _RearRightDoorReply_default_instance_;
class RearRightDoorRequest;
struct RearRightDoorRequestDefaultTypeInternal;
extern RearRightDoorRequestDefaultTypeInternal _RearRightDoorRequest_default_instance_;
class RearRightPowerWindowsReply;
struct RearRightPowerWindowsReplyDefaultTypeInternal;
extern RearRightPowerWindowsReplyDefaultTypeInternal _RearRightPowerWindowsReply_default_instance_;
class RearRightPowerWindowsRequest;
struct RearRightPowerWindowsRequestDefaultTypeInternal;
extern RearRightPowerWindowsRequestDefaultTypeInternal _RearRightPowerWindowsRequest_default_instance_;
class RearRightPowerWindowsSwitchReply;
struct RearRightPowerWindowsSwitchReplyDefaultTypeInternal;
extern RearRightPowerWindowsSwitchReplyDefaultTypeInternal _RearRightPowerWindowsSwitchReply_default_instance_;
class RearRightPowerWindowsSwitchRequest;
struct RearRightPowerWindowsSwitchRequestDefaultTypeInternal;
extern RearRightPowerWindowsSwitchRequestDefaultTypeInternal _RearRightPowerWindowsSwitchRequest_default_instance_;
class RearWiperReply;
struct RearWiperReplyDefaultTypeInternal;
extern RearWiperReplyDefaultTypeInternal _RearWiperReply_default_instance_;
class RearWiperRequest;
struct RearWiperRequestDefaultTypeInternal;
extern RearWiperRequestDefaultTypeInternal _RearWiperRequest_default_instance_;
class ReverseLightReply;
struct ReverseLightReplyDefaultTypeInternal;
extern ReverseLightReplyDefaultTypeInternal _ReverseLightReply_default_instance_;
class ReverseLightRequest;
struct ReverseLightRequestDefaultTypeInternal;
extern ReverseLightRequestDefaultTypeInternal _ReverseLightRequest_default_instance_;
class RightSideMirrorReply;
struct RightSideMirrorReplyDefaultTypeInternal;
extern RightSideMirrorReplyDefaultTypeInternal _RightSideMirrorReply_default_instance_;
class RightSideMirrorRequest;
struct RightSideMirrorRequestDefaultTypeInternal;
extern RightSideMirrorRequestDefaultTypeInternal _RightSideMirrorRequest_default_instance_;
class SideMirrorSwitchReply;
struct SideMirrorSwitchReplyDefaultTypeInternal;
extern SideMirrorSwitchReplyDefaultTypeInternal _SideMirrorSwitchReply_default_instance_;
class SideMirrorSwitchRequest;
struct SideMirrorSwitchRequestDefaultTypeInternal;
extern SideMirrorSwitchRequestDefaultTypeInternal _SideMirrorSwitchRequest_default_instance_;
class SunRoofReply;
struct SunRoofReplyDefaultTypeInternal;
extern SunRoofReplyDefaultTypeInternal _SunRoofReply_default_instance_;
class SunRoofRequest;
struct SunRoofRequestDefaultTypeInternal;
extern SunRoofRequestDefaultTypeInternal _SunRoofRequest_default_instance_;
class TrunkReply;
struct TrunkReplyDefaultTypeInternal;
extern TrunkReplyDefaultTypeInternal _TrunkReply_default_instance_;
class TrunkRequest;
struct TrunkRequestDefaultTypeInternal;
extern TrunkRequestDefaultTypeInternal _TrunkRequest_default_instance_;
}  // namespace UnityAPI
PROTOBUF_NAMESPACE_OPEN
template<> ::UnityAPI::AirCondTemperatureReply* Arena::CreateMaybeMessage<::UnityAPI::AirCondTemperatureReply>(Arena*);
template<> ::UnityAPI::AirCondTemperatureRequest* Arena::CreateMaybeMessage<::UnityAPI::AirCondTemperatureRequest>(Arena*);
template<> ::UnityAPI::AirConditionerFanSpeedReply* Arena::CreateMaybeMessage<::UnityAPI::AirConditionerFanSpeedReply>(Arena*);
template<> ::UnityAPI::AirConditionerFanSpeedRequest* Arena::CreateMaybeMessage<::UnityAPI::AirConditionerFanSpeedRequest>(Arena*);
template<> ::UnityAPI::AirConditionerReply* Arena::CreateMaybeMessage<::UnityAPI::AirConditionerReply>(Arena*);
template<> ::UnityAPI::AirConditionerRequest* Arena::CreateMaybeMessage<::UnityAPI::AirConditionerRequest>(Arena*);
template<> ::UnityAPI::BrakeLightReply* Arena::CreateMaybeMessage<::UnityAPI::BrakeLightReply>(Arena*);
template<> ::UnityAPI::BrakeLightRequest* Arena::CreateMaybeMessage<::UnityAPI::BrakeLightRequest>(Arena*);
template<> ::UnityAPI::BuzzerReply* Arena::CreateMaybeMessage<::UnityAPI::BuzzerReply>(Arena*);
template<> ::UnityAPI::BuzzerRequest* Arena::CreateMaybeMessage<::UnityAPI::BuzzerRequest>(Arena*);
template<> ::UnityAPI::CentralDoorLockSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::CentralDoorLockSwitchReply>(Arena*);
template<> ::UnityAPI::CentralDoorLockSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::CentralDoorLockSwitchRequest>(Arena*);
template<> ::UnityAPI::ClearanceLampReply* Arena::CreateMaybeMessage<::UnityAPI::ClearanceLampReply>(Arena*);
template<> ::UnityAPI::ClearanceLampRequest* Arena::CreateMaybeMessage<::UnityAPI::ClearanceLampRequest>(Arena*);
template<> ::UnityAPI::FrontDaytimeLightReply* Arena::CreateMaybeMessage<::UnityAPI::FrontDaytimeLightReply>(Arena*);
template<> ::UnityAPI::FrontDaytimeLightRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontDaytimeLightRequest>(Arena*);
template<> ::UnityAPI::FrontFogLightReply* Arena::CreateMaybeMessage<::UnityAPI::FrontFogLightReply>(Arena*);
template<> ::UnityAPI::FrontFogLightRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontFogLightRequest>(Arena*);
template<> ::UnityAPI::FrontHighLightReply* Arena::CreateMaybeMessage<::UnityAPI::FrontHighLightReply>(Arena*);
template<> ::UnityAPI::FrontHighLightRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontHighLightRequest>(Arena*);
template<> ::UnityAPI::FrontLeftBlinkerLightReply* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftBlinkerLightReply>(Arena*);
template<> ::UnityAPI::FrontLeftBlinkerLightRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftBlinkerLightRequest>(Arena*);
template<> ::UnityAPI::FrontLeftDoorLockSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftDoorLockSwitchReply>(Arena*);
template<> ::UnityAPI::FrontLeftDoorLockSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftDoorLockSwitchRequest>(Arena*);
template<> ::UnityAPI::FrontLeftDoorReply* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftDoorReply>(Arena*);
template<> ::UnityAPI::FrontLeftDoorRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftDoorRequest>(Arena*);
template<> ::UnityAPI::FrontLeftPowerWindowsReply* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftPowerWindowsReply>(Arena*);
template<> ::UnityAPI::FrontLeftPowerWindowsRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftPowerWindowsRequest>(Arena*);
template<> ::UnityAPI::FrontLeftPowerWindowsSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftPowerWindowsSwitchReply>(Arena*);
template<> ::UnityAPI::FrontLeftPowerWindowsSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontLeftPowerWindowsSwitchRequest>(Arena*);
template<> ::UnityAPI::FrontLowLightReply* Arena::CreateMaybeMessage<::UnityAPI::FrontLowLightReply>(Arena*);
template<> ::UnityAPI::FrontLowLightRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontLowLightRequest>(Arena*);
template<> ::UnityAPI::FrontRightBlinkerLightReply* Arena::CreateMaybeMessage<::UnityAPI::FrontRightBlinkerLightReply>(Arena*);
template<> ::UnityAPI::FrontRightBlinkerLightRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontRightBlinkerLightRequest>(Arena*);
template<> ::UnityAPI::FrontRightDoorLockSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::FrontRightDoorLockSwitchReply>(Arena*);
template<> ::UnityAPI::FrontRightDoorLockSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontRightDoorLockSwitchRequest>(Arena*);
template<> ::UnityAPI::FrontRightDoorReply* Arena::CreateMaybeMessage<::UnityAPI::FrontRightDoorReply>(Arena*);
template<> ::UnityAPI::FrontRightDoorRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontRightDoorRequest>(Arena*);
template<> ::UnityAPI::FrontRightPowerWindowsReply* Arena::CreateMaybeMessage<::UnityAPI::FrontRightPowerWindowsReply>(Arena*);
template<> ::UnityAPI::FrontRightPowerWindowsRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontRightPowerWindowsRequest>(Arena*);
template<> ::UnityAPI::FrontRightPowerWindowsSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::FrontRightPowerWindowsSwitchReply>(Arena*);
template<> ::UnityAPI::FrontRightPowerWindowsSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontRightPowerWindowsSwitchRequest>(Arena*);
template<> ::UnityAPI::FrontWiperReply* Arena::CreateMaybeMessage<::UnityAPI::FrontWiperReply>(Arena*);
template<> ::UnityAPI::FrontWiperRequest* Arena::CreateMaybeMessage<::UnityAPI::FrontWiperRequest>(Arena*);
template<> ::UnityAPI::HandlingReply* Arena::CreateMaybeMessage<::UnityAPI::HandlingReply>(Arena*);
template<> ::UnityAPI::HandlingRequest* Arena::CreateMaybeMessage<::UnityAPI::HandlingRequest>(Arena*);
template<> ::UnityAPI::HornReply* Arena::CreateMaybeMessage<::UnityAPI::HornReply>(Arena*);
template<> ::UnityAPI::HornRequest* Arena::CreateMaybeMessage<::UnityAPI::HornRequest>(Arena*);
template<> ::UnityAPI::InstrumentLightReply* Arena::CreateMaybeMessage<::UnityAPI::InstrumentLightReply>(Arena*);
template<> ::UnityAPI::InstrumentLightRequest* Arena::CreateMaybeMessage<::UnityAPI::InstrumentLightRequest>(Arena*);
template<> ::UnityAPI::LeftSideMirrorReply* Arena::CreateMaybeMessage<::UnityAPI::LeftSideMirrorReply>(Arena*);
template<> ::UnityAPI::LeftSideMirrorRequest* Arena::CreateMaybeMessage<::UnityAPI::LeftSideMirrorRequest>(Arena*);
template<> ::UnityAPI::PassgenerRoomDomeLightReply* Arena::CreateMaybeMessage<::UnityAPI::PassgenerRoomDomeLightReply>(Arena*);
template<> ::UnityAPI::PassgenerRoomDomeLightRequest* Arena::CreateMaybeMessage<::UnityAPI::PassgenerRoomDomeLightRequest>(Arena*);
template<> ::UnityAPI::ReadingLightDriverSideReply* Arena::CreateMaybeMessage<::UnityAPI::ReadingLightDriverSideReply>(Arena*);
template<> ::UnityAPI::ReadingLightDriverSideRequest* Arena::CreateMaybeMessage<::UnityAPI::ReadingLightDriverSideRequest>(Arena*);
template<> ::UnityAPI::ReadingLightPassgenerSideReply* Arena::CreateMaybeMessage<::UnityAPI::ReadingLightPassgenerSideReply>(Arena*);
template<> ::UnityAPI::ReadingLightPassgenerSideRequest* Arena::CreateMaybeMessage<::UnityAPI::ReadingLightPassgenerSideRequest>(Arena*);
template<> ::UnityAPI::RearFogLightReply* Arena::CreateMaybeMessage<::UnityAPI::RearFogLightReply>(Arena*);
template<> ::UnityAPI::RearFogLightRequest* Arena::CreateMaybeMessage<::UnityAPI::RearFogLightRequest>(Arena*);
template<> ::UnityAPI::RearLeftBlinkerLightReply* Arena::CreateMaybeMessage<::UnityAPI::RearLeftBlinkerLightReply>(Arena*);
template<> ::UnityAPI::RearLeftBlinkerLightRequest* Arena::CreateMaybeMessage<::UnityAPI::RearLeftBlinkerLightRequest>(Arena*);
template<> ::UnityAPI::RearLeftDoorLockSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::RearLeftDoorLockSwitchReply>(Arena*);
template<> ::UnityAPI::RearLeftDoorLockSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::RearLeftDoorLockSwitchRequest>(Arena*);
template<> ::UnityAPI::RearLeftDoorReply* Arena::CreateMaybeMessage<::UnityAPI::RearLeftDoorReply>(Arena*);
template<> ::UnityAPI::RearLeftDoorRequest* Arena::CreateMaybeMessage<::UnityAPI::RearLeftDoorRequest>(Arena*);
template<> ::UnityAPI::RearLeftPowerWindowsReply* Arena::CreateMaybeMessage<::UnityAPI::RearLeftPowerWindowsReply>(Arena*);
template<> ::UnityAPI::RearLeftPowerWindowsRequest* Arena::CreateMaybeMessage<::UnityAPI::RearLeftPowerWindowsRequest>(Arena*);
template<> ::UnityAPI::RearLeftPowerWindowsSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::RearLeftPowerWindowsSwitchReply>(Arena*);
template<> ::UnityAPI::RearLeftPowerWindowsSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::RearLeftPowerWindowsSwitchRequest>(Arena*);
template<> ::UnityAPI::RearLightReply* Arena::CreateMaybeMessage<::UnityAPI::RearLightReply>(Arena*);
template<> ::UnityAPI::RearLightRequest* Arena::CreateMaybeMessage<::UnityAPI::RearLightRequest>(Arena*);
template<> ::UnityAPI::RearRightBlinkerLightReply* Arena::CreateMaybeMessage<::UnityAPI::RearRightBlinkerLightReply>(Arena*);
template<> ::UnityAPI::RearRightBlinkerLightRequest* Arena::CreateMaybeMessage<::UnityAPI::RearRightBlinkerLightRequest>(Arena*);
template<> ::UnityAPI::RearRightDoorLockSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::RearRightDoorLockSwitchReply>(Arena*);
template<> ::UnityAPI::RearRightDoorLockSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::RearRightDoorLockSwitchRequest>(Arena*);
template<> ::UnityAPI::RearRightDoorReply* Arena::CreateMaybeMessage<::UnityAPI::RearRightDoorReply>(Arena*);
template<> ::UnityAPI::RearRightDoorRequest* Arena::CreateMaybeMessage<::UnityAPI::RearRightDoorRequest>(Arena*);
template<> ::UnityAPI::RearRightPowerWindowsReply* Arena::CreateMaybeMessage<::UnityAPI::RearRightPowerWindowsReply>(Arena*);
template<> ::UnityAPI::RearRightPowerWindowsRequest* Arena::CreateMaybeMessage<::UnityAPI::RearRightPowerWindowsRequest>(Arena*);
template<> ::UnityAPI::RearRightPowerWindowsSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::RearRightPowerWindowsSwitchReply>(Arena*);
template<> ::UnityAPI::RearRightPowerWindowsSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::RearRightPowerWindowsSwitchRequest>(Arena*);
template<> ::UnityAPI::RearWiperReply* Arena::CreateMaybeMessage<::UnityAPI::RearWiperReply>(Arena*);
template<> ::UnityAPI::RearWiperRequest* Arena::CreateMaybeMessage<::UnityAPI::RearWiperRequest>(Arena*);
template<> ::UnityAPI::ReverseLightReply* Arena::CreateMaybeMessage<::UnityAPI::ReverseLightReply>(Arena*);
template<> ::UnityAPI::ReverseLightRequest* Arena::CreateMaybeMessage<::UnityAPI::ReverseLightRequest>(Arena*);
template<> ::UnityAPI::RightSideMirrorReply* Arena::CreateMaybeMessage<::UnityAPI::RightSideMirrorReply>(Arena*);
template<> ::UnityAPI::RightSideMirrorRequest* Arena::CreateMaybeMessage<::UnityAPI::RightSideMirrorRequest>(Arena*);
template<> ::UnityAPI::SideMirrorSwitchReply* Arena::CreateMaybeMessage<::UnityAPI::SideMirrorSwitchReply>(Arena*);
template<> ::UnityAPI::SideMirrorSwitchRequest* Arena::CreateMaybeMessage<::UnityAPI::SideMirrorSwitchRequest>(Arena*);
template<> ::UnityAPI::SunRoofReply* Arena::CreateMaybeMessage<::UnityAPI::SunRoofReply>(Arena*);
template<> ::UnityAPI::SunRoofRequest* Arena::CreateMaybeMessage<::UnityAPI::SunRoofRequest>(Arena*);
template<> ::UnityAPI::TrunkReply* Arena::CreateMaybeMessage<::UnityAPI::TrunkReply>(Arena*);
template<> ::UnityAPI::TrunkRequest* Arena::CreateMaybeMessage<::UnityAPI::TrunkRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UnityAPI {

// ===================================================================

class FrontLowLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLowLightRequest) */ {
 public:
  inline FrontLowLightRequest() : FrontLowLightRequest(nullptr) {}
  virtual ~FrontLowLightRequest();
  explicit constexpr FrontLowLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLowLightRequest(const FrontLowLightRequest& from);
  FrontLowLightRequest(FrontLowLightRequest&& from) noexcept
    : FrontLowLightRequest() {
    *this = ::std::move(from);
  }

  inline FrontLowLightRequest& operator=(const FrontLowLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLowLightRequest& operator=(FrontLowLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLowLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLowLightRequest* internal_default_instance() {
    return reinterpret_cast<const FrontLowLightRequest*>(
               &_FrontLowLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrontLowLightRequest& a, FrontLowLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLowLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLowLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLowLightRequest* New() const final {
    return CreateMaybeMessage<FrontLowLightRequest>(nullptr);
  }

  FrontLowLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLowLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLowLightRequest& from);
  void MergeFrom(const FrontLowLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLowLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLowLightRequest";
  }
  protected:
  explicit FrontLowLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLowLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontHighLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontHighLightRequest) */ {
 public:
  inline FrontHighLightRequest() : FrontHighLightRequest(nullptr) {}
  virtual ~FrontHighLightRequest();
  explicit constexpr FrontHighLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontHighLightRequest(const FrontHighLightRequest& from);
  FrontHighLightRequest(FrontHighLightRequest&& from) noexcept
    : FrontHighLightRequest() {
    *this = ::std::move(from);
  }

  inline FrontHighLightRequest& operator=(const FrontHighLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontHighLightRequest& operator=(FrontHighLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontHighLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontHighLightRequest* internal_default_instance() {
    return reinterpret_cast<const FrontHighLightRequest*>(
               &_FrontHighLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrontHighLightRequest& a, FrontHighLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontHighLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontHighLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontHighLightRequest* New() const final {
    return CreateMaybeMessage<FrontHighLightRequest>(nullptr);
  }

  FrontHighLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontHighLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontHighLightRequest& from);
  void MergeFrom(const FrontHighLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontHighLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontHighLightRequest";
  }
  protected:
  explicit FrontHighLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontHighLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLightRequest) */ {
 public:
  inline RearLightRequest() : RearLightRequest(nullptr) {}
  virtual ~RearLightRequest();
  explicit constexpr RearLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLightRequest(const RearLightRequest& from);
  RearLightRequest(RearLightRequest&& from) noexcept
    : RearLightRequest() {
    *this = ::std::move(from);
  }

  inline RearLightRequest& operator=(const RearLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLightRequest& operator=(RearLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLightRequest* internal_default_instance() {
    return reinterpret_cast<const RearLightRequest*>(
               &_RearLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RearLightRequest& a, RearLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLightRequest* New() const final {
    return CreateMaybeMessage<RearLightRequest>(nullptr);
  }

  RearLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLightRequest& from);
  void MergeFrom(const RearLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLightRequest";
  }
  protected:
  explicit RearLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontDaytimeLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontDaytimeLightRequest) */ {
 public:
  inline FrontDaytimeLightRequest() : FrontDaytimeLightRequest(nullptr) {}
  virtual ~FrontDaytimeLightRequest();
  explicit constexpr FrontDaytimeLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontDaytimeLightRequest(const FrontDaytimeLightRequest& from);
  FrontDaytimeLightRequest(FrontDaytimeLightRequest&& from) noexcept
    : FrontDaytimeLightRequest() {
    *this = ::std::move(from);
  }

  inline FrontDaytimeLightRequest& operator=(const FrontDaytimeLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontDaytimeLightRequest& operator=(FrontDaytimeLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontDaytimeLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontDaytimeLightRequest* internal_default_instance() {
    return reinterpret_cast<const FrontDaytimeLightRequest*>(
               &_FrontDaytimeLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrontDaytimeLightRequest& a, FrontDaytimeLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontDaytimeLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontDaytimeLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontDaytimeLightRequest* New() const final {
    return CreateMaybeMessage<FrontDaytimeLightRequest>(nullptr);
  }

  FrontDaytimeLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontDaytimeLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontDaytimeLightRequest& from);
  void MergeFrom(const FrontDaytimeLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontDaytimeLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontDaytimeLightRequest";
  }
  protected:
  explicit FrontDaytimeLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontDaytimeLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class BrakeLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.BrakeLightRequest) */ {
 public:
  inline BrakeLightRequest() : BrakeLightRequest(nullptr) {}
  virtual ~BrakeLightRequest();
  explicit constexpr BrakeLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrakeLightRequest(const BrakeLightRequest& from);
  BrakeLightRequest(BrakeLightRequest&& from) noexcept
    : BrakeLightRequest() {
    *this = ::std::move(from);
  }

  inline BrakeLightRequest& operator=(const BrakeLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrakeLightRequest& operator=(BrakeLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BrakeLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrakeLightRequest* internal_default_instance() {
    return reinterpret_cast<const BrakeLightRequest*>(
               &_BrakeLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BrakeLightRequest& a, BrakeLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BrakeLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrakeLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BrakeLightRequest* New() const final {
    return CreateMaybeMessage<BrakeLightRequest>(nullptr);
  }

  BrakeLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrakeLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BrakeLightRequest& from);
  void MergeFrom(const BrakeLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakeLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.BrakeLightRequest";
  }
  protected:
  explicit BrakeLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.BrakeLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class ReverseLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.ReverseLightRequest) */ {
 public:
  inline ReverseLightRequest() : ReverseLightRequest(nullptr) {}
  virtual ~ReverseLightRequest();
  explicit constexpr ReverseLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReverseLightRequest(const ReverseLightRequest& from);
  ReverseLightRequest(ReverseLightRequest&& from) noexcept
    : ReverseLightRequest() {
    *this = ::std::move(from);
  }

  inline ReverseLightRequest& operator=(const ReverseLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReverseLightRequest& operator=(ReverseLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReverseLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReverseLightRequest* internal_default_instance() {
    return reinterpret_cast<const ReverseLightRequest*>(
               &_ReverseLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReverseLightRequest& a, ReverseLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReverseLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReverseLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReverseLightRequest* New() const final {
    return CreateMaybeMessage<ReverseLightRequest>(nullptr);
  }

  ReverseLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReverseLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReverseLightRequest& from);
  void MergeFrom(const ReverseLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReverseLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.ReverseLightRequest";
  }
  protected:
  explicit ReverseLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.ReverseLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontFogLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontFogLightRequest) */ {
 public:
  inline FrontFogLightRequest() : FrontFogLightRequest(nullptr) {}
  virtual ~FrontFogLightRequest();
  explicit constexpr FrontFogLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontFogLightRequest(const FrontFogLightRequest& from);
  FrontFogLightRequest(FrontFogLightRequest&& from) noexcept
    : FrontFogLightRequest() {
    *this = ::std::move(from);
  }

  inline FrontFogLightRequest& operator=(const FrontFogLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontFogLightRequest& operator=(FrontFogLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontFogLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontFogLightRequest* internal_default_instance() {
    return reinterpret_cast<const FrontFogLightRequest*>(
               &_FrontFogLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FrontFogLightRequest& a, FrontFogLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontFogLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontFogLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontFogLightRequest* New() const final {
    return CreateMaybeMessage<FrontFogLightRequest>(nullptr);
  }

  FrontFogLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontFogLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontFogLightRequest& from);
  void MergeFrom(const FrontFogLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontFogLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontFogLightRequest";
  }
  protected:
  explicit FrontFogLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontFogLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearFogLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearFogLightRequest) */ {
 public:
  inline RearFogLightRequest() : RearFogLightRequest(nullptr) {}
  virtual ~RearFogLightRequest();
  explicit constexpr RearFogLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearFogLightRequest(const RearFogLightRequest& from);
  RearFogLightRequest(RearFogLightRequest&& from) noexcept
    : RearFogLightRequest() {
    *this = ::std::move(from);
  }

  inline RearFogLightRequest& operator=(const RearFogLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearFogLightRequest& operator=(RearFogLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearFogLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearFogLightRequest* internal_default_instance() {
    return reinterpret_cast<const RearFogLightRequest*>(
               &_RearFogLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RearFogLightRequest& a, RearFogLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearFogLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearFogLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearFogLightRequest* New() const final {
    return CreateMaybeMessage<RearFogLightRequest>(nullptr);
  }

  RearFogLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearFogLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearFogLightRequest& from);
  void MergeFrom(const RearFogLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearFogLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearFogLightRequest";
  }
  protected:
  explicit RearFogLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearFogLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class ClearanceLampRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.ClearanceLampRequest) */ {
 public:
  inline ClearanceLampRequest() : ClearanceLampRequest(nullptr) {}
  virtual ~ClearanceLampRequest();
  explicit constexpr ClearanceLampRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearanceLampRequest(const ClearanceLampRequest& from);
  ClearanceLampRequest(ClearanceLampRequest&& from) noexcept
    : ClearanceLampRequest() {
    *this = ::std::move(from);
  }

  inline ClearanceLampRequest& operator=(const ClearanceLampRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearanceLampRequest& operator=(ClearanceLampRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearanceLampRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearanceLampRequest* internal_default_instance() {
    return reinterpret_cast<const ClearanceLampRequest*>(
               &_ClearanceLampRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClearanceLampRequest& a, ClearanceLampRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearanceLampRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearanceLampRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearanceLampRequest* New() const final {
    return CreateMaybeMessage<ClearanceLampRequest>(nullptr);
  }

  ClearanceLampRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearanceLampRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearanceLampRequest& from);
  void MergeFrom(const ClearanceLampRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearanceLampRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.ClearanceLampRequest";
  }
  protected:
  explicit ClearanceLampRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.ClearanceLampRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftBlinkerLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftBlinkerLightRequest) */ {
 public:
  inline FrontLeftBlinkerLightRequest() : FrontLeftBlinkerLightRequest(nullptr) {}
  virtual ~FrontLeftBlinkerLightRequest();
  explicit constexpr FrontLeftBlinkerLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftBlinkerLightRequest(const FrontLeftBlinkerLightRequest& from);
  FrontLeftBlinkerLightRequest(FrontLeftBlinkerLightRequest&& from) noexcept
    : FrontLeftBlinkerLightRequest() {
    *this = ::std::move(from);
  }

  inline FrontLeftBlinkerLightRequest& operator=(const FrontLeftBlinkerLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftBlinkerLightRequest& operator=(FrontLeftBlinkerLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftBlinkerLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftBlinkerLightRequest* internal_default_instance() {
    return reinterpret_cast<const FrontLeftBlinkerLightRequest*>(
               &_FrontLeftBlinkerLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FrontLeftBlinkerLightRequest& a, FrontLeftBlinkerLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftBlinkerLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftBlinkerLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftBlinkerLightRequest* New() const final {
    return CreateMaybeMessage<FrontLeftBlinkerLightRequest>(nullptr);
  }

  FrontLeftBlinkerLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftBlinkerLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftBlinkerLightRequest& from);
  void MergeFrom(const FrontLeftBlinkerLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftBlinkerLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftBlinkerLightRequest";
  }
  protected:
  explicit FrontLeftBlinkerLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftBlinkerLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightBlinkerLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightBlinkerLightRequest) */ {
 public:
  inline FrontRightBlinkerLightRequest() : FrontRightBlinkerLightRequest(nullptr) {}
  virtual ~FrontRightBlinkerLightRequest();
  explicit constexpr FrontRightBlinkerLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightBlinkerLightRequest(const FrontRightBlinkerLightRequest& from);
  FrontRightBlinkerLightRequest(FrontRightBlinkerLightRequest&& from) noexcept
    : FrontRightBlinkerLightRequest() {
    *this = ::std::move(from);
  }

  inline FrontRightBlinkerLightRequest& operator=(const FrontRightBlinkerLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightBlinkerLightRequest& operator=(FrontRightBlinkerLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightBlinkerLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightBlinkerLightRequest* internal_default_instance() {
    return reinterpret_cast<const FrontRightBlinkerLightRequest*>(
               &_FrontRightBlinkerLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FrontRightBlinkerLightRequest& a, FrontRightBlinkerLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightBlinkerLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightBlinkerLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightBlinkerLightRequest* New() const final {
    return CreateMaybeMessage<FrontRightBlinkerLightRequest>(nullptr);
  }

  FrontRightBlinkerLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightBlinkerLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightBlinkerLightRequest& from);
  void MergeFrom(const FrontRightBlinkerLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightBlinkerLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightBlinkerLightRequest";
  }
  protected:
  explicit FrontRightBlinkerLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightBlinkerLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftBlinkerLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftBlinkerLightRequest) */ {
 public:
  inline RearLeftBlinkerLightRequest() : RearLeftBlinkerLightRequest(nullptr) {}
  virtual ~RearLeftBlinkerLightRequest();
  explicit constexpr RearLeftBlinkerLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftBlinkerLightRequest(const RearLeftBlinkerLightRequest& from);
  RearLeftBlinkerLightRequest(RearLeftBlinkerLightRequest&& from) noexcept
    : RearLeftBlinkerLightRequest() {
    *this = ::std::move(from);
  }

  inline RearLeftBlinkerLightRequest& operator=(const RearLeftBlinkerLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftBlinkerLightRequest& operator=(RearLeftBlinkerLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftBlinkerLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftBlinkerLightRequest* internal_default_instance() {
    return reinterpret_cast<const RearLeftBlinkerLightRequest*>(
               &_RearLeftBlinkerLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RearLeftBlinkerLightRequest& a, RearLeftBlinkerLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftBlinkerLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftBlinkerLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftBlinkerLightRequest* New() const final {
    return CreateMaybeMessage<RearLeftBlinkerLightRequest>(nullptr);
  }

  RearLeftBlinkerLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftBlinkerLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftBlinkerLightRequest& from);
  void MergeFrom(const RearLeftBlinkerLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftBlinkerLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftBlinkerLightRequest";
  }
  protected:
  explicit RearLeftBlinkerLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftBlinkerLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightBlinkerLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightBlinkerLightRequest) */ {
 public:
  inline RearRightBlinkerLightRequest() : RearRightBlinkerLightRequest(nullptr) {}
  virtual ~RearRightBlinkerLightRequest();
  explicit constexpr RearRightBlinkerLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightBlinkerLightRequest(const RearRightBlinkerLightRequest& from);
  RearRightBlinkerLightRequest(RearRightBlinkerLightRequest&& from) noexcept
    : RearRightBlinkerLightRequest() {
    *this = ::std::move(from);
  }

  inline RearRightBlinkerLightRequest& operator=(const RearRightBlinkerLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightBlinkerLightRequest& operator=(RearRightBlinkerLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightBlinkerLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightBlinkerLightRequest* internal_default_instance() {
    return reinterpret_cast<const RearRightBlinkerLightRequest*>(
               &_RearRightBlinkerLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RearRightBlinkerLightRequest& a, RearRightBlinkerLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightBlinkerLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightBlinkerLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightBlinkerLightRequest* New() const final {
    return CreateMaybeMessage<RearRightBlinkerLightRequest>(nullptr);
  }

  RearRightBlinkerLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightBlinkerLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightBlinkerLightRequest& from);
  void MergeFrom(const RearRightBlinkerLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightBlinkerLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightBlinkerLightRequest";
  }
  protected:
  explicit RearRightBlinkerLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightBlinkerLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontWiperRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontWiperRequest) */ {
 public:
  inline FrontWiperRequest() : FrontWiperRequest(nullptr) {}
  virtual ~FrontWiperRequest();
  explicit constexpr FrontWiperRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontWiperRequest(const FrontWiperRequest& from);
  FrontWiperRequest(FrontWiperRequest&& from) noexcept
    : FrontWiperRequest() {
    *this = ::std::move(from);
  }

  inline FrontWiperRequest& operator=(const FrontWiperRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontWiperRequest& operator=(FrontWiperRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontWiperRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontWiperRequest* internal_default_instance() {
    return reinterpret_cast<const FrontWiperRequest*>(
               &_FrontWiperRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FrontWiperRequest& a, FrontWiperRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontWiperRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontWiperRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontWiperRequest* New() const final {
    return CreateMaybeMessage<FrontWiperRequest>(nullptr);
  }

  FrontWiperRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontWiperRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontWiperRequest& from);
  void MergeFrom(const FrontWiperRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontWiperRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontWiperRequest";
  }
  protected:
  explicit FrontWiperRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontWiperRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearWiperRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearWiperRequest) */ {
 public:
  inline RearWiperRequest() : RearWiperRequest(nullptr) {}
  virtual ~RearWiperRequest();
  explicit constexpr RearWiperRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearWiperRequest(const RearWiperRequest& from);
  RearWiperRequest(RearWiperRequest&& from) noexcept
    : RearWiperRequest() {
    *this = ::std::move(from);
  }

  inline RearWiperRequest& operator=(const RearWiperRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearWiperRequest& operator=(RearWiperRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearWiperRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearWiperRequest* internal_default_instance() {
    return reinterpret_cast<const RearWiperRequest*>(
               &_RearWiperRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RearWiperRequest& a, RearWiperRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearWiperRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearWiperRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearWiperRequest* New() const final {
    return CreateMaybeMessage<RearWiperRequest>(nullptr);
  }

  RearWiperRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearWiperRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearWiperRequest& from);
  void MergeFrom(const RearWiperRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearWiperRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearWiperRequest";
  }
  protected:
  explicit RearWiperRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearWiperRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class LeftSideMirrorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.LeftSideMirrorRequest) */ {
 public:
  inline LeftSideMirrorRequest() : LeftSideMirrorRequest(nullptr) {}
  virtual ~LeftSideMirrorRequest();
  explicit constexpr LeftSideMirrorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeftSideMirrorRequest(const LeftSideMirrorRequest& from);
  LeftSideMirrorRequest(LeftSideMirrorRequest&& from) noexcept
    : LeftSideMirrorRequest() {
    *this = ::std::move(from);
  }

  inline LeftSideMirrorRequest& operator=(const LeftSideMirrorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeftSideMirrorRequest& operator=(LeftSideMirrorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeftSideMirrorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeftSideMirrorRequest* internal_default_instance() {
    return reinterpret_cast<const LeftSideMirrorRequest*>(
               &_LeftSideMirrorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LeftSideMirrorRequest& a, LeftSideMirrorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeftSideMirrorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeftSideMirrorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeftSideMirrorRequest* New() const final {
    return CreateMaybeMessage<LeftSideMirrorRequest>(nullptr);
  }

  LeftSideMirrorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeftSideMirrorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeftSideMirrorRequest& from);
  void MergeFrom(const LeftSideMirrorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeftSideMirrorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.LeftSideMirrorRequest";
  }
  protected:
  explicit LeftSideMirrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 2,
    kSetModeFieldNumber = 1,
  };
  // double angle = 2;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.LeftSideMirrorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double angle_;
  bool setmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RightSideMirrorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RightSideMirrorRequest) */ {
 public:
  inline RightSideMirrorRequest() : RightSideMirrorRequest(nullptr) {}
  virtual ~RightSideMirrorRequest();
  explicit constexpr RightSideMirrorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RightSideMirrorRequest(const RightSideMirrorRequest& from);
  RightSideMirrorRequest(RightSideMirrorRequest&& from) noexcept
    : RightSideMirrorRequest() {
    *this = ::std::move(from);
  }

  inline RightSideMirrorRequest& operator=(const RightSideMirrorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RightSideMirrorRequest& operator=(RightSideMirrorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RightSideMirrorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RightSideMirrorRequest* internal_default_instance() {
    return reinterpret_cast<const RightSideMirrorRequest*>(
               &_RightSideMirrorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RightSideMirrorRequest& a, RightSideMirrorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RightSideMirrorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RightSideMirrorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RightSideMirrorRequest* New() const final {
    return CreateMaybeMessage<RightSideMirrorRequest>(nullptr);
  }

  RightSideMirrorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RightSideMirrorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RightSideMirrorRequest& from);
  void MergeFrom(const RightSideMirrorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RightSideMirrorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RightSideMirrorRequest";
  }
  protected:
  explicit RightSideMirrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 2,
    kSetModeFieldNumber = 1,
  };
  // double angle = 2;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RightSideMirrorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double angle_;
  bool setmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightDoorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightDoorRequest) */ {
 public:
  inline FrontRightDoorRequest() : FrontRightDoorRequest(nullptr) {}
  virtual ~FrontRightDoorRequest();
  explicit constexpr FrontRightDoorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightDoorRequest(const FrontRightDoorRequest& from);
  FrontRightDoorRequest(FrontRightDoorRequest&& from) noexcept
    : FrontRightDoorRequest() {
    *this = ::std::move(from);
  }

  inline FrontRightDoorRequest& operator=(const FrontRightDoorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightDoorRequest& operator=(FrontRightDoorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightDoorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightDoorRequest* internal_default_instance() {
    return reinterpret_cast<const FrontRightDoorRequest*>(
               &_FrontRightDoorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FrontRightDoorRequest& a, FrontRightDoorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightDoorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightDoorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightDoorRequest* New() const final {
    return CreateMaybeMessage<FrontRightDoorRequest>(nullptr);
  }

  FrontRightDoorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightDoorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightDoorRequest& from);
  void MergeFrom(const FrontRightDoorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightDoorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightDoorRequest";
  }
  protected:
  explicit FrontRightDoorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightDoorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftDoorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftDoorRequest) */ {
 public:
  inline FrontLeftDoorRequest() : FrontLeftDoorRequest(nullptr) {}
  virtual ~FrontLeftDoorRequest();
  explicit constexpr FrontLeftDoorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftDoorRequest(const FrontLeftDoorRequest& from);
  FrontLeftDoorRequest(FrontLeftDoorRequest&& from) noexcept
    : FrontLeftDoorRequest() {
    *this = ::std::move(from);
  }

  inline FrontLeftDoorRequest& operator=(const FrontLeftDoorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftDoorRequest& operator=(FrontLeftDoorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftDoorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftDoorRequest* internal_default_instance() {
    return reinterpret_cast<const FrontLeftDoorRequest*>(
               &_FrontLeftDoorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FrontLeftDoorRequest& a, FrontLeftDoorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftDoorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftDoorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftDoorRequest* New() const final {
    return CreateMaybeMessage<FrontLeftDoorRequest>(nullptr);
  }

  FrontLeftDoorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftDoorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftDoorRequest& from);
  void MergeFrom(const FrontLeftDoorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftDoorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftDoorRequest";
  }
  protected:
  explicit FrontLeftDoorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftDoorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightDoorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightDoorRequest) */ {
 public:
  inline RearRightDoorRequest() : RearRightDoorRequest(nullptr) {}
  virtual ~RearRightDoorRequest();
  explicit constexpr RearRightDoorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightDoorRequest(const RearRightDoorRequest& from);
  RearRightDoorRequest(RearRightDoorRequest&& from) noexcept
    : RearRightDoorRequest() {
    *this = ::std::move(from);
  }

  inline RearRightDoorRequest& operator=(const RearRightDoorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightDoorRequest& operator=(RearRightDoorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightDoorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightDoorRequest* internal_default_instance() {
    return reinterpret_cast<const RearRightDoorRequest*>(
               &_RearRightDoorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RearRightDoorRequest& a, RearRightDoorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightDoorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightDoorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightDoorRequest* New() const final {
    return CreateMaybeMessage<RearRightDoorRequest>(nullptr);
  }

  RearRightDoorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightDoorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightDoorRequest& from);
  void MergeFrom(const RearRightDoorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightDoorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightDoorRequest";
  }
  protected:
  explicit RearRightDoorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightDoorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftDoorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftDoorRequest) */ {
 public:
  inline RearLeftDoorRequest() : RearLeftDoorRequest(nullptr) {}
  virtual ~RearLeftDoorRequest();
  explicit constexpr RearLeftDoorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftDoorRequest(const RearLeftDoorRequest& from);
  RearLeftDoorRequest(RearLeftDoorRequest&& from) noexcept
    : RearLeftDoorRequest() {
    *this = ::std::move(from);
  }

  inline RearLeftDoorRequest& operator=(const RearLeftDoorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftDoorRequest& operator=(RearLeftDoorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftDoorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftDoorRequest* internal_default_instance() {
    return reinterpret_cast<const RearLeftDoorRequest*>(
               &_RearLeftDoorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RearLeftDoorRequest& a, RearLeftDoorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftDoorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftDoorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftDoorRequest* New() const final {
    return CreateMaybeMessage<RearLeftDoorRequest>(nullptr);
  }

  RearLeftDoorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftDoorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftDoorRequest& from);
  void MergeFrom(const RearLeftDoorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftDoorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftDoorRequest";
  }
  protected:
  explicit RearLeftDoorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftDoorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class TrunkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.TrunkRequest) */ {
 public:
  inline TrunkRequest() : TrunkRequest(nullptr) {}
  virtual ~TrunkRequest();
  explicit constexpr TrunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrunkRequest(const TrunkRequest& from);
  TrunkRequest(TrunkRequest&& from) noexcept
    : TrunkRequest() {
    *this = ::std::move(from);
  }

  inline TrunkRequest& operator=(const TrunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrunkRequest& operator=(TrunkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrunkRequest* internal_default_instance() {
    return reinterpret_cast<const TrunkRequest*>(
               &_TrunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TrunkRequest& a, TrunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrunkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrunkRequest* New() const final {
    return CreateMaybeMessage<TrunkRequest>(nullptr);
  }

  TrunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrunkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrunkRequest& from);
  void MergeFrom(const TrunkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrunkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.TrunkRequest";
  }
  protected:
  explicit TrunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.TrunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class SunRoofRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.SunRoofRequest) */ {
 public:
  inline SunRoofRequest() : SunRoofRequest(nullptr) {}
  virtual ~SunRoofRequest();
  explicit constexpr SunRoofRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SunRoofRequest(const SunRoofRequest& from);
  SunRoofRequest(SunRoofRequest&& from) noexcept
    : SunRoofRequest() {
    *this = ::std::move(from);
  }

  inline SunRoofRequest& operator=(const SunRoofRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SunRoofRequest& operator=(SunRoofRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SunRoofRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SunRoofRequest* internal_default_instance() {
    return reinterpret_cast<const SunRoofRequest*>(
               &_SunRoofRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SunRoofRequest& a, SunRoofRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SunRoofRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SunRoofRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SunRoofRequest* New() const final {
    return CreateMaybeMessage<SunRoofRequest>(nullptr);
  }

  SunRoofRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SunRoofRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SunRoofRequest& from);
  void MergeFrom(const SunRoofRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SunRoofRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.SunRoofRequest";
  }
  protected:
  explicit SunRoofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.SunRoofRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightPowerWindowsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightPowerWindowsRequest) */ {
 public:
  inline FrontRightPowerWindowsRequest() : FrontRightPowerWindowsRequest(nullptr) {}
  virtual ~FrontRightPowerWindowsRequest();
  explicit constexpr FrontRightPowerWindowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightPowerWindowsRequest(const FrontRightPowerWindowsRequest& from);
  FrontRightPowerWindowsRequest(FrontRightPowerWindowsRequest&& from) noexcept
    : FrontRightPowerWindowsRequest() {
    *this = ::std::move(from);
  }

  inline FrontRightPowerWindowsRequest& operator=(const FrontRightPowerWindowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightPowerWindowsRequest& operator=(FrontRightPowerWindowsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightPowerWindowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightPowerWindowsRequest* internal_default_instance() {
    return reinterpret_cast<const FrontRightPowerWindowsRequest*>(
               &_FrontRightPowerWindowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FrontRightPowerWindowsRequest& a, FrontRightPowerWindowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightPowerWindowsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightPowerWindowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightPowerWindowsRequest* New() const final {
    return CreateMaybeMessage<FrontRightPowerWindowsRequest>(nullptr);
  }

  FrontRightPowerWindowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightPowerWindowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightPowerWindowsRequest& from);
  void MergeFrom(const FrontRightPowerWindowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightPowerWindowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightPowerWindowsRequest";
  }
  protected:
  explicit FrontRightPowerWindowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLevelFieldNumber = 2,
    kSetModeFieldNumber = 1,
  };
  // double highLevel = 2;
  void clear_highlevel();
  double highlevel() const;
  void set_highlevel(double value);
  private:
  double _internal_highlevel() const;
  void _internal_set_highlevel(double value);
  public:

  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightPowerWindowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double highlevel_;
  bool setmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftPowerWindowsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftPowerWindowsRequest) */ {
 public:
  inline FrontLeftPowerWindowsRequest() : FrontLeftPowerWindowsRequest(nullptr) {}
  virtual ~FrontLeftPowerWindowsRequest();
  explicit constexpr FrontLeftPowerWindowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftPowerWindowsRequest(const FrontLeftPowerWindowsRequest& from);
  FrontLeftPowerWindowsRequest(FrontLeftPowerWindowsRequest&& from) noexcept
    : FrontLeftPowerWindowsRequest() {
    *this = ::std::move(from);
  }

  inline FrontLeftPowerWindowsRequest& operator=(const FrontLeftPowerWindowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftPowerWindowsRequest& operator=(FrontLeftPowerWindowsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftPowerWindowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftPowerWindowsRequest* internal_default_instance() {
    return reinterpret_cast<const FrontLeftPowerWindowsRequest*>(
               &_FrontLeftPowerWindowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FrontLeftPowerWindowsRequest& a, FrontLeftPowerWindowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftPowerWindowsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftPowerWindowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftPowerWindowsRequest* New() const final {
    return CreateMaybeMessage<FrontLeftPowerWindowsRequest>(nullptr);
  }

  FrontLeftPowerWindowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftPowerWindowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftPowerWindowsRequest& from);
  void MergeFrom(const FrontLeftPowerWindowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftPowerWindowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftPowerWindowsRequest";
  }
  protected:
  explicit FrontLeftPowerWindowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLevelFieldNumber = 2,
    kSetModeFieldNumber = 1,
  };
  // double highLevel = 2;
  void clear_highlevel();
  double highlevel() const;
  void set_highlevel(double value);
  private:
  double _internal_highlevel() const;
  void _internal_set_highlevel(double value);
  public:

  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftPowerWindowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double highlevel_;
  bool setmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightPowerWindowsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightPowerWindowsRequest) */ {
 public:
  inline RearRightPowerWindowsRequest() : RearRightPowerWindowsRequest(nullptr) {}
  virtual ~RearRightPowerWindowsRequest();
  explicit constexpr RearRightPowerWindowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightPowerWindowsRequest(const RearRightPowerWindowsRequest& from);
  RearRightPowerWindowsRequest(RearRightPowerWindowsRequest&& from) noexcept
    : RearRightPowerWindowsRequest() {
    *this = ::std::move(from);
  }

  inline RearRightPowerWindowsRequest& operator=(const RearRightPowerWindowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightPowerWindowsRequest& operator=(RearRightPowerWindowsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightPowerWindowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightPowerWindowsRequest* internal_default_instance() {
    return reinterpret_cast<const RearRightPowerWindowsRequest*>(
               &_RearRightPowerWindowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RearRightPowerWindowsRequest& a, RearRightPowerWindowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightPowerWindowsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightPowerWindowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightPowerWindowsRequest* New() const final {
    return CreateMaybeMessage<RearRightPowerWindowsRequest>(nullptr);
  }

  RearRightPowerWindowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightPowerWindowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightPowerWindowsRequest& from);
  void MergeFrom(const RearRightPowerWindowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightPowerWindowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightPowerWindowsRequest";
  }
  protected:
  explicit RearRightPowerWindowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLevelFieldNumber = 2,
    kSetModeFieldNumber = 1,
  };
  // double highLevel = 2;
  void clear_highlevel();
  double highlevel() const;
  void set_highlevel(double value);
  private:
  double _internal_highlevel() const;
  void _internal_set_highlevel(double value);
  public:

  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightPowerWindowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double highlevel_;
  bool setmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftPowerWindowsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftPowerWindowsRequest) */ {
 public:
  inline RearLeftPowerWindowsRequest() : RearLeftPowerWindowsRequest(nullptr) {}
  virtual ~RearLeftPowerWindowsRequest();
  explicit constexpr RearLeftPowerWindowsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftPowerWindowsRequest(const RearLeftPowerWindowsRequest& from);
  RearLeftPowerWindowsRequest(RearLeftPowerWindowsRequest&& from) noexcept
    : RearLeftPowerWindowsRequest() {
    *this = ::std::move(from);
  }

  inline RearLeftPowerWindowsRequest& operator=(const RearLeftPowerWindowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftPowerWindowsRequest& operator=(RearLeftPowerWindowsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftPowerWindowsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftPowerWindowsRequest* internal_default_instance() {
    return reinterpret_cast<const RearLeftPowerWindowsRequest*>(
               &_RearLeftPowerWindowsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RearLeftPowerWindowsRequest& a, RearLeftPowerWindowsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftPowerWindowsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftPowerWindowsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftPowerWindowsRequest* New() const final {
    return CreateMaybeMessage<RearLeftPowerWindowsRequest>(nullptr);
  }

  RearLeftPowerWindowsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftPowerWindowsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftPowerWindowsRequest& from);
  void MergeFrom(const RearLeftPowerWindowsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftPowerWindowsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftPowerWindowsRequest";
  }
  protected:
  explicit RearLeftPowerWindowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLevelFieldNumber = 2,
    kSetModeFieldNumber = 1,
  };
  // double highLevel = 2;
  void clear_highlevel();
  double highlevel() const;
  void set_highlevel(double value);
  private:
  double _internal_highlevel() const;
  void _internal_set_highlevel(double value);
  public:

  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftPowerWindowsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double highlevel_;
  bool setmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class SideMirrorSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.SideMirrorSwitchRequest) */ {
 public:
  inline SideMirrorSwitchRequest() : SideMirrorSwitchRequest(nullptr) {}
  virtual ~SideMirrorSwitchRequest();
  explicit constexpr SideMirrorSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SideMirrorSwitchRequest(const SideMirrorSwitchRequest& from);
  SideMirrorSwitchRequest(SideMirrorSwitchRequest&& from) noexcept
    : SideMirrorSwitchRequest() {
    *this = ::std::move(from);
  }

  inline SideMirrorSwitchRequest& operator=(const SideMirrorSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideMirrorSwitchRequest& operator=(SideMirrorSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SideMirrorSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SideMirrorSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const SideMirrorSwitchRequest*>(
               &_SideMirrorSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SideMirrorSwitchRequest& a, SideMirrorSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SideMirrorSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideMirrorSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SideMirrorSwitchRequest* New() const final {
    return CreateMaybeMessage<SideMirrorSwitchRequest>(nullptr);
  }

  SideMirrorSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SideMirrorSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SideMirrorSwitchRequest& from);
  void MergeFrom(const SideMirrorSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideMirrorSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.SideMirrorSwitchRequest";
  }
  protected:
  explicit SideMirrorSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.SideMirrorSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class InstrumentLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.InstrumentLightRequest) */ {
 public:
  inline InstrumentLightRequest() : InstrumentLightRequest(nullptr) {}
  virtual ~InstrumentLightRequest();
  explicit constexpr InstrumentLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstrumentLightRequest(const InstrumentLightRequest& from);
  InstrumentLightRequest(InstrumentLightRequest&& from) noexcept
    : InstrumentLightRequest() {
    *this = ::std::move(from);
  }

  inline InstrumentLightRequest& operator=(const InstrumentLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentLightRequest& operator=(InstrumentLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentLightRequest* internal_default_instance() {
    return reinterpret_cast<const InstrumentLightRequest*>(
               &_InstrumentLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(InstrumentLightRequest& a, InstrumentLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentLightRequest* New() const final {
    return CreateMaybeMessage<InstrumentLightRequest>(nullptr);
  }

  InstrumentLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentLightRequest& from);
  void MergeFrom(const InstrumentLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.InstrumentLightRequest";
  }
  protected:
  explicit InstrumentLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.InstrumentLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class PassgenerRoomDomeLightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.PassgenerRoomDomeLightRequest) */ {
 public:
  inline PassgenerRoomDomeLightRequest() : PassgenerRoomDomeLightRequest(nullptr) {}
  virtual ~PassgenerRoomDomeLightRequest();
  explicit constexpr PassgenerRoomDomeLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PassgenerRoomDomeLightRequest(const PassgenerRoomDomeLightRequest& from);
  PassgenerRoomDomeLightRequest(PassgenerRoomDomeLightRequest&& from) noexcept
    : PassgenerRoomDomeLightRequest() {
    *this = ::std::move(from);
  }

  inline PassgenerRoomDomeLightRequest& operator=(const PassgenerRoomDomeLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassgenerRoomDomeLightRequest& operator=(PassgenerRoomDomeLightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PassgenerRoomDomeLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PassgenerRoomDomeLightRequest* internal_default_instance() {
    return reinterpret_cast<const PassgenerRoomDomeLightRequest*>(
               &_PassgenerRoomDomeLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PassgenerRoomDomeLightRequest& a, PassgenerRoomDomeLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PassgenerRoomDomeLightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PassgenerRoomDomeLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PassgenerRoomDomeLightRequest* New() const final {
    return CreateMaybeMessage<PassgenerRoomDomeLightRequest>(nullptr);
  }

  PassgenerRoomDomeLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PassgenerRoomDomeLightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PassgenerRoomDomeLightRequest& from);
  void MergeFrom(const PassgenerRoomDomeLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassgenerRoomDomeLightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.PassgenerRoomDomeLightRequest";
  }
  protected:
  explicit PassgenerRoomDomeLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.PassgenerRoomDomeLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class ReadingLightDriverSideRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.ReadingLightDriverSideRequest) */ {
 public:
  inline ReadingLightDriverSideRequest() : ReadingLightDriverSideRequest(nullptr) {}
  virtual ~ReadingLightDriverSideRequest();
  explicit constexpr ReadingLightDriverSideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadingLightDriverSideRequest(const ReadingLightDriverSideRequest& from);
  ReadingLightDriverSideRequest(ReadingLightDriverSideRequest&& from) noexcept
    : ReadingLightDriverSideRequest() {
    *this = ::std::move(from);
  }

  inline ReadingLightDriverSideRequest& operator=(const ReadingLightDriverSideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingLightDriverSideRequest& operator=(ReadingLightDriverSideRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadingLightDriverSideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadingLightDriverSideRequest* internal_default_instance() {
    return reinterpret_cast<const ReadingLightDriverSideRequest*>(
               &_ReadingLightDriverSideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ReadingLightDriverSideRequest& a, ReadingLightDriverSideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingLightDriverSideRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadingLightDriverSideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingLightDriverSideRequest* New() const final {
    return CreateMaybeMessage<ReadingLightDriverSideRequest>(nullptr);
  }

  ReadingLightDriverSideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingLightDriverSideRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadingLightDriverSideRequest& from);
  void MergeFrom(const ReadingLightDriverSideRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadingLightDriverSideRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.ReadingLightDriverSideRequest";
  }
  protected:
  explicit ReadingLightDriverSideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.ReadingLightDriverSideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class ReadingLightPassgenerSideRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.ReadingLightPassgenerSideRequest) */ {
 public:
  inline ReadingLightPassgenerSideRequest() : ReadingLightPassgenerSideRequest(nullptr) {}
  virtual ~ReadingLightPassgenerSideRequest();
  explicit constexpr ReadingLightPassgenerSideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadingLightPassgenerSideRequest(const ReadingLightPassgenerSideRequest& from);
  ReadingLightPassgenerSideRequest(ReadingLightPassgenerSideRequest&& from) noexcept
    : ReadingLightPassgenerSideRequest() {
    *this = ::std::move(from);
  }

  inline ReadingLightPassgenerSideRequest& operator=(const ReadingLightPassgenerSideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingLightPassgenerSideRequest& operator=(ReadingLightPassgenerSideRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadingLightPassgenerSideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadingLightPassgenerSideRequest* internal_default_instance() {
    return reinterpret_cast<const ReadingLightPassgenerSideRequest*>(
               &_ReadingLightPassgenerSideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ReadingLightPassgenerSideRequest& a, ReadingLightPassgenerSideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingLightPassgenerSideRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadingLightPassgenerSideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingLightPassgenerSideRequest* New() const final {
    return CreateMaybeMessage<ReadingLightPassgenerSideRequest>(nullptr);
  }

  ReadingLightPassgenerSideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingLightPassgenerSideRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadingLightPassgenerSideRequest& from);
  void MergeFrom(const ReadingLightPassgenerSideRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadingLightPassgenerSideRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.ReadingLightPassgenerSideRequest";
  }
  protected:
  explicit ReadingLightPassgenerSideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.ReadingLightPassgenerSideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightPowerWindowsSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightPowerWindowsSwitchRequest) */ {
 public:
  inline FrontRightPowerWindowsSwitchRequest() : FrontRightPowerWindowsSwitchRequest(nullptr) {}
  virtual ~FrontRightPowerWindowsSwitchRequest();
  explicit constexpr FrontRightPowerWindowsSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightPowerWindowsSwitchRequest(const FrontRightPowerWindowsSwitchRequest& from);
  FrontRightPowerWindowsSwitchRequest(FrontRightPowerWindowsSwitchRequest&& from) noexcept
    : FrontRightPowerWindowsSwitchRequest() {
    *this = ::std::move(from);
  }

  inline FrontRightPowerWindowsSwitchRequest& operator=(const FrontRightPowerWindowsSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightPowerWindowsSwitchRequest& operator=(FrontRightPowerWindowsSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightPowerWindowsSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightPowerWindowsSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const FrontRightPowerWindowsSwitchRequest*>(
               &_FrontRightPowerWindowsSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FrontRightPowerWindowsSwitchRequest& a, FrontRightPowerWindowsSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightPowerWindowsSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightPowerWindowsSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightPowerWindowsSwitchRequest* New() const final {
    return CreateMaybeMessage<FrontRightPowerWindowsSwitchRequest>(nullptr);
  }

  FrontRightPowerWindowsSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightPowerWindowsSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightPowerWindowsSwitchRequest& from);
  void MergeFrom(const FrontRightPowerWindowsSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightPowerWindowsSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightPowerWindowsSwitchRequest";
  }
  protected:
  explicit FrontRightPowerWindowsSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightPowerWindowsSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftPowerWindowsSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftPowerWindowsSwitchRequest) */ {
 public:
  inline FrontLeftPowerWindowsSwitchRequest() : FrontLeftPowerWindowsSwitchRequest(nullptr) {}
  virtual ~FrontLeftPowerWindowsSwitchRequest();
  explicit constexpr FrontLeftPowerWindowsSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftPowerWindowsSwitchRequest(const FrontLeftPowerWindowsSwitchRequest& from);
  FrontLeftPowerWindowsSwitchRequest(FrontLeftPowerWindowsSwitchRequest&& from) noexcept
    : FrontLeftPowerWindowsSwitchRequest() {
    *this = ::std::move(from);
  }

  inline FrontLeftPowerWindowsSwitchRequest& operator=(const FrontLeftPowerWindowsSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftPowerWindowsSwitchRequest& operator=(FrontLeftPowerWindowsSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftPowerWindowsSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftPowerWindowsSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const FrontLeftPowerWindowsSwitchRequest*>(
               &_FrontLeftPowerWindowsSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FrontLeftPowerWindowsSwitchRequest& a, FrontLeftPowerWindowsSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftPowerWindowsSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftPowerWindowsSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftPowerWindowsSwitchRequest* New() const final {
    return CreateMaybeMessage<FrontLeftPowerWindowsSwitchRequest>(nullptr);
  }

  FrontLeftPowerWindowsSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftPowerWindowsSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftPowerWindowsSwitchRequest& from);
  void MergeFrom(const FrontLeftPowerWindowsSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftPowerWindowsSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftPowerWindowsSwitchRequest";
  }
  protected:
  explicit FrontLeftPowerWindowsSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftPowerWindowsSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightPowerWindowsSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightPowerWindowsSwitchRequest) */ {
 public:
  inline RearRightPowerWindowsSwitchRequest() : RearRightPowerWindowsSwitchRequest(nullptr) {}
  virtual ~RearRightPowerWindowsSwitchRequest();
  explicit constexpr RearRightPowerWindowsSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightPowerWindowsSwitchRequest(const RearRightPowerWindowsSwitchRequest& from);
  RearRightPowerWindowsSwitchRequest(RearRightPowerWindowsSwitchRequest&& from) noexcept
    : RearRightPowerWindowsSwitchRequest() {
    *this = ::std::move(from);
  }

  inline RearRightPowerWindowsSwitchRequest& operator=(const RearRightPowerWindowsSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightPowerWindowsSwitchRequest& operator=(RearRightPowerWindowsSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightPowerWindowsSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightPowerWindowsSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const RearRightPowerWindowsSwitchRequest*>(
               &_RearRightPowerWindowsSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(RearRightPowerWindowsSwitchRequest& a, RearRightPowerWindowsSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightPowerWindowsSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightPowerWindowsSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightPowerWindowsSwitchRequest* New() const final {
    return CreateMaybeMessage<RearRightPowerWindowsSwitchRequest>(nullptr);
  }

  RearRightPowerWindowsSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightPowerWindowsSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightPowerWindowsSwitchRequest& from);
  void MergeFrom(const RearRightPowerWindowsSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightPowerWindowsSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightPowerWindowsSwitchRequest";
  }
  protected:
  explicit RearRightPowerWindowsSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightPowerWindowsSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftPowerWindowsSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftPowerWindowsSwitchRequest) */ {
 public:
  inline RearLeftPowerWindowsSwitchRequest() : RearLeftPowerWindowsSwitchRequest(nullptr) {}
  virtual ~RearLeftPowerWindowsSwitchRequest();
  explicit constexpr RearLeftPowerWindowsSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftPowerWindowsSwitchRequest(const RearLeftPowerWindowsSwitchRequest& from);
  RearLeftPowerWindowsSwitchRequest(RearLeftPowerWindowsSwitchRequest&& from) noexcept
    : RearLeftPowerWindowsSwitchRequest() {
    *this = ::std::move(from);
  }

  inline RearLeftPowerWindowsSwitchRequest& operator=(const RearLeftPowerWindowsSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftPowerWindowsSwitchRequest& operator=(RearLeftPowerWindowsSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftPowerWindowsSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftPowerWindowsSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const RearLeftPowerWindowsSwitchRequest*>(
               &_RearLeftPowerWindowsSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RearLeftPowerWindowsSwitchRequest& a, RearLeftPowerWindowsSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftPowerWindowsSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftPowerWindowsSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftPowerWindowsSwitchRequest* New() const final {
    return CreateMaybeMessage<RearLeftPowerWindowsSwitchRequest>(nullptr);
  }

  RearLeftPowerWindowsSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftPowerWindowsSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftPowerWindowsSwitchRequest& from);
  void MergeFrom(const RearLeftPowerWindowsSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftPowerWindowsSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftPowerWindowsSwitchRequest";
  }
  protected:
  explicit RearLeftPowerWindowsSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftPowerWindowsSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class HornRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.HornRequest) */ {
 public:
  inline HornRequest() : HornRequest(nullptr) {}
  virtual ~HornRequest();
  explicit constexpr HornRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HornRequest(const HornRequest& from);
  HornRequest(HornRequest&& from) noexcept
    : HornRequest() {
    *this = ::std::move(from);
  }

  inline HornRequest& operator=(const HornRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HornRequest& operator=(HornRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HornRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HornRequest* internal_default_instance() {
    return reinterpret_cast<const HornRequest*>(
               &_HornRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(HornRequest& a, HornRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HornRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HornRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HornRequest* New() const final {
    return CreateMaybeMessage<HornRequest>(nullptr);
  }

  HornRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HornRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HornRequest& from);
  void MergeFrom(const HornRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HornRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.HornRequest";
  }
  protected:
  explicit HornRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.HornRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class BuzzerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.BuzzerRequest) */ {
 public:
  inline BuzzerRequest() : BuzzerRequest(nullptr) {}
  virtual ~BuzzerRequest();
  explicit constexpr BuzzerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuzzerRequest(const BuzzerRequest& from);
  BuzzerRequest(BuzzerRequest&& from) noexcept
    : BuzzerRequest() {
    *this = ::std::move(from);
  }

  inline BuzzerRequest& operator=(const BuzzerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuzzerRequest& operator=(BuzzerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuzzerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuzzerRequest* internal_default_instance() {
    return reinterpret_cast<const BuzzerRequest*>(
               &_BuzzerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(BuzzerRequest& a, BuzzerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BuzzerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuzzerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuzzerRequest* New() const final {
    return CreateMaybeMessage<BuzzerRequest>(nullptr);
  }

  BuzzerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuzzerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuzzerRequest& from);
  void MergeFrom(const BuzzerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuzzerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.BuzzerRequest";
  }
  protected:
  explicit BuzzerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.BuzzerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class AirConditionerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.AirConditionerRequest) */ {
 public:
  inline AirConditionerRequest() : AirConditionerRequest(nullptr) {}
  virtual ~AirConditionerRequest();
  explicit constexpr AirConditionerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AirConditionerRequest(const AirConditionerRequest& from);
  AirConditionerRequest(AirConditionerRequest&& from) noexcept
    : AirConditionerRequest() {
    *this = ::std::move(from);
  }

  inline AirConditionerRequest& operator=(const AirConditionerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirConditionerRequest& operator=(AirConditionerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirConditionerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AirConditionerRequest* internal_default_instance() {
    return reinterpret_cast<const AirConditionerRequest*>(
               &_AirConditionerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AirConditionerRequest& a, AirConditionerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AirConditionerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirConditionerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirConditionerRequest* New() const final {
    return CreateMaybeMessage<AirConditionerRequest>(nullptr);
  }

  AirConditionerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirConditionerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirConditionerRequest& from);
  void MergeFrom(const AirConditionerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirConditionerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.AirConditionerRequest";
  }
  protected:
  explicit AirConditionerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.AirConditionerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class AirCondTemperatureRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.AirCondTemperatureRequest) */ {
 public:
  inline AirCondTemperatureRequest() : AirCondTemperatureRequest(nullptr) {}
  virtual ~AirCondTemperatureRequest();
  explicit constexpr AirCondTemperatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AirCondTemperatureRequest(const AirCondTemperatureRequest& from);
  AirCondTemperatureRequest(AirCondTemperatureRequest&& from) noexcept
    : AirCondTemperatureRequest() {
    *this = ::std::move(from);
  }

  inline AirCondTemperatureRequest& operator=(const AirCondTemperatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirCondTemperatureRequest& operator=(AirCondTemperatureRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirCondTemperatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AirCondTemperatureRequest* internal_default_instance() {
    return reinterpret_cast<const AirCondTemperatureRequest*>(
               &_AirCondTemperatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AirCondTemperatureRequest& a, AirCondTemperatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AirCondTemperatureRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirCondTemperatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirCondTemperatureRequest* New() const final {
    return CreateMaybeMessage<AirCondTemperatureRequest>(nullptr);
  }

  AirCondTemperatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirCondTemperatureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirCondTemperatureRequest& from);
  void MergeFrom(const AirCondTemperatureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirCondTemperatureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.AirCondTemperatureRequest";
  }
  protected:
  explicit AirCondTemperatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemperatureFieldNumber = 2,
    kSetModeFieldNumber = 1,
  };
  // double temperature = 2;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.AirCondTemperatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double temperature_;
  bool setmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class AirConditionerFanSpeedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.AirConditionerFanSpeedRequest) */ {
 public:
  inline AirConditionerFanSpeedRequest() : AirConditionerFanSpeedRequest(nullptr) {}
  virtual ~AirConditionerFanSpeedRequest();
  explicit constexpr AirConditionerFanSpeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AirConditionerFanSpeedRequest(const AirConditionerFanSpeedRequest& from);
  AirConditionerFanSpeedRequest(AirConditionerFanSpeedRequest&& from) noexcept
    : AirConditionerFanSpeedRequest() {
    *this = ::std::move(from);
  }

  inline AirConditionerFanSpeedRequest& operator=(const AirConditionerFanSpeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirConditionerFanSpeedRequest& operator=(AirConditionerFanSpeedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirConditionerFanSpeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AirConditionerFanSpeedRequest* internal_default_instance() {
    return reinterpret_cast<const AirConditionerFanSpeedRequest*>(
               &_AirConditionerFanSpeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(AirConditionerFanSpeedRequest& a, AirConditionerFanSpeedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AirConditionerFanSpeedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirConditionerFanSpeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirConditionerFanSpeedRequest* New() const final {
    return CreateMaybeMessage<AirConditionerFanSpeedRequest>(nullptr);
  }

  AirConditionerFanSpeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirConditionerFanSpeedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirConditionerFanSpeedRequest& from);
  void MergeFrom(const AirConditionerFanSpeedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirConditionerFanSpeedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.AirConditionerFanSpeedRequest";
  }
  protected:
  explicit AirConditionerFanSpeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFanSpeedFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // int32 fanSpeed = 2;
  void clear_fanspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 fanspeed() const;
  void set_fanspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fanspeed() const;
  void _internal_set_fanspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.AirConditionerFanSpeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 fanspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class HandlingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.HandlingRequest) */ {
 public:
  inline HandlingRequest() : HandlingRequest(nullptr) {}
  virtual ~HandlingRequest();
  explicit constexpr HandlingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandlingRequest(const HandlingRequest& from);
  HandlingRequest(HandlingRequest&& from) noexcept
    : HandlingRequest() {
    *this = ::std::move(from);
  }

  inline HandlingRequest& operator=(const HandlingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandlingRequest& operator=(HandlingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandlingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandlingRequest* internal_default_instance() {
    return reinterpret_cast<const HandlingRequest*>(
               &_HandlingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(HandlingRequest& a, HandlingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandlingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandlingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandlingRequest* New() const final {
    return CreateMaybeMessage<HandlingRequest>(nullptr);
  }

  HandlingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandlingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandlingRequest& from);
  void MergeFrom(const HandlingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandlingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.HandlingRequest";
  }
  protected:
  explicit HandlingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.HandlingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class CentralDoorLockSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.CentralDoorLockSwitchRequest) */ {
 public:
  inline CentralDoorLockSwitchRequest() : CentralDoorLockSwitchRequest(nullptr) {}
  virtual ~CentralDoorLockSwitchRequest();
  explicit constexpr CentralDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CentralDoorLockSwitchRequest(const CentralDoorLockSwitchRequest& from);
  CentralDoorLockSwitchRequest(CentralDoorLockSwitchRequest&& from) noexcept
    : CentralDoorLockSwitchRequest() {
    *this = ::std::move(from);
  }

  inline CentralDoorLockSwitchRequest& operator=(const CentralDoorLockSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CentralDoorLockSwitchRequest& operator=(CentralDoorLockSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CentralDoorLockSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CentralDoorLockSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const CentralDoorLockSwitchRequest*>(
               &_CentralDoorLockSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CentralDoorLockSwitchRequest& a, CentralDoorLockSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CentralDoorLockSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CentralDoorLockSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CentralDoorLockSwitchRequest* New() const final {
    return CreateMaybeMessage<CentralDoorLockSwitchRequest>(nullptr);
  }

  CentralDoorLockSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CentralDoorLockSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CentralDoorLockSwitchRequest& from);
  void MergeFrom(const CentralDoorLockSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CentralDoorLockSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.CentralDoorLockSwitchRequest";
  }
  protected:
  explicit CentralDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.CentralDoorLockSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightDoorLockSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightDoorLockSwitchRequest) */ {
 public:
  inline FrontRightDoorLockSwitchRequest() : FrontRightDoorLockSwitchRequest(nullptr) {}
  virtual ~FrontRightDoorLockSwitchRequest();
  explicit constexpr FrontRightDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightDoorLockSwitchRequest(const FrontRightDoorLockSwitchRequest& from);
  FrontRightDoorLockSwitchRequest(FrontRightDoorLockSwitchRequest&& from) noexcept
    : FrontRightDoorLockSwitchRequest() {
    *this = ::std::move(from);
  }

  inline FrontRightDoorLockSwitchRequest& operator=(const FrontRightDoorLockSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightDoorLockSwitchRequest& operator=(FrontRightDoorLockSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightDoorLockSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightDoorLockSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const FrontRightDoorLockSwitchRequest*>(
               &_FrontRightDoorLockSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(FrontRightDoorLockSwitchRequest& a, FrontRightDoorLockSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightDoorLockSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightDoorLockSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightDoorLockSwitchRequest* New() const final {
    return CreateMaybeMessage<FrontRightDoorLockSwitchRequest>(nullptr);
  }

  FrontRightDoorLockSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightDoorLockSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightDoorLockSwitchRequest& from);
  void MergeFrom(const FrontRightDoorLockSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightDoorLockSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightDoorLockSwitchRequest";
  }
  protected:
  explicit FrontRightDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightDoorLockSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftDoorLockSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftDoorLockSwitchRequest) */ {
 public:
  inline FrontLeftDoorLockSwitchRequest() : FrontLeftDoorLockSwitchRequest(nullptr) {}
  virtual ~FrontLeftDoorLockSwitchRequest();
  explicit constexpr FrontLeftDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftDoorLockSwitchRequest(const FrontLeftDoorLockSwitchRequest& from);
  FrontLeftDoorLockSwitchRequest(FrontLeftDoorLockSwitchRequest&& from) noexcept
    : FrontLeftDoorLockSwitchRequest() {
    *this = ::std::move(from);
  }

  inline FrontLeftDoorLockSwitchRequest& operator=(const FrontLeftDoorLockSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftDoorLockSwitchRequest& operator=(FrontLeftDoorLockSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftDoorLockSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftDoorLockSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const FrontLeftDoorLockSwitchRequest*>(
               &_FrontLeftDoorLockSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(FrontLeftDoorLockSwitchRequest& a, FrontLeftDoorLockSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftDoorLockSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftDoorLockSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftDoorLockSwitchRequest* New() const final {
    return CreateMaybeMessage<FrontLeftDoorLockSwitchRequest>(nullptr);
  }

  FrontLeftDoorLockSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftDoorLockSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftDoorLockSwitchRequest& from);
  void MergeFrom(const FrontLeftDoorLockSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftDoorLockSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftDoorLockSwitchRequest";
  }
  protected:
  explicit FrontLeftDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftDoorLockSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightDoorLockSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightDoorLockSwitchRequest) */ {
 public:
  inline RearRightDoorLockSwitchRequest() : RearRightDoorLockSwitchRequest(nullptr) {}
  virtual ~RearRightDoorLockSwitchRequest();
  explicit constexpr RearRightDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightDoorLockSwitchRequest(const RearRightDoorLockSwitchRequest& from);
  RearRightDoorLockSwitchRequest(RearRightDoorLockSwitchRequest&& from) noexcept
    : RearRightDoorLockSwitchRequest() {
    *this = ::std::move(from);
  }

  inline RearRightDoorLockSwitchRequest& operator=(const RearRightDoorLockSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightDoorLockSwitchRequest& operator=(RearRightDoorLockSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightDoorLockSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightDoorLockSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const RearRightDoorLockSwitchRequest*>(
               &_RearRightDoorLockSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(RearRightDoorLockSwitchRequest& a, RearRightDoorLockSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightDoorLockSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightDoorLockSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightDoorLockSwitchRequest* New() const final {
    return CreateMaybeMessage<RearRightDoorLockSwitchRequest>(nullptr);
  }

  RearRightDoorLockSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightDoorLockSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightDoorLockSwitchRequest& from);
  void MergeFrom(const RearRightDoorLockSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightDoorLockSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightDoorLockSwitchRequest";
  }
  protected:
  explicit RearRightDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightDoorLockSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftDoorLockSwitchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftDoorLockSwitchRequest) */ {
 public:
  inline RearLeftDoorLockSwitchRequest() : RearLeftDoorLockSwitchRequest(nullptr) {}
  virtual ~RearLeftDoorLockSwitchRequest();
  explicit constexpr RearLeftDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftDoorLockSwitchRequest(const RearLeftDoorLockSwitchRequest& from);
  RearLeftDoorLockSwitchRequest(RearLeftDoorLockSwitchRequest&& from) noexcept
    : RearLeftDoorLockSwitchRequest() {
    *this = ::std::move(from);
  }

  inline RearLeftDoorLockSwitchRequest& operator=(const RearLeftDoorLockSwitchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftDoorLockSwitchRequest& operator=(RearLeftDoorLockSwitchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftDoorLockSwitchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftDoorLockSwitchRequest* internal_default_instance() {
    return reinterpret_cast<const RearLeftDoorLockSwitchRequest*>(
               &_RearLeftDoorLockSwitchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(RearLeftDoorLockSwitchRequest& a, RearLeftDoorLockSwitchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftDoorLockSwitchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftDoorLockSwitchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftDoorLockSwitchRequest* New() const final {
    return CreateMaybeMessage<RearLeftDoorLockSwitchRequest>(nullptr);
  }

  RearLeftDoorLockSwitchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftDoorLockSwitchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftDoorLockSwitchRequest& from);
  void MergeFrom(const RearLeftDoorLockSwitchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftDoorLockSwitchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftDoorLockSwitchRequest";
  }
  protected:
  explicit RearLeftDoorLockSwitchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetModeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bool setMode = 1;
  void clear_setmode();
  bool setmode() const;
  void set_setmode(bool value);
  private:
  bool _internal_setmode() const;
  void _internal_set_setmode(bool value);
  public:

  // bool flag = 2;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftDoorLockSwitchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool setmode_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLowLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLowLightReply) */ {
 public:
  inline FrontLowLightReply() : FrontLowLightReply(nullptr) {}
  virtual ~FrontLowLightReply();
  explicit constexpr FrontLowLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLowLightReply(const FrontLowLightReply& from);
  FrontLowLightReply(FrontLowLightReply&& from) noexcept
    : FrontLowLightReply() {
    *this = ::std::move(from);
  }

  inline FrontLowLightReply& operator=(const FrontLowLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLowLightReply& operator=(FrontLowLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLowLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLowLightReply* internal_default_instance() {
    return reinterpret_cast<const FrontLowLightReply*>(
               &_FrontLowLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(FrontLowLightReply& a, FrontLowLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLowLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLowLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLowLightReply* New() const final {
    return CreateMaybeMessage<FrontLowLightReply>(nullptr);
  }

  FrontLowLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLowLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLowLightReply& from);
  void MergeFrom(const FrontLowLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLowLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLowLightReply";
  }
  protected:
  explicit FrontLowLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLowLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontHighLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontHighLightReply) */ {
 public:
  inline FrontHighLightReply() : FrontHighLightReply(nullptr) {}
  virtual ~FrontHighLightReply();
  explicit constexpr FrontHighLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontHighLightReply(const FrontHighLightReply& from);
  FrontHighLightReply(FrontHighLightReply&& from) noexcept
    : FrontHighLightReply() {
    *this = ::std::move(from);
  }

  inline FrontHighLightReply& operator=(const FrontHighLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontHighLightReply& operator=(FrontHighLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontHighLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontHighLightReply* internal_default_instance() {
    return reinterpret_cast<const FrontHighLightReply*>(
               &_FrontHighLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(FrontHighLightReply& a, FrontHighLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontHighLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontHighLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontHighLightReply* New() const final {
    return CreateMaybeMessage<FrontHighLightReply>(nullptr);
  }

  FrontHighLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontHighLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontHighLightReply& from);
  void MergeFrom(const FrontHighLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontHighLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontHighLightReply";
  }
  protected:
  explicit FrontHighLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontHighLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLightReply) */ {
 public:
  inline RearLightReply() : RearLightReply(nullptr) {}
  virtual ~RearLightReply();
  explicit constexpr RearLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLightReply(const RearLightReply& from);
  RearLightReply(RearLightReply&& from) noexcept
    : RearLightReply() {
    *this = ::std::move(from);
  }

  inline RearLightReply& operator=(const RearLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLightReply& operator=(RearLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLightReply* internal_default_instance() {
    return reinterpret_cast<const RearLightReply*>(
               &_RearLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(RearLightReply& a, RearLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLightReply* New() const final {
    return CreateMaybeMessage<RearLightReply>(nullptr);
  }

  RearLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLightReply& from);
  void MergeFrom(const RearLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLightReply";
  }
  protected:
  explicit RearLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontDaytimeLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontDaytimeLightReply) */ {
 public:
  inline FrontDaytimeLightReply() : FrontDaytimeLightReply(nullptr) {}
  virtual ~FrontDaytimeLightReply();
  explicit constexpr FrontDaytimeLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontDaytimeLightReply(const FrontDaytimeLightReply& from);
  FrontDaytimeLightReply(FrontDaytimeLightReply&& from) noexcept
    : FrontDaytimeLightReply() {
    *this = ::std::move(from);
  }

  inline FrontDaytimeLightReply& operator=(const FrontDaytimeLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontDaytimeLightReply& operator=(FrontDaytimeLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontDaytimeLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontDaytimeLightReply* internal_default_instance() {
    return reinterpret_cast<const FrontDaytimeLightReply*>(
               &_FrontDaytimeLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(FrontDaytimeLightReply& a, FrontDaytimeLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontDaytimeLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontDaytimeLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontDaytimeLightReply* New() const final {
    return CreateMaybeMessage<FrontDaytimeLightReply>(nullptr);
  }

  FrontDaytimeLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontDaytimeLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontDaytimeLightReply& from);
  void MergeFrom(const FrontDaytimeLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontDaytimeLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontDaytimeLightReply";
  }
  protected:
  explicit FrontDaytimeLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontDaytimeLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class BrakeLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.BrakeLightReply) */ {
 public:
  inline BrakeLightReply() : BrakeLightReply(nullptr) {}
  virtual ~BrakeLightReply();
  explicit constexpr BrakeLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrakeLightReply(const BrakeLightReply& from);
  BrakeLightReply(BrakeLightReply&& from) noexcept
    : BrakeLightReply() {
    *this = ::std::move(from);
  }

  inline BrakeLightReply& operator=(const BrakeLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrakeLightReply& operator=(BrakeLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BrakeLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrakeLightReply* internal_default_instance() {
    return reinterpret_cast<const BrakeLightReply*>(
               &_BrakeLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(BrakeLightReply& a, BrakeLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BrakeLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrakeLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BrakeLightReply* New() const final {
    return CreateMaybeMessage<BrakeLightReply>(nullptr);
  }

  BrakeLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrakeLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BrakeLightReply& from);
  void MergeFrom(const BrakeLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakeLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.BrakeLightReply";
  }
  protected:
  explicit BrakeLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.BrakeLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class ReverseLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.ReverseLightReply) */ {
 public:
  inline ReverseLightReply() : ReverseLightReply(nullptr) {}
  virtual ~ReverseLightReply();
  explicit constexpr ReverseLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReverseLightReply(const ReverseLightReply& from);
  ReverseLightReply(ReverseLightReply&& from) noexcept
    : ReverseLightReply() {
    *this = ::std::move(from);
  }

  inline ReverseLightReply& operator=(const ReverseLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReverseLightReply& operator=(ReverseLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReverseLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReverseLightReply* internal_default_instance() {
    return reinterpret_cast<const ReverseLightReply*>(
               &_ReverseLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ReverseLightReply& a, ReverseLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReverseLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReverseLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReverseLightReply* New() const final {
    return CreateMaybeMessage<ReverseLightReply>(nullptr);
  }

  ReverseLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReverseLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReverseLightReply& from);
  void MergeFrom(const ReverseLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReverseLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.ReverseLightReply";
  }
  protected:
  explicit ReverseLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.ReverseLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontFogLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontFogLightReply) */ {
 public:
  inline FrontFogLightReply() : FrontFogLightReply(nullptr) {}
  virtual ~FrontFogLightReply();
  explicit constexpr FrontFogLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontFogLightReply(const FrontFogLightReply& from);
  FrontFogLightReply(FrontFogLightReply&& from) noexcept
    : FrontFogLightReply() {
    *this = ::std::move(from);
  }

  inline FrontFogLightReply& operator=(const FrontFogLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontFogLightReply& operator=(FrontFogLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontFogLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontFogLightReply* internal_default_instance() {
    return reinterpret_cast<const FrontFogLightReply*>(
               &_FrontFogLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(FrontFogLightReply& a, FrontFogLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontFogLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontFogLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontFogLightReply* New() const final {
    return CreateMaybeMessage<FrontFogLightReply>(nullptr);
  }

  FrontFogLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontFogLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontFogLightReply& from);
  void MergeFrom(const FrontFogLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontFogLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontFogLightReply";
  }
  protected:
  explicit FrontFogLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontFogLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearFogLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearFogLightReply) */ {
 public:
  inline RearFogLightReply() : RearFogLightReply(nullptr) {}
  virtual ~RearFogLightReply();
  explicit constexpr RearFogLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearFogLightReply(const RearFogLightReply& from);
  RearFogLightReply(RearFogLightReply&& from) noexcept
    : RearFogLightReply() {
    *this = ::std::move(from);
  }

  inline RearFogLightReply& operator=(const RearFogLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearFogLightReply& operator=(RearFogLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearFogLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearFogLightReply* internal_default_instance() {
    return reinterpret_cast<const RearFogLightReply*>(
               &_RearFogLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(RearFogLightReply& a, RearFogLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearFogLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearFogLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearFogLightReply* New() const final {
    return CreateMaybeMessage<RearFogLightReply>(nullptr);
  }

  RearFogLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearFogLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearFogLightReply& from);
  void MergeFrom(const RearFogLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearFogLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearFogLightReply";
  }
  protected:
  explicit RearFogLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearFogLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class ClearanceLampReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.ClearanceLampReply) */ {
 public:
  inline ClearanceLampReply() : ClearanceLampReply(nullptr) {}
  virtual ~ClearanceLampReply();
  explicit constexpr ClearanceLampReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearanceLampReply(const ClearanceLampReply& from);
  ClearanceLampReply(ClearanceLampReply&& from) noexcept
    : ClearanceLampReply() {
    *this = ::std::move(from);
  }

  inline ClearanceLampReply& operator=(const ClearanceLampReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearanceLampReply& operator=(ClearanceLampReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearanceLampReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearanceLampReply* internal_default_instance() {
    return reinterpret_cast<const ClearanceLampReply*>(
               &_ClearanceLampReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ClearanceLampReply& a, ClearanceLampReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearanceLampReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearanceLampReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearanceLampReply* New() const final {
    return CreateMaybeMessage<ClearanceLampReply>(nullptr);
  }

  ClearanceLampReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearanceLampReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearanceLampReply& from);
  void MergeFrom(const ClearanceLampReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearanceLampReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.ClearanceLampReply";
  }
  protected:
  explicit ClearanceLampReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.ClearanceLampReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftBlinkerLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftBlinkerLightReply) */ {
 public:
  inline FrontLeftBlinkerLightReply() : FrontLeftBlinkerLightReply(nullptr) {}
  virtual ~FrontLeftBlinkerLightReply();
  explicit constexpr FrontLeftBlinkerLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftBlinkerLightReply(const FrontLeftBlinkerLightReply& from);
  FrontLeftBlinkerLightReply(FrontLeftBlinkerLightReply&& from) noexcept
    : FrontLeftBlinkerLightReply() {
    *this = ::std::move(from);
  }

  inline FrontLeftBlinkerLightReply& operator=(const FrontLeftBlinkerLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftBlinkerLightReply& operator=(FrontLeftBlinkerLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftBlinkerLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftBlinkerLightReply* internal_default_instance() {
    return reinterpret_cast<const FrontLeftBlinkerLightReply*>(
               &_FrontLeftBlinkerLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(FrontLeftBlinkerLightReply& a, FrontLeftBlinkerLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftBlinkerLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftBlinkerLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftBlinkerLightReply* New() const final {
    return CreateMaybeMessage<FrontLeftBlinkerLightReply>(nullptr);
  }

  FrontLeftBlinkerLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftBlinkerLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftBlinkerLightReply& from);
  void MergeFrom(const FrontLeftBlinkerLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftBlinkerLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftBlinkerLightReply";
  }
  protected:
  explicit FrontLeftBlinkerLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftBlinkerLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightBlinkerLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightBlinkerLightReply) */ {
 public:
  inline FrontRightBlinkerLightReply() : FrontRightBlinkerLightReply(nullptr) {}
  virtual ~FrontRightBlinkerLightReply();
  explicit constexpr FrontRightBlinkerLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightBlinkerLightReply(const FrontRightBlinkerLightReply& from);
  FrontRightBlinkerLightReply(FrontRightBlinkerLightReply&& from) noexcept
    : FrontRightBlinkerLightReply() {
    *this = ::std::move(from);
  }

  inline FrontRightBlinkerLightReply& operator=(const FrontRightBlinkerLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightBlinkerLightReply& operator=(FrontRightBlinkerLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightBlinkerLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightBlinkerLightReply* internal_default_instance() {
    return reinterpret_cast<const FrontRightBlinkerLightReply*>(
               &_FrontRightBlinkerLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FrontRightBlinkerLightReply& a, FrontRightBlinkerLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightBlinkerLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightBlinkerLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightBlinkerLightReply* New() const final {
    return CreateMaybeMessage<FrontRightBlinkerLightReply>(nullptr);
  }

  FrontRightBlinkerLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightBlinkerLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightBlinkerLightReply& from);
  void MergeFrom(const FrontRightBlinkerLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightBlinkerLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightBlinkerLightReply";
  }
  protected:
  explicit FrontRightBlinkerLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightBlinkerLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftBlinkerLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftBlinkerLightReply) */ {
 public:
  inline RearLeftBlinkerLightReply() : RearLeftBlinkerLightReply(nullptr) {}
  virtual ~RearLeftBlinkerLightReply();
  explicit constexpr RearLeftBlinkerLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftBlinkerLightReply(const RearLeftBlinkerLightReply& from);
  RearLeftBlinkerLightReply(RearLeftBlinkerLightReply&& from) noexcept
    : RearLeftBlinkerLightReply() {
    *this = ::std::move(from);
  }

  inline RearLeftBlinkerLightReply& operator=(const RearLeftBlinkerLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftBlinkerLightReply& operator=(RearLeftBlinkerLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftBlinkerLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftBlinkerLightReply* internal_default_instance() {
    return reinterpret_cast<const RearLeftBlinkerLightReply*>(
               &_RearLeftBlinkerLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(RearLeftBlinkerLightReply& a, RearLeftBlinkerLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftBlinkerLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftBlinkerLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftBlinkerLightReply* New() const final {
    return CreateMaybeMessage<RearLeftBlinkerLightReply>(nullptr);
  }

  RearLeftBlinkerLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftBlinkerLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftBlinkerLightReply& from);
  void MergeFrom(const RearLeftBlinkerLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftBlinkerLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftBlinkerLightReply";
  }
  protected:
  explicit RearLeftBlinkerLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftBlinkerLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightBlinkerLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightBlinkerLightReply) */ {
 public:
  inline RearRightBlinkerLightReply() : RearRightBlinkerLightReply(nullptr) {}
  virtual ~RearRightBlinkerLightReply();
  explicit constexpr RearRightBlinkerLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightBlinkerLightReply(const RearRightBlinkerLightReply& from);
  RearRightBlinkerLightReply(RearRightBlinkerLightReply&& from) noexcept
    : RearRightBlinkerLightReply() {
    *this = ::std::move(from);
  }

  inline RearRightBlinkerLightReply& operator=(const RearRightBlinkerLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightBlinkerLightReply& operator=(RearRightBlinkerLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightBlinkerLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightBlinkerLightReply* internal_default_instance() {
    return reinterpret_cast<const RearRightBlinkerLightReply*>(
               &_RearRightBlinkerLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(RearRightBlinkerLightReply& a, RearRightBlinkerLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightBlinkerLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightBlinkerLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightBlinkerLightReply* New() const final {
    return CreateMaybeMessage<RearRightBlinkerLightReply>(nullptr);
  }

  RearRightBlinkerLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightBlinkerLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightBlinkerLightReply& from);
  void MergeFrom(const RearRightBlinkerLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightBlinkerLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightBlinkerLightReply";
  }
  protected:
  explicit RearRightBlinkerLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightBlinkerLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontWiperReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontWiperReply) */ {
 public:
  inline FrontWiperReply() : FrontWiperReply(nullptr) {}
  virtual ~FrontWiperReply();
  explicit constexpr FrontWiperReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontWiperReply(const FrontWiperReply& from);
  FrontWiperReply(FrontWiperReply&& from) noexcept
    : FrontWiperReply() {
    *this = ::std::move(from);
  }

  inline FrontWiperReply& operator=(const FrontWiperReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontWiperReply& operator=(FrontWiperReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontWiperReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontWiperReply* internal_default_instance() {
    return reinterpret_cast<const FrontWiperReply*>(
               &_FrontWiperReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(FrontWiperReply& a, FrontWiperReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontWiperReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontWiperReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontWiperReply* New() const final {
    return CreateMaybeMessage<FrontWiperReply>(nullptr);
  }

  FrontWiperReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontWiperReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontWiperReply& from);
  void MergeFrom(const FrontWiperReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontWiperReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontWiperReply";
  }
  protected:
  explicit FrontWiperReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontWiperReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearWiperReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearWiperReply) */ {
 public:
  inline RearWiperReply() : RearWiperReply(nullptr) {}
  virtual ~RearWiperReply();
  explicit constexpr RearWiperReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearWiperReply(const RearWiperReply& from);
  RearWiperReply(RearWiperReply&& from) noexcept
    : RearWiperReply() {
    *this = ::std::move(from);
  }

  inline RearWiperReply& operator=(const RearWiperReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearWiperReply& operator=(RearWiperReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearWiperReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearWiperReply* internal_default_instance() {
    return reinterpret_cast<const RearWiperReply*>(
               &_RearWiperReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RearWiperReply& a, RearWiperReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearWiperReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearWiperReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearWiperReply* New() const final {
    return CreateMaybeMessage<RearWiperReply>(nullptr);
  }

  RearWiperReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearWiperReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearWiperReply& from);
  void MergeFrom(const RearWiperReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearWiperReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearWiperReply";
  }
  protected:
  explicit RearWiperReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearWiperReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class LeftSideMirrorReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.LeftSideMirrorReply) */ {
 public:
  inline LeftSideMirrorReply() : LeftSideMirrorReply(nullptr) {}
  virtual ~LeftSideMirrorReply();
  explicit constexpr LeftSideMirrorReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeftSideMirrorReply(const LeftSideMirrorReply& from);
  LeftSideMirrorReply(LeftSideMirrorReply&& from) noexcept
    : LeftSideMirrorReply() {
    *this = ::std::move(from);
  }

  inline LeftSideMirrorReply& operator=(const LeftSideMirrorReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeftSideMirrorReply& operator=(LeftSideMirrorReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeftSideMirrorReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeftSideMirrorReply* internal_default_instance() {
    return reinterpret_cast<const LeftSideMirrorReply*>(
               &_LeftSideMirrorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(LeftSideMirrorReply& a, LeftSideMirrorReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LeftSideMirrorReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeftSideMirrorReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeftSideMirrorReply* New() const final {
    return CreateMaybeMessage<LeftSideMirrorReply>(nullptr);
  }

  LeftSideMirrorReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeftSideMirrorReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeftSideMirrorReply& from);
  void MergeFrom(const LeftSideMirrorReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeftSideMirrorReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.LeftSideMirrorReply";
  }
  protected:
  explicit LeftSideMirrorReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
  };
  // double angle = 1;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.LeftSideMirrorReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RightSideMirrorReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RightSideMirrorReply) */ {
 public:
  inline RightSideMirrorReply() : RightSideMirrorReply(nullptr) {}
  virtual ~RightSideMirrorReply();
  explicit constexpr RightSideMirrorReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RightSideMirrorReply(const RightSideMirrorReply& from);
  RightSideMirrorReply(RightSideMirrorReply&& from) noexcept
    : RightSideMirrorReply() {
    *this = ::std::move(from);
  }

  inline RightSideMirrorReply& operator=(const RightSideMirrorReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RightSideMirrorReply& operator=(RightSideMirrorReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RightSideMirrorReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RightSideMirrorReply* internal_default_instance() {
    return reinterpret_cast<const RightSideMirrorReply*>(
               &_RightSideMirrorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(RightSideMirrorReply& a, RightSideMirrorReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RightSideMirrorReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RightSideMirrorReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RightSideMirrorReply* New() const final {
    return CreateMaybeMessage<RightSideMirrorReply>(nullptr);
  }

  RightSideMirrorReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RightSideMirrorReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RightSideMirrorReply& from);
  void MergeFrom(const RightSideMirrorReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RightSideMirrorReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RightSideMirrorReply";
  }
  protected:
  explicit RightSideMirrorReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
  };
  // double angle = 1;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RightSideMirrorReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightDoorReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightDoorReply) */ {
 public:
  inline FrontRightDoorReply() : FrontRightDoorReply(nullptr) {}
  virtual ~FrontRightDoorReply();
  explicit constexpr FrontRightDoorReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightDoorReply(const FrontRightDoorReply& from);
  FrontRightDoorReply(FrontRightDoorReply&& from) noexcept
    : FrontRightDoorReply() {
    *this = ::std::move(from);
  }

  inline FrontRightDoorReply& operator=(const FrontRightDoorReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightDoorReply& operator=(FrontRightDoorReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightDoorReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightDoorReply* internal_default_instance() {
    return reinterpret_cast<const FrontRightDoorReply*>(
               &_FrontRightDoorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(FrontRightDoorReply& a, FrontRightDoorReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightDoorReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightDoorReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightDoorReply* New() const final {
    return CreateMaybeMessage<FrontRightDoorReply>(nullptr);
  }

  FrontRightDoorReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightDoorReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightDoorReply& from);
  void MergeFrom(const FrontRightDoorReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightDoorReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightDoorReply";
  }
  protected:
  explicit FrontRightDoorReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightDoorReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftDoorReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftDoorReply) */ {
 public:
  inline FrontLeftDoorReply() : FrontLeftDoorReply(nullptr) {}
  virtual ~FrontLeftDoorReply();
  explicit constexpr FrontLeftDoorReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftDoorReply(const FrontLeftDoorReply& from);
  FrontLeftDoorReply(FrontLeftDoorReply&& from) noexcept
    : FrontLeftDoorReply() {
    *this = ::std::move(from);
  }

  inline FrontLeftDoorReply& operator=(const FrontLeftDoorReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftDoorReply& operator=(FrontLeftDoorReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftDoorReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftDoorReply* internal_default_instance() {
    return reinterpret_cast<const FrontLeftDoorReply*>(
               &_FrontLeftDoorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(FrontLeftDoorReply& a, FrontLeftDoorReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftDoorReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftDoorReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftDoorReply* New() const final {
    return CreateMaybeMessage<FrontLeftDoorReply>(nullptr);
  }

  FrontLeftDoorReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftDoorReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftDoorReply& from);
  void MergeFrom(const FrontLeftDoorReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftDoorReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftDoorReply";
  }
  protected:
  explicit FrontLeftDoorReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftDoorReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightDoorReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightDoorReply) */ {
 public:
  inline RearRightDoorReply() : RearRightDoorReply(nullptr) {}
  virtual ~RearRightDoorReply();
  explicit constexpr RearRightDoorReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightDoorReply(const RearRightDoorReply& from);
  RearRightDoorReply(RearRightDoorReply&& from) noexcept
    : RearRightDoorReply() {
    *this = ::std::move(from);
  }

  inline RearRightDoorReply& operator=(const RearRightDoorReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightDoorReply& operator=(RearRightDoorReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightDoorReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightDoorReply* internal_default_instance() {
    return reinterpret_cast<const RearRightDoorReply*>(
               &_RearRightDoorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(RearRightDoorReply& a, RearRightDoorReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightDoorReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightDoorReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightDoorReply* New() const final {
    return CreateMaybeMessage<RearRightDoorReply>(nullptr);
  }

  RearRightDoorReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightDoorReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightDoorReply& from);
  void MergeFrom(const RearRightDoorReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightDoorReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightDoorReply";
  }
  protected:
  explicit RearRightDoorReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightDoorReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftDoorReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftDoorReply) */ {
 public:
  inline RearLeftDoorReply() : RearLeftDoorReply(nullptr) {}
  virtual ~RearLeftDoorReply();
  explicit constexpr RearLeftDoorReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftDoorReply(const RearLeftDoorReply& from);
  RearLeftDoorReply(RearLeftDoorReply&& from) noexcept
    : RearLeftDoorReply() {
    *this = ::std::move(from);
  }

  inline RearLeftDoorReply& operator=(const RearLeftDoorReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftDoorReply& operator=(RearLeftDoorReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftDoorReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftDoorReply* internal_default_instance() {
    return reinterpret_cast<const RearLeftDoorReply*>(
               &_RearLeftDoorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(RearLeftDoorReply& a, RearLeftDoorReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftDoorReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftDoorReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftDoorReply* New() const final {
    return CreateMaybeMessage<RearLeftDoorReply>(nullptr);
  }

  RearLeftDoorReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftDoorReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftDoorReply& from);
  void MergeFrom(const RearLeftDoorReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftDoorReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftDoorReply";
  }
  protected:
  explicit RearLeftDoorReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftDoorReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class TrunkReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.TrunkReply) */ {
 public:
  inline TrunkReply() : TrunkReply(nullptr) {}
  virtual ~TrunkReply();
  explicit constexpr TrunkReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrunkReply(const TrunkReply& from);
  TrunkReply(TrunkReply&& from) noexcept
    : TrunkReply() {
    *this = ::std::move(from);
  }

  inline TrunkReply& operator=(const TrunkReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrunkReply& operator=(TrunkReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrunkReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrunkReply* internal_default_instance() {
    return reinterpret_cast<const TrunkReply*>(
               &_TrunkReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(TrunkReply& a, TrunkReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TrunkReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrunkReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrunkReply* New() const final {
    return CreateMaybeMessage<TrunkReply>(nullptr);
  }

  TrunkReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrunkReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrunkReply& from);
  void MergeFrom(const TrunkReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrunkReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.TrunkReply";
  }
  protected:
  explicit TrunkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.TrunkReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class SunRoofReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.SunRoofReply) */ {
 public:
  inline SunRoofReply() : SunRoofReply(nullptr) {}
  virtual ~SunRoofReply();
  explicit constexpr SunRoofReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SunRoofReply(const SunRoofReply& from);
  SunRoofReply(SunRoofReply&& from) noexcept
    : SunRoofReply() {
    *this = ::std::move(from);
  }

  inline SunRoofReply& operator=(const SunRoofReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SunRoofReply& operator=(SunRoofReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SunRoofReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SunRoofReply* internal_default_instance() {
    return reinterpret_cast<const SunRoofReply*>(
               &_SunRoofReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SunRoofReply& a, SunRoofReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SunRoofReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SunRoofReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SunRoofReply* New() const final {
    return CreateMaybeMessage<SunRoofReply>(nullptr);
  }

  SunRoofReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SunRoofReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SunRoofReply& from);
  void MergeFrom(const SunRoofReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SunRoofReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.SunRoofReply";
  }
  protected:
  explicit SunRoofReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.SunRoofReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightPowerWindowsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightPowerWindowsReply) */ {
 public:
  inline FrontRightPowerWindowsReply() : FrontRightPowerWindowsReply(nullptr) {}
  virtual ~FrontRightPowerWindowsReply();
  explicit constexpr FrontRightPowerWindowsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightPowerWindowsReply(const FrontRightPowerWindowsReply& from);
  FrontRightPowerWindowsReply(FrontRightPowerWindowsReply&& from) noexcept
    : FrontRightPowerWindowsReply() {
    *this = ::std::move(from);
  }

  inline FrontRightPowerWindowsReply& operator=(const FrontRightPowerWindowsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightPowerWindowsReply& operator=(FrontRightPowerWindowsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightPowerWindowsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightPowerWindowsReply* internal_default_instance() {
    return reinterpret_cast<const FrontRightPowerWindowsReply*>(
               &_FrontRightPowerWindowsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(FrontRightPowerWindowsReply& a, FrontRightPowerWindowsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightPowerWindowsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightPowerWindowsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightPowerWindowsReply* New() const final {
    return CreateMaybeMessage<FrontRightPowerWindowsReply>(nullptr);
  }

  FrontRightPowerWindowsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightPowerWindowsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightPowerWindowsReply& from);
  void MergeFrom(const FrontRightPowerWindowsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightPowerWindowsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightPowerWindowsReply";
  }
  protected:
  explicit FrontRightPowerWindowsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLevelFieldNumber = 1,
  };
  // double highLevel = 1;
  void clear_highlevel();
  double highlevel() const;
  void set_highlevel(double value);
  private:
  double _internal_highlevel() const;
  void _internal_set_highlevel(double value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightPowerWindowsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double highlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftPowerWindowsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftPowerWindowsReply) */ {
 public:
  inline FrontLeftPowerWindowsReply() : FrontLeftPowerWindowsReply(nullptr) {}
  virtual ~FrontLeftPowerWindowsReply();
  explicit constexpr FrontLeftPowerWindowsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftPowerWindowsReply(const FrontLeftPowerWindowsReply& from);
  FrontLeftPowerWindowsReply(FrontLeftPowerWindowsReply&& from) noexcept
    : FrontLeftPowerWindowsReply() {
    *this = ::std::move(from);
  }

  inline FrontLeftPowerWindowsReply& operator=(const FrontLeftPowerWindowsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftPowerWindowsReply& operator=(FrontLeftPowerWindowsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftPowerWindowsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftPowerWindowsReply* internal_default_instance() {
    return reinterpret_cast<const FrontLeftPowerWindowsReply*>(
               &_FrontLeftPowerWindowsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(FrontLeftPowerWindowsReply& a, FrontLeftPowerWindowsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftPowerWindowsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftPowerWindowsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftPowerWindowsReply* New() const final {
    return CreateMaybeMessage<FrontLeftPowerWindowsReply>(nullptr);
  }

  FrontLeftPowerWindowsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftPowerWindowsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftPowerWindowsReply& from);
  void MergeFrom(const FrontLeftPowerWindowsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftPowerWindowsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftPowerWindowsReply";
  }
  protected:
  explicit FrontLeftPowerWindowsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLevelFieldNumber = 1,
  };
  // double highLevel = 1;
  void clear_highlevel();
  double highlevel() const;
  void set_highlevel(double value);
  private:
  double _internal_highlevel() const;
  void _internal_set_highlevel(double value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftPowerWindowsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double highlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightPowerWindowsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightPowerWindowsReply) */ {
 public:
  inline RearRightPowerWindowsReply() : RearRightPowerWindowsReply(nullptr) {}
  virtual ~RearRightPowerWindowsReply();
  explicit constexpr RearRightPowerWindowsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightPowerWindowsReply(const RearRightPowerWindowsReply& from);
  RearRightPowerWindowsReply(RearRightPowerWindowsReply&& from) noexcept
    : RearRightPowerWindowsReply() {
    *this = ::std::move(from);
  }

  inline RearRightPowerWindowsReply& operator=(const RearRightPowerWindowsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightPowerWindowsReply& operator=(RearRightPowerWindowsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightPowerWindowsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightPowerWindowsReply* internal_default_instance() {
    return reinterpret_cast<const RearRightPowerWindowsReply*>(
               &_RearRightPowerWindowsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(RearRightPowerWindowsReply& a, RearRightPowerWindowsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightPowerWindowsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightPowerWindowsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightPowerWindowsReply* New() const final {
    return CreateMaybeMessage<RearRightPowerWindowsReply>(nullptr);
  }

  RearRightPowerWindowsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightPowerWindowsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightPowerWindowsReply& from);
  void MergeFrom(const RearRightPowerWindowsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightPowerWindowsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightPowerWindowsReply";
  }
  protected:
  explicit RearRightPowerWindowsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLevelFieldNumber = 1,
  };
  // double highLevel = 1;
  void clear_highlevel();
  double highlevel() const;
  void set_highlevel(double value);
  private:
  double _internal_highlevel() const;
  void _internal_set_highlevel(double value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightPowerWindowsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double highlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftPowerWindowsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftPowerWindowsReply) */ {
 public:
  inline RearLeftPowerWindowsReply() : RearLeftPowerWindowsReply(nullptr) {}
  virtual ~RearLeftPowerWindowsReply();
  explicit constexpr RearLeftPowerWindowsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftPowerWindowsReply(const RearLeftPowerWindowsReply& from);
  RearLeftPowerWindowsReply(RearLeftPowerWindowsReply&& from) noexcept
    : RearLeftPowerWindowsReply() {
    *this = ::std::move(from);
  }

  inline RearLeftPowerWindowsReply& operator=(const RearLeftPowerWindowsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftPowerWindowsReply& operator=(RearLeftPowerWindowsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftPowerWindowsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftPowerWindowsReply* internal_default_instance() {
    return reinterpret_cast<const RearLeftPowerWindowsReply*>(
               &_RearLeftPowerWindowsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(RearLeftPowerWindowsReply& a, RearLeftPowerWindowsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftPowerWindowsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftPowerWindowsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftPowerWindowsReply* New() const final {
    return CreateMaybeMessage<RearLeftPowerWindowsReply>(nullptr);
  }

  RearLeftPowerWindowsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftPowerWindowsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftPowerWindowsReply& from);
  void MergeFrom(const RearLeftPowerWindowsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftPowerWindowsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftPowerWindowsReply";
  }
  protected:
  explicit RearLeftPowerWindowsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighLevelFieldNumber = 1,
  };
  // double highLevel = 1;
  void clear_highlevel();
  double highlevel() const;
  void set_highlevel(double value);
  private:
  double _internal_highlevel() const;
  void _internal_set_highlevel(double value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftPowerWindowsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double highlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class SideMirrorSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.SideMirrorSwitchReply) */ {
 public:
  inline SideMirrorSwitchReply() : SideMirrorSwitchReply(nullptr) {}
  virtual ~SideMirrorSwitchReply();
  explicit constexpr SideMirrorSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SideMirrorSwitchReply(const SideMirrorSwitchReply& from);
  SideMirrorSwitchReply(SideMirrorSwitchReply&& from) noexcept
    : SideMirrorSwitchReply() {
    *this = ::std::move(from);
  }

  inline SideMirrorSwitchReply& operator=(const SideMirrorSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideMirrorSwitchReply& operator=(SideMirrorSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SideMirrorSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SideMirrorSwitchReply* internal_default_instance() {
    return reinterpret_cast<const SideMirrorSwitchReply*>(
               &_SideMirrorSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SideMirrorSwitchReply& a, SideMirrorSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SideMirrorSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideMirrorSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SideMirrorSwitchReply* New() const final {
    return CreateMaybeMessage<SideMirrorSwitchReply>(nullptr);
  }

  SideMirrorSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SideMirrorSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SideMirrorSwitchReply& from);
  void MergeFrom(const SideMirrorSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideMirrorSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.SideMirrorSwitchReply";
  }
  protected:
  explicit SideMirrorSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.SideMirrorSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class InstrumentLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.InstrumentLightReply) */ {
 public:
  inline InstrumentLightReply() : InstrumentLightReply(nullptr) {}
  virtual ~InstrumentLightReply();
  explicit constexpr InstrumentLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstrumentLightReply(const InstrumentLightReply& from);
  InstrumentLightReply(InstrumentLightReply&& from) noexcept
    : InstrumentLightReply() {
    *this = ::std::move(from);
  }

  inline InstrumentLightReply& operator=(const InstrumentLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentLightReply& operator=(InstrumentLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentLightReply* internal_default_instance() {
    return reinterpret_cast<const InstrumentLightReply*>(
               &_InstrumentLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(InstrumentLightReply& a, InstrumentLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentLightReply* New() const final {
    return CreateMaybeMessage<InstrumentLightReply>(nullptr);
  }

  InstrumentLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentLightReply& from);
  void MergeFrom(const InstrumentLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.InstrumentLightReply";
  }
  protected:
  explicit InstrumentLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.InstrumentLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class PassgenerRoomDomeLightReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.PassgenerRoomDomeLightReply) */ {
 public:
  inline PassgenerRoomDomeLightReply() : PassgenerRoomDomeLightReply(nullptr) {}
  virtual ~PassgenerRoomDomeLightReply();
  explicit constexpr PassgenerRoomDomeLightReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PassgenerRoomDomeLightReply(const PassgenerRoomDomeLightReply& from);
  PassgenerRoomDomeLightReply(PassgenerRoomDomeLightReply&& from) noexcept
    : PassgenerRoomDomeLightReply() {
    *this = ::std::move(from);
  }

  inline PassgenerRoomDomeLightReply& operator=(const PassgenerRoomDomeLightReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassgenerRoomDomeLightReply& operator=(PassgenerRoomDomeLightReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PassgenerRoomDomeLightReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PassgenerRoomDomeLightReply* internal_default_instance() {
    return reinterpret_cast<const PassgenerRoomDomeLightReply*>(
               &_PassgenerRoomDomeLightReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(PassgenerRoomDomeLightReply& a, PassgenerRoomDomeLightReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PassgenerRoomDomeLightReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PassgenerRoomDomeLightReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PassgenerRoomDomeLightReply* New() const final {
    return CreateMaybeMessage<PassgenerRoomDomeLightReply>(nullptr);
  }

  PassgenerRoomDomeLightReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PassgenerRoomDomeLightReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PassgenerRoomDomeLightReply& from);
  void MergeFrom(const PassgenerRoomDomeLightReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassgenerRoomDomeLightReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.PassgenerRoomDomeLightReply";
  }
  protected:
  explicit PassgenerRoomDomeLightReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.PassgenerRoomDomeLightReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class ReadingLightDriverSideReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.ReadingLightDriverSideReply) */ {
 public:
  inline ReadingLightDriverSideReply() : ReadingLightDriverSideReply(nullptr) {}
  virtual ~ReadingLightDriverSideReply();
  explicit constexpr ReadingLightDriverSideReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadingLightDriverSideReply(const ReadingLightDriverSideReply& from);
  ReadingLightDriverSideReply(ReadingLightDriverSideReply&& from) noexcept
    : ReadingLightDriverSideReply() {
    *this = ::std::move(from);
  }

  inline ReadingLightDriverSideReply& operator=(const ReadingLightDriverSideReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingLightDriverSideReply& operator=(ReadingLightDriverSideReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadingLightDriverSideReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadingLightDriverSideReply* internal_default_instance() {
    return reinterpret_cast<const ReadingLightDriverSideReply*>(
               &_ReadingLightDriverSideReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ReadingLightDriverSideReply& a, ReadingLightDriverSideReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingLightDriverSideReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadingLightDriverSideReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingLightDriverSideReply* New() const final {
    return CreateMaybeMessage<ReadingLightDriverSideReply>(nullptr);
  }

  ReadingLightDriverSideReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingLightDriverSideReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadingLightDriverSideReply& from);
  void MergeFrom(const ReadingLightDriverSideReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadingLightDriverSideReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.ReadingLightDriverSideReply";
  }
  protected:
  explicit ReadingLightDriverSideReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.ReadingLightDriverSideReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class ReadingLightPassgenerSideReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.ReadingLightPassgenerSideReply) */ {
 public:
  inline ReadingLightPassgenerSideReply() : ReadingLightPassgenerSideReply(nullptr) {}
  virtual ~ReadingLightPassgenerSideReply();
  explicit constexpr ReadingLightPassgenerSideReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadingLightPassgenerSideReply(const ReadingLightPassgenerSideReply& from);
  ReadingLightPassgenerSideReply(ReadingLightPassgenerSideReply&& from) noexcept
    : ReadingLightPassgenerSideReply() {
    *this = ::std::move(from);
  }

  inline ReadingLightPassgenerSideReply& operator=(const ReadingLightPassgenerSideReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingLightPassgenerSideReply& operator=(ReadingLightPassgenerSideReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadingLightPassgenerSideReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadingLightPassgenerSideReply* internal_default_instance() {
    return reinterpret_cast<const ReadingLightPassgenerSideReply*>(
               &_ReadingLightPassgenerSideReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(ReadingLightPassgenerSideReply& a, ReadingLightPassgenerSideReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingLightPassgenerSideReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadingLightPassgenerSideReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingLightPassgenerSideReply* New() const final {
    return CreateMaybeMessage<ReadingLightPassgenerSideReply>(nullptr);
  }

  ReadingLightPassgenerSideReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingLightPassgenerSideReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadingLightPassgenerSideReply& from);
  void MergeFrom(const ReadingLightPassgenerSideReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadingLightPassgenerSideReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.ReadingLightPassgenerSideReply";
  }
  protected:
  explicit ReadingLightPassgenerSideReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.ReadingLightPassgenerSideReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightPowerWindowsSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightPowerWindowsSwitchReply) */ {
 public:
  inline FrontRightPowerWindowsSwitchReply() : FrontRightPowerWindowsSwitchReply(nullptr) {}
  virtual ~FrontRightPowerWindowsSwitchReply();
  explicit constexpr FrontRightPowerWindowsSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightPowerWindowsSwitchReply(const FrontRightPowerWindowsSwitchReply& from);
  FrontRightPowerWindowsSwitchReply(FrontRightPowerWindowsSwitchReply&& from) noexcept
    : FrontRightPowerWindowsSwitchReply() {
    *this = ::std::move(from);
  }

  inline FrontRightPowerWindowsSwitchReply& operator=(const FrontRightPowerWindowsSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightPowerWindowsSwitchReply& operator=(FrontRightPowerWindowsSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightPowerWindowsSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightPowerWindowsSwitchReply* internal_default_instance() {
    return reinterpret_cast<const FrontRightPowerWindowsSwitchReply*>(
               &_FrontRightPowerWindowsSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(FrontRightPowerWindowsSwitchReply& a, FrontRightPowerWindowsSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightPowerWindowsSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightPowerWindowsSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightPowerWindowsSwitchReply* New() const final {
    return CreateMaybeMessage<FrontRightPowerWindowsSwitchReply>(nullptr);
  }

  FrontRightPowerWindowsSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightPowerWindowsSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightPowerWindowsSwitchReply& from);
  void MergeFrom(const FrontRightPowerWindowsSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightPowerWindowsSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightPowerWindowsSwitchReply";
  }
  protected:
  explicit FrontRightPowerWindowsSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightPowerWindowsSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftPowerWindowsSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftPowerWindowsSwitchReply) */ {
 public:
  inline FrontLeftPowerWindowsSwitchReply() : FrontLeftPowerWindowsSwitchReply(nullptr) {}
  virtual ~FrontLeftPowerWindowsSwitchReply();
  explicit constexpr FrontLeftPowerWindowsSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftPowerWindowsSwitchReply(const FrontLeftPowerWindowsSwitchReply& from);
  FrontLeftPowerWindowsSwitchReply(FrontLeftPowerWindowsSwitchReply&& from) noexcept
    : FrontLeftPowerWindowsSwitchReply() {
    *this = ::std::move(from);
  }

  inline FrontLeftPowerWindowsSwitchReply& operator=(const FrontLeftPowerWindowsSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftPowerWindowsSwitchReply& operator=(FrontLeftPowerWindowsSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftPowerWindowsSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftPowerWindowsSwitchReply* internal_default_instance() {
    return reinterpret_cast<const FrontLeftPowerWindowsSwitchReply*>(
               &_FrontLeftPowerWindowsSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(FrontLeftPowerWindowsSwitchReply& a, FrontLeftPowerWindowsSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftPowerWindowsSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftPowerWindowsSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftPowerWindowsSwitchReply* New() const final {
    return CreateMaybeMessage<FrontLeftPowerWindowsSwitchReply>(nullptr);
  }

  FrontLeftPowerWindowsSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftPowerWindowsSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftPowerWindowsSwitchReply& from);
  void MergeFrom(const FrontLeftPowerWindowsSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftPowerWindowsSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftPowerWindowsSwitchReply";
  }
  protected:
  explicit FrontLeftPowerWindowsSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftPowerWindowsSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightPowerWindowsSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightPowerWindowsSwitchReply) */ {
 public:
  inline RearRightPowerWindowsSwitchReply() : RearRightPowerWindowsSwitchReply(nullptr) {}
  virtual ~RearRightPowerWindowsSwitchReply();
  explicit constexpr RearRightPowerWindowsSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightPowerWindowsSwitchReply(const RearRightPowerWindowsSwitchReply& from);
  RearRightPowerWindowsSwitchReply(RearRightPowerWindowsSwitchReply&& from) noexcept
    : RearRightPowerWindowsSwitchReply() {
    *this = ::std::move(from);
  }

  inline RearRightPowerWindowsSwitchReply& operator=(const RearRightPowerWindowsSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightPowerWindowsSwitchReply& operator=(RearRightPowerWindowsSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightPowerWindowsSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightPowerWindowsSwitchReply* internal_default_instance() {
    return reinterpret_cast<const RearRightPowerWindowsSwitchReply*>(
               &_RearRightPowerWindowsSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(RearRightPowerWindowsSwitchReply& a, RearRightPowerWindowsSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightPowerWindowsSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightPowerWindowsSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightPowerWindowsSwitchReply* New() const final {
    return CreateMaybeMessage<RearRightPowerWindowsSwitchReply>(nullptr);
  }

  RearRightPowerWindowsSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightPowerWindowsSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightPowerWindowsSwitchReply& from);
  void MergeFrom(const RearRightPowerWindowsSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightPowerWindowsSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightPowerWindowsSwitchReply";
  }
  protected:
  explicit RearRightPowerWindowsSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightPowerWindowsSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftPowerWindowsSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftPowerWindowsSwitchReply) */ {
 public:
  inline RearLeftPowerWindowsSwitchReply() : RearLeftPowerWindowsSwitchReply(nullptr) {}
  virtual ~RearLeftPowerWindowsSwitchReply();
  explicit constexpr RearLeftPowerWindowsSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftPowerWindowsSwitchReply(const RearLeftPowerWindowsSwitchReply& from);
  RearLeftPowerWindowsSwitchReply(RearLeftPowerWindowsSwitchReply&& from) noexcept
    : RearLeftPowerWindowsSwitchReply() {
    *this = ::std::move(from);
  }

  inline RearLeftPowerWindowsSwitchReply& operator=(const RearLeftPowerWindowsSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftPowerWindowsSwitchReply& operator=(RearLeftPowerWindowsSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftPowerWindowsSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftPowerWindowsSwitchReply* internal_default_instance() {
    return reinterpret_cast<const RearLeftPowerWindowsSwitchReply*>(
               &_RearLeftPowerWindowsSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(RearLeftPowerWindowsSwitchReply& a, RearLeftPowerWindowsSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftPowerWindowsSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftPowerWindowsSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftPowerWindowsSwitchReply* New() const final {
    return CreateMaybeMessage<RearLeftPowerWindowsSwitchReply>(nullptr);
  }

  RearLeftPowerWindowsSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftPowerWindowsSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftPowerWindowsSwitchReply& from);
  void MergeFrom(const RearLeftPowerWindowsSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftPowerWindowsSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftPowerWindowsSwitchReply";
  }
  protected:
  explicit RearLeftPowerWindowsSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftPowerWindowsSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class HornReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.HornReply) */ {
 public:
  inline HornReply() : HornReply(nullptr) {}
  virtual ~HornReply();
  explicit constexpr HornReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HornReply(const HornReply& from);
  HornReply(HornReply&& from) noexcept
    : HornReply() {
    *this = ::std::move(from);
  }

  inline HornReply& operator=(const HornReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HornReply& operator=(HornReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HornReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HornReply* internal_default_instance() {
    return reinterpret_cast<const HornReply*>(
               &_HornReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(HornReply& a, HornReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HornReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HornReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HornReply* New() const final {
    return CreateMaybeMessage<HornReply>(nullptr);
  }

  HornReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HornReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HornReply& from);
  void MergeFrom(const HornReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HornReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.HornReply";
  }
  protected:
  explicit HornReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.HornReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class BuzzerReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.BuzzerReply) */ {
 public:
  inline BuzzerReply() : BuzzerReply(nullptr) {}
  virtual ~BuzzerReply();
  explicit constexpr BuzzerReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuzzerReply(const BuzzerReply& from);
  BuzzerReply(BuzzerReply&& from) noexcept
    : BuzzerReply() {
    *this = ::std::move(from);
  }

  inline BuzzerReply& operator=(const BuzzerReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuzzerReply& operator=(BuzzerReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuzzerReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuzzerReply* internal_default_instance() {
    return reinterpret_cast<const BuzzerReply*>(
               &_BuzzerReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(BuzzerReply& a, BuzzerReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BuzzerReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuzzerReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuzzerReply* New() const final {
    return CreateMaybeMessage<BuzzerReply>(nullptr);
  }

  BuzzerReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuzzerReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuzzerReply& from);
  void MergeFrom(const BuzzerReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuzzerReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.BuzzerReply";
  }
  protected:
  explicit BuzzerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.BuzzerReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class AirConditionerReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.AirConditionerReply) */ {
 public:
  inline AirConditionerReply() : AirConditionerReply(nullptr) {}
  virtual ~AirConditionerReply();
  explicit constexpr AirConditionerReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AirConditionerReply(const AirConditionerReply& from);
  AirConditionerReply(AirConditionerReply&& from) noexcept
    : AirConditionerReply() {
    *this = ::std::move(from);
  }

  inline AirConditionerReply& operator=(const AirConditionerReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirConditionerReply& operator=(AirConditionerReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirConditionerReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AirConditionerReply* internal_default_instance() {
    return reinterpret_cast<const AirConditionerReply*>(
               &_AirConditionerReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(AirConditionerReply& a, AirConditionerReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AirConditionerReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirConditionerReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirConditionerReply* New() const final {
    return CreateMaybeMessage<AirConditionerReply>(nullptr);
  }

  AirConditionerReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirConditionerReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirConditionerReply& from);
  void MergeFrom(const AirConditionerReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirConditionerReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.AirConditionerReply";
  }
  protected:
  explicit AirConditionerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.AirConditionerReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class AirCondTemperatureReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.AirCondTemperatureReply) */ {
 public:
  inline AirCondTemperatureReply() : AirCondTemperatureReply(nullptr) {}
  virtual ~AirCondTemperatureReply();
  explicit constexpr AirCondTemperatureReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AirCondTemperatureReply(const AirCondTemperatureReply& from);
  AirCondTemperatureReply(AirCondTemperatureReply&& from) noexcept
    : AirCondTemperatureReply() {
    *this = ::std::move(from);
  }

  inline AirCondTemperatureReply& operator=(const AirCondTemperatureReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirCondTemperatureReply& operator=(AirCondTemperatureReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirCondTemperatureReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AirCondTemperatureReply* internal_default_instance() {
    return reinterpret_cast<const AirCondTemperatureReply*>(
               &_AirCondTemperatureReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(AirCondTemperatureReply& a, AirCondTemperatureReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AirCondTemperatureReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirCondTemperatureReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirCondTemperatureReply* New() const final {
    return CreateMaybeMessage<AirCondTemperatureReply>(nullptr);
  }

  AirCondTemperatureReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirCondTemperatureReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirCondTemperatureReply& from);
  void MergeFrom(const AirCondTemperatureReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirCondTemperatureReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.AirCondTemperatureReply";
  }
  protected:
  explicit AirCondTemperatureReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemperatureFieldNumber = 1,
  };
  // double temperature = 1;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.AirCondTemperatureReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class AirConditionerFanSpeedReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.AirConditionerFanSpeedReply) */ {
 public:
  inline AirConditionerFanSpeedReply() : AirConditionerFanSpeedReply(nullptr) {}
  virtual ~AirConditionerFanSpeedReply();
  explicit constexpr AirConditionerFanSpeedReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AirConditionerFanSpeedReply(const AirConditionerFanSpeedReply& from);
  AirConditionerFanSpeedReply(AirConditionerFanSpeedReply&& from) noexcept
    : AirConditionerFanSpeedReply() {
    *this = ::std::move(from);
  }

  inline AirConditionerFanSpeedReply& operator=(const AirConditionerFanSpeedReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirConditionerFanSpeedReply& operator=(AirConditionerFanSpeedReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirConditionerFanSpeedReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AirConditionerFanSpeedReply* internal_default_instance() {
    return reinterpret_cast<const AirConditionerFanSpeedReply*>(
               &_AirConditionerFanSpeedReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(AirConditionerFanSpeedReply& a, AirConditionerFanSpeedReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AirConditionerFanSpeedReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirConditionerFanSpeedReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirConditionerFanSpeedReply* New() const final {
    return CreateMaybeMessage<AirConditionerFanSpeedReply>(nullptr);
  }

  AirConditionerFanSpeedReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirConditionerFanSpeedReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirConditionerFanSpeedReply& from);
  void MergeFrom(const AirConditionerFanSpeedReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirConditionerFanSpeedReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.AirConditionerFanSpeedReply";
  }
  protected:
  explicit AirConditionerFanSpeedReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFanSpeedFieldNumber = 1,
  };
  // int32 fanSpeed = 1;
  void clear_fanspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 fanspeed() const;
  void set_fanspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fanspeed() const;
  void _internal_set_fanspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.AirConditionerFanSpeedReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fanspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class HandlingReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.HandlingReply) */ {
 public:
  inline HandlingReply() : HandlingReply(nullptr) {}
  virtual ~HandlingReply();
  explicit constexpr HandlingReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandlingReply(const HandlingReply& from);
  HandlingReply(HandlingReply&& from) noexcept
    : HandlingReply() {
    *this = ::std::move(from);
  }

  inline HandlingReply& operator=(const HandlingReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandlingReply& operator=(HandlingReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandlingReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandlingReply* internal_default_instance() {
    return reinterpret_cast<const HandlingReply*>(
               &_HandlingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(HandlingReply& a, HandlingReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HandlingReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandlingReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandlingReply* New() const final {
    return CreateMaybeMessage<HandlingReply>(nullptr);
  }

  HandlingReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandlingReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandlingReply& from);
  void MergeFrom(const HandlingReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandlingReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.HandlingReply";
  }
  protected:
  explicit HandlingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.HandlingReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class CentralDoorLockSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.CentralDoorLockSwitchReply) */ {
 public:
  inline CentralDoorLockSwitchReply() : CentralDoorLockSwitchReply(nullptr) {}
  virtual ~CentralDoorLockSwitchReply();
  explicit constexpr CentralDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CentralDoorLockSwitchReply(const CentralDoorLockSwitchReply& from);
  CentralDoorLockSwitchReply(CentralDoorLockSwitchReply&& from) noexcept
    : CentralDoorLockSwitchReply() {
    *this = ::std::move(from);
  }

  inline CentralDoorLockSwitchReply& operator=(const CentralDoorLockSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CentralDoorLockSwitchReply& operator=(CentralDoorLockSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CentralDoorLockSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CentralDoorLockSwitchReply* internal_default_instance() {
    return reinterpret_cast<const CentralDoorLockSwitchReply*>(
               &_CentralDoorLockSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CentralDoorLockSwitchReply& a, CentralDoorLockSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CentralDoorLockSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CentralDoorLockSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CentralDoorLockSwitchReply* New() const final {
    return CreateMaybeMessage<CentralDoorLockSwitchReply>(nullptr);
  }

  CentralDoorLockSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CentralDoorLockSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CentralDoorLockSwitchReply& from);
  void MergeFrom(const CentralDoorLockSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CentralDoorLockSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.CentralDoorLockSwitchReply";
  }
  protected:
  explicit CentralDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.CentralDoorLockSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontRightDoorLockSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontRightDoorLockSwitchReply) */ {
 public:
  inline FrontRightDoorLockSwitchReply() : FrontRightDoorLockSwitchReply(nullptr) {}
  virtual ~FrontRightDoorLockSwitchReply();
  explicit constexpr FrontRightDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontRightDoorLockSwitchReply(const FrontRightDoorLockSwitchReply& from);
  FrontRightDoorLockSwitchReply(FrontRightDoorLockSwitchReply&& from) noexcept
    : FrontRightDoorLockSwitchReply() {
    *this = ::std::move(from);
  }

  inline FrontRightDoorLockSwitchReply& operator=(const FrontRightDoorLockSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontRightDoorLockSwitchReply& operator=(FrontRightDoorLockSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontRightDoorLockSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontRightDoorLockSwitchReply* internal_default_instance() {
    return reinterpret_cast<const FrontRightDoorLockSwitchReply*>(
               &_FrontRightDoorLockSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(FrontRightDoorLockSwitchReply& a, FrontRightDoorLockSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontRightDoorLockSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontRightDoorLockSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontRightDoorLockSwitchReply* New() const final {
    return CreateMaybeMessage<FrontRightDoorLockSwitchReply>(nullptr);
  }

  FrontRightDoorLockSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontRightDoorLockSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontRightDoorLockSwitchReply& from);
  void MergeFrom(const FrontRightDoorLockSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontRightDoorLockSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontRightDoorLockSwitchReply";
  }
  protected:
  explicit FrontRightDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontRightDoorLockSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class FrontLeftDoorLockSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.FrontLeftDoorLockSwitchReply) */ {
 public:
  inline FrontLeftDoorLockSwitchReply() : FrontLeftDoorLockSwitchReply(nullptr) {}
  virtual ~FrontLeftDoorLockSwitchReply();
  explicit constexpr FrontLeftDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrontLeftDoorLockSwitchReply(const FrontLeftDoorLockSwitchReply& from);
  FrontLeftDoorLockSwitchReply(FrontLeftDoorLockSwitchReply&& from) noexcept
    : FrontLeftDoorLockSwitchReply() {
    *this = ::std::move(from);
  }

  inline FrontLeftDoorLockSwitchReply& operator=(const FrontLeftDoorLockSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrontLeftDoorLockSwitchReply& operator=(FrontLeftDoorLockSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrontLeftDoorLockSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrontLeftDoorLockSwitchReply* internal_default_instance() {
    return reinterpret_cast<const FrontLeftDoorLockSwitchReply*>(
               &_FrontLeftDoorLockSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(FrontLeftDoorLockSwitchReply& a, FrontLeftDoorLockSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FrontLeftDoorLockSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrontLeftDoorLockSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrontLeftDoorLockSwitchReply* New() const final {
    return CreateMaybeMessage<FrontLeftDoorLockSwitchReply>(nullptr);
  }

  FrontLeftDoorLockSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrontLeftDoorLockSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrontLeftDoorLockSwitchReply& from);
  void MergeFrom(const FrontLeftDoorLockSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrontLeftDoorLockSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.FrontLeftDoorLockSwitchReply";
  }
  protected:
  explicit FrontLeftDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.FrontLeftDoorLockSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearRightDoorLockSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearRightDoorLockSwitchReply) */ {
 public:
  inline RearRightDoorLockSwitchReply() : RearRightDoorLockSwitchReply(nullptr) {}
  virtual ~RearRightDoorLockSwitchReply();
  explicit constexpr RearRightDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearRightDoorLockSwitchReply(const RearRightDoorLockSwitchReply& from);
  RearRightDoorLockSwitchReply(RearRightDoorLockSwitchReply&& from) noexcept
    : RearRightDoorLockSwitchReply() {
    *this = ::std::move(from);
  }

  inline RearRightDoorLockSwitchReply& operator=(const RearRightDoorLockSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearRightDoorLockSwitchReply& operator=(RearRightDoorLockSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearRightDoorLockSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearRightDoorLockSwitchReply* internal_default_instance() {
    return reinterpret_cast<const RearRightDoorLockSwitchReply*>(
               &_RearRightDoorLockSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(RearRightDoorLockSwitchReply& a, RearRightDoorLockSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearRightDoorLockSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearRightDoorLockSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearRightDoorLockSwitchReply* New() const final {
    return CreateMaybeMessage<RearRightDoorLockSwitchReply>(nullptr);
  }

  RearRightDoorLockSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearRightDoorLockSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearRightDoorLockSwitchReply& from);
  void MergeFrom(const RearRightDoorLockSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearRightDoorLockSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearRightDoorLockSwitchReply";
  }
  protected:
  explicit RearRightDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearRightDoorLockSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// -------------------------------------------------------------------

class RearLeftDoorLockSwitchReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnityAPI.RearLeftDoorLockSwitchReply) */ {
 public:
  inline RearLeftDoorLockSwitchReply() : RearLeftDoorLockSwitchReply(nullptr) {}
  virtual ~RearLeftDoorLockSwitchReply();
  explicit constexpr RearLeftDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearLeftDoorLockSwitchReply(const RearLeftDoorLockSwitchReply& from);
  RearLeftDoorLockSwitchReply(RearLeftDoorLockSwitchReply&& from) noexcept
    : RearLeftDoorLockSwitchReply() {
    *this = ::std::move(from);
  }

  inline RearLeftDoorLockSwitchReply& operator=(const RearLeftDoorLockSwitchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearLeftDoorLockSwitchReply& operator=(RearLeftDoorLockSwitchReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RearLeftDoorLockSwitchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearLeftDoorLockSwitchReply* internal_default_instance() {
    return reinterpret_cast<const RearLeftDoorLockSwitchReply*>(
               &_RearLeftDoorLockSwitchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(RearLeftDoorLockSwitchReply& a, RearLeftDoorLockSwitchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RearLeftDoorLockSwitchReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearLeftDoorLockSwitchReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearLeftDoorLockSwitchReply* New() const final {
    return CreateMaybeMessage<RearLeftDoorLockSwitchReply>(nullptr);
  }

  RearLeftDoorLockSwitchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearLeftDoorLockSwitchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearLeftDoorLockSwitchReply& from);
  void MergeFrom(const RearLeftDoorLockSwitchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearLeftDoorLockSwitchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnityAPI.RearLeftDoorLockSwitchReply";
  }
  protected:
  explicit RearLeftDoorLockSwitchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UnityAPI_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnityAPI.RearLeftDoorLockSwitchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UnityAPI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrontLowLightRequest

// bool setMode = 1;
inline void FrontLowLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontLowLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontLowLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLowLightRequest.setMode)
  return _internal_setmode();
}
inline void FrontLowLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontLowLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLowLightRequest.setMode)
}

// bool flag = 2;
inline void FrontLowLightRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontLowLightRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontLowLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLowLightRequest.flag)
  return _internal_flag();
}
inline void FrontLowLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontLowLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLowLightRequest.flag)
}

// -------------------------------------------------------------------

// FrontHighLightRequest

// bool setMode = 1;
inline void FrontHighLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontHighLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontHighLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontHighLightRequest.setMode)
  return _internal_setmode();
}
inline void FrontHighLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontHighLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontHighLightRequest.setMode)
}

// bool flag = 2;
inline void FrontHighLightRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontHighLightRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontHighLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontHighLightRequest.flag)
  return _internal_flag();
}
inline void FrontHighLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontHighLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontHighLightRequest.flag)
}

// -------------------------------------------------------------------

// RearLightRequest

// bool setMode = 1;
inline void RearLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLightRequest.setMode)
  return _internal_setmode();
}
inline void RearLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLightRequest.setMode)
}

// bool flag = 2;
inline void RearLightRequest::clear_flag() {
  flag_ = false;
}
inline bool RearLightRequest::_internal_flag() const {
  return flag_;
}
inline bool RearLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLightRequest.flag)
  return _internal_flag();
}
inline void RearLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLightRequest.flag)
}

// -------------------------------------------------------------------

// FrontDaytimeLightRequest

// bool setMode = 1;
inline void FrontDaytimeLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontDaytimeLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontDaytimeLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontDaytimeLightRequest.setMode)
  return _internal_setmode();
}
inline void FrontDaytimeLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontDaytimeLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontDaytimeLightRequest.setMode)
}

// bool flag = 2;
inline void FrontDaytimeLightRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontDaytimeLightRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontDaytimeLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontDaytimeLightRequest.flag)
  return _internal_flag();
}
inline void FrontDaytimeLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontDaytimeLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontDaytimeLightRequest.flag)
}

// -------------------------------------------------------------------

// BrakeLightRequest

// bool setMode = 1;
inline void BrakeLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool BrakeLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool BrakeLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.BrakeLightRequest.setMode)
  return _internal_setmode();
}
inline void BrakeLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void BrakeLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.BrakeLightRequest.setMode)
}

// bool flag = 2;
inline void BrakeLightRequest::clear_flag() {
  flag_ = false;
}
inline bool BrakeLightRequest::_internal_flag() const {
  return flag_;
}
inline bool BrakeLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.BrakeLightRequest.flag)
  return _internal_flag();
}
inline void BrakeLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void BrakeLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.BrakeLightRequest.flag)
}

// -------------------------------------------------------------------

// ReverseLightRequest

// bool setMode = 1;
inline void ReverseLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool ReverseLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool ReverseLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReverseLightRequest.setMode)
  return _internal_setmode();
}
inline void ReverseLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void ReverseLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReverseLightRequest.setMode)
}

// bool flag = 2;
inline void ReverseLightRequest::clear_flag() {
  flag_ = false;
}
inline bool ReverseLightRequest::_internal_flag() const {
  return flag_;
}
inline bool ReverseLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReverseLightRequest.flag)
  return _internal_flag();
}
inline void ReverseLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void ReverseLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReverseLightRequest.flag)
}

// -------------------------------------------------------------------

// FrontFogLightRequest

// bool setMode = 1;
inline void FrontFogLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontFogLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontFogLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontFogLightRequest.setMode)
  return _internal_setmode();
}
inline void FrontFogLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontFogLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontFogLightRequest.setMode)
}

// bool flag = 2;
inline void FrontFogLightRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontFogLightRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontFogLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontFogLightRequest.flag)
  return _internal_flag();
}
inline void FrontFogLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontFogLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontFogLightRequest.flag)
}

// -------------------------------------------------------------------

// RearFogLightRequest

// bool setMode = 1;
inline void RearFogLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearFogLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearFogLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearFogLightRequest.setMode)
  return _internal_setmode();
}
inline void RearFogLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearFogLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearFogLightRequest.setMode)
}

// bool flag = 2;
inline void RearFogLightRequest::clear_flag() {
  flag_ = false;
}
inline bool RearFogLightRequest::_internal_flag() const {
  return flag_;
}
inline bool RearFogLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearFogLightRequest.flag)
  return _internal_flag();
}
inline void RearFogLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearFogLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearFogLightRequest.flag)
}

// -------------------------------------------------------------------

// ClearanceLampRequest

// bool setMode = 1;
inline void ClearanceLampRequest::clear_setmode() {
  setmode_ = false;
}
inline bool ClearanceLampRequest::_internal_setmode() const {
  return setmode_;
}
inline bool ClearanceLampRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ClearanceLampRequest.setMode)
  return _internal_setmode();
}
inline void ClearanceLampRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void ClearanceLampRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ClearanceLampRequest.setMode)
}

// bool flag = 2;
inline void ClearanceLampRequest::clear_flag() {
  flag_ = false;
}
inline bool ClearanceLampRequest::_internal_flag() const {
  return flag_;
}
inline bool ClearanceLampRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ClearanceLampRequest.flag)
  return _internal_flag();
}
inline void ClearanceLampRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void ClearanceLampRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ClearanceLampRequest.flag)
}

// -------------------------------------------------------------------

// FrontLeftBlinkerLightRequest

// bool setMode = 1;
inline void FrontLeftBlinkerLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontLeftBlinkerLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontLeftBlinkerLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftBlinkerLightRequest.setMode)
  return _internal_setmode();
}
inline void FrontLeftBlinkerLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontLeftBlinkerLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftBlinkerLightRequest.setMode)
}

// bool flag = 2;
inline void FrontLeftBlinkerLightRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontLeftBlinkerLightRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontLeftBlinkerLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftBlinkerLightRequest.flag)
  return _internal_flag();
}
inline void FrontLeftBlinkerLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontLeftBlinkerLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftBlinkerLightRequest.flag)
}

// -------------------------------------------------------------------

// FrontRightBlinkerLightRequest

// bool setMode = 1;
inline void FrontRightBlinkerLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontRightBlinkerLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontRightBlinkerLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightBlinkerLightRequest.setMode)
  return _internal_setmode();
}
inline void FrontRightBlinkerLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontRightBlinkerLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightBlinkerLightRequest.setMode)
}

// bool flag = 2;
inline void FrontRightBlinkerLightRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontRightBlinkerLightRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontRightBlinkerLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightBlinkerLightRequest.flag)
  return _internal_flag();
}
inline void FrontRightBlinkerLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontRightBlinkerLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightBlinkerLightRequest.flag)
}

// -------------------------------------------------------------------

// RearLeftBlinkerLightRequest

// bool setMode = 1;
inline void RearLeftBlinkerLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearLeftBlinkerLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearLeftBlinkerLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftBlinkerLightRequest.setMode)
  return _internal_setmode();
}
inline void RearLeftBlinkerLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearLeftBlinkerLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftBlinkerLightRequest.setMode)
}

// bool flag = 2;
inline void RearLeftBlinkerLightRequest::clear_flag() {
  flag_ = false;
}
inline bool RearLeftBlinkerLightRequest::_internal_flag() const {
  return flag_;
}
inline bool RearLeftBlinkerLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftBlinkerLightRequest.flag)
  return _internal_flag();
}
inline void RearLeftBlinkerLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearLeftBlinkerLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftBlinkerLightRequest.flag)
}

// -------------------------------------------------------------------

// RearRightBlinkerLightRequest

// bool setMode = 1;
inline void RearRightBlinkerLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearRightBlinkerLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearRightBlinkerLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightBlinkerLightRequest.setMode)
  return _internal_setmode();
}
inline void RearRightBlinkerLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearRightBlinkerLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightBlinkerLightRequest.setMode)
}

// bool flag = 2;
inline void RearRightBlinkerLightRequest::clear_flag() {
  flag_ = false;
}
inline bool RearRightBlinkerLightRequest::_internal_flag() const {
  return flag_;
}
inline bool RearRightBlinkerLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightBlinkerLightRequest.flag)
  return _internal_flag();
}
inline void RearRightBlinkerLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearRightBlinkerLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightBlinkerLightRequest.flag)
}

// -------------------------------------------------------------------

// FrontWiperRequest

// bool setMode = 1;
inline void FrontWiperRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontWiperRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontWiperRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontWiperRequest.setMode)
  return _internal_setmode();
}
inline void FrontWiperRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontWiperRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontWiperRequest.setMode)
}

// bool flag = 2;
inline void FrontWiperRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontWiperRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontWiperRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontWiperRequest.flag)
  return _internal_flag();
}
inline void FrontWiperRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontWiperRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontWiperRequest.flag)
}

// -------------------------------------------------------------------

// RearWiperRequest

// bool setMode = 1;
inline void RearWiperRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearWiperRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearWiperRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearWiperRequest.setMode)
  return _internal_setmode();
}
inline void RearWiperRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearWiperRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearWiperRequest.setMode)
}

// bool flag = 2;
inline void RearWiperRequest::clear_flag() {
  flag_ = false;
}
inline bool RearWiperRequest::_internal_flag() const {
  return flag_;
}
inline bool RearWiperRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearWiperRequest.flag)
  return _internal_flag();
}
inline void RearWiperRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearWiperRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearWiperRequest.flag)
}

// -------------------------------------------------------------------

// LeftSideMirrorRequest

// bool setMode = 1;
inline void LeftSideMirrorRequest::clear_setmode() {
  setmode_ = false;
}
inline bool LeftSideMirrorRequest::_internal_setmode() const {
  return setmode_;
}
inline bool LeftSideMirrorRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.LeftSideMirrorRequest.setMode)
  return _internal_setmode();
}
inline void LeftSideMirrorRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void LeftSideMirrorRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.LeftSideMirrorRequest.setMode)
}

// double angle = 2;
inline void LeftSideMirrorRequest::clear_angle() {
  angle_ = 0;
}
inline double LeftSideMirrorRequest::_internal_angle() const {
  return angle_;
}
inline double LeftSideMirrorRequest::angle() const {
  // @@protoc_insertion_point(field_get:UnityAPI.LeftSideMirrorRequest.angle)
  return _internal_angle();
}
inline void LeftSideMirrorRequest::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void LeftSideMirrorRequest::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:UnityAPI.LeftSideMirrorRequest.angle)
}

// -------------------------------------------------------------------

// RightSideMirrorRequest

// bool setMode = 1;
inline void RightSideMirrorRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RightSideMirrorRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RightSideMirrorRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RightSideMirrorRequest.setMode)
  return _internal_setmode();
}
inline void RightSideMirrorRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RightSideMirrorRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RightSideMirrorRequest.setMode)
}

// double angle = 2;
inline void RightSideMirrorRequest::clear_angle() {
  angle_ = 0;
}
inline double RightSideMirrorRequest::_internal_angle() const {
  return angle_;
}
inline double RightSideMirrorRequest::angle() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RightSideMirrorRequest.angle)
  return _internal_angle();
}
inline void RightSideMirrorRequest::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void RightSideMirrorRequest::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RightSideMirrorRequest.angle)
}

// -------------------------------------------------------------------

// FrontRightDoorRequest

// bool setMode = 1;
inline void FrontRightDoorRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontRightDoorRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontRightDoorRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightDoorRequest.setMode)
  return _internal_setmode();
}
inline void FrontRightDoorRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontRightDoorRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightDoorRequest.setMode)
}

// bool flag = 2;
inline void FrontRightDoorRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontRightDoorRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontRightDoorRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightDoorRequest.flag)
  return _internal_flag();
}
inline void FrontRightDoorRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontRightDoorRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightDoorRequest.flag)
}

// -------------------------------------------------------------------

// FrontLeftDoorRequest

// bool setMode = 1;
inline void FrontLeftDoorRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontLeftDoorRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontLeftDoorRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftDoorRequest.setMode)
  return _internal_setmode();
}
inline void FrontLeftDoorRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontLeftDoorRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftDoorRequest.setMode)
}

// bool flag = 2;
inline void FrontLeftDoorRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontLeftDoorRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontLeftDoorRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftDoorRequest.flag)
  return _internal_flag();
}
inline void FrontLeftDoorRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontLeftDoorRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftDoorRequest.flag)
}

// -------------------------------------------------------------------

// RearRightDoorRequest

// bool setMode = 1;
inline void RearRightDoorRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearRightDoorRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearRightDoorRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightDoorRequest.setMode)
  return _internal_setmode();
}
inline void RearRightDoorRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearRightDoorRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightDoorRequest.setMode)
}

// bool flag = 2;
inline void RearRightDoorRequest::clear_flag() {
  flag_ = false;
}
inline bool RearRightDoorRequest::_internal_flag() const {
  return flag_;
}
inline bool RearRightDoorRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightDoorRequest.flag)
  return _internal_flag();
}
inline void RearRightDoorRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearRightDoorRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightDoorRequest.flag)
}

// -------------------------------------------------------------------

// RearLeftDoorRequest

// bool setMode = 1;
inline void RearLeftDoorRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearLeftDoorRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearLeftDoorRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftDoorRequest.setMode)
  return _internal_setmode();
}
inline void RearLeftDoorRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearLeftDoorRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftDoorRequest.setMode)
}

// bool flag = 2;
inline void RearLeftDoorRequest::clear_flag() {
  flag_ = false;
}
inline bool RearLeftDoorRequest::_internal_flag() const {
  return flag_;
}
inline bool RearLeftDoorRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftDoorRequest.flag)
  return _internal_flag();
}
inline void RearLeftDoorRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearLeftDoorRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftDoorRequest.flag)
}

// -------------------------------------------------------------------

// TrunkRequest

// bool setMode = 1;
inline void TrunkRequest::clear_setmode() {
  setmode_ = false;
}
inline bool TrunkRequest::_internal_setmode() const {
  return setmode_;
}
inline bool TrunkRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.TrunkRequest.setMode)
  return _internal_setmode();
}
inline void TrunkRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void TrunkRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.TrunkRequest.setMode)
}

// bool flag = 2;
inline void TrunkRequest::clear_flag() {
  flag_ = false;
}
inline bool TrunkRequest::_internal_flag() const {
  return flag_;
}
inline bool TrunkRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.TrunkRequest.flag)
  return _internal_flag();
}
inline void TrunkRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void TrunkRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.TrunkRequest.flag)
}

// -------------------------------------------------------------------

// SunRoofRequest

// bool setMode = 1;
inline void SunRoofRequest::clear_setmode() {
  setmode_ = false;
}
inline bool SunRoofRequest::_internal_setmode() const {
  return setmode_;
}
inline bool SunRoofRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.SunRoofRequest.setMode)
  return _internal_setmode();
}
inline void SunRoofRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void SunRoofRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.SunRoofRequest.setMode)
}

// bool flag = 2;
inline void SunRoofRequest::clear_flag() {
  flag_ = false;
}
inline bool SunRoofRequest::_internal_flag() const {
  return flag_;
}
inline bool SunRoofRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.SunRoofRequest.flag)
  return _internal_flag();
}
inline void SunRoofRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void SunRoofRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.SunRoofRequest.flag)
}

// -------------------------------------------------------------------

// FrontRightPowerWindowsRequest

// bool setMode = 1;
inline void FrontRightPowerWindowsRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontRightPowerWindowsRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontRightPowerWindowsRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightPowerWindowsRequest.setMode)
  return _internal_setmode();
}
inline void FrontRightPowerWindowsRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontRightPowerWindowsRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightPowerWindowsRequest.setMode)
}

// double highLevel = 2;
inline void FrontRightPowerWindowsRequest::clear_highlevel() {
  highlevel_ = 0;
}
inline double FrontRightPowerWindowsRequest::_internal_highlevel() const {
  return highlevel_;
}
inline double FrontRightPowerWindowsRequest::highlevel() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightPowerWindowsRequest.highLevel)
  return _internal_highlevel();
}
inline void FrontRightPowerWindowsRequest::_internal_set_highlevel(double value) {
  
  highlevel_ = value;
}
inline void FrontRightPowerWindowsRequest::set_highlevel(double value) {
  _internal_set_highlevel(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightPowerWindowsRequest.highLevel)
}

// -------------------------------------------------------------------

// FrontLeftPowerWindowsRequest

// bool setMode = 1;
inline void FrontLeftPowerWindowsRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontLeftPowerWindowsRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontLeftPowerWindowsRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftPowerWindowsRequest.setMode)
  return _internal_setmode();
}
inline void FrontLeftPowerWindowsRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontLeftPowerWindowsRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftPowerWindowsRequest.setMode)
}

// double highLevel = 2;
inline void FrontLeftPowerWindowsRequest::clear_highlevel() {
  highlevel_ = 0;
}
inline double FrontLeftPowerWindowsRequest::_internal_highlevel() const {
  return highlevel_;
}
inline double FrontLeftPowerWindowsRequest::highlevel() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftPowerWindowsRequest.highLevel)
  return _internal_highlevel();
}
inline void FrontLeftPowerWindowsRequest::_internal_set_highlevel(double value) {
  
  highlevel_ = value;
}
inline void FrontLeftPowerWindowsRequest::set_highlevel(double value) {
  _internal_set_highlevel(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftPowerWindowsRequest.highLevel)
}

// -------------------------------------------------------------------

// RearRightPowerWindowsRequest

// bool setMode = 1;
inline void RearRightPowerWindowsRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearRightPowerWindowsRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearRightPowerWindowsRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightPowerWindowsRequest.setMode)
  return _internal_setmode();
}
inline void RearRightPowerWindowsRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearRightPowerWindowsRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightPowerWindowsRequest.setMode)
}

// double highLevel = 2;
inline void RearRightPowerWindowsRequest::clear_highlevel() {
  highlevel_ = 0;
}
inline double RearRightPowerWindowsRequest::_internal_highlevel() const {
  return highlevel_;
}
inline double RearRightPowerWindowsRequest::highlevel() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightPowerWindowsRequest.highLevel)
  return _internal_highlevel();
}
inline void RearRightPowerWindowsRequest::_internal_set_highlevel(double value) {
  
  highlevel_ = value;
}
inline void RearRightPowerWindowsRequest::set_highlevel(double value) {
  _internal_set_highlevel(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightPowerWindowsRequest.highLevel)
}

// -------------------------------------------------------------------

// RearLeftPowerWindowsRequest

// bool setMode = 1;
inline void RearLeftPowerWindowsRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearLeftPowerWindowsRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearLeftPowerWindowsRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftPowerWindowsRequest.setMode)
  return _internal_setmode();
}
inline void RearLeftPowerWindowsRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearLeftPowerWindowsRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftPowerWindowsRequest.setMode)
}

// double highLevel = 2;
inline void RearLeftPowerWindowsRequest::clear_highlevel() {
  highlevel_ = 0;
}
inline double RearLeftPowerWindowsRequest::_internal_highlevel() const {
  return highlevel_;
}
inline double RearLeftPowerWindowsRequest::highlevel() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftPowerWindowsRequest.highLevel)
  return _internal_highlevel();
}
inline void RearLeftPowerWindowsRequest::_internal_set_highlevel(double value) {
  
  highlevel_ = value;
}
inline void RearLeftPowerWindowsRequest::set_highlevel(double value) {
  _internal_set_highlevel(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftPowerWindowsRequest.highLevel)
}

// -------------------------------------------------------------------

// SideMirrorSwitchRequest

// bool setMode = 1;
inline void SideMirrorSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool SideMirrorSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool SideMirrorSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.SideMirrorSwitchRequest.setMode)
  return _internal_setmode();
}
inline void SideMirrorSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void SideMirrorSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.SideMirrorSwitchRequest.setMode)
}

// bool flag = 2;
inline void SideMirrorSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool SideMirrorSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool SideMirrorSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.SideMirrorSwitchRequest.flag)
  return _internal_flag();
}
inline void SideMirrorSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void SideMirrorSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.SideMirrorSwitchRequest.flag)
}

// -------------------------------------------------------------------

// InstrumentLightRequest

// bool setMode = 1;
inline void InstrumentLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool InstrumentLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool InstrumentLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.InstrumentLightRequest.setMode)
  return _internal_setmode();
}
inline void InstrumentLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void InstrumentLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.InstrumentLightRequest.setMode)
}

// bool flag = 2;
inline void InstrumentLightRequest::clear_flag() {
  flag_ = false;
}
inline bool InstrumentLightRequest::_internal_flag() const {
  return flag_;
}
inline bool InstrumentLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.InstrumentLightRequest.flag)
  return _internal_flag();
}
inline void InstrumentLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void InstrumentLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.InstrumentLightRequest.flag)
}

// -------------------------------------------------------------------

// PassgenerRoomDomeLightRequest

// bool setMode = 1;
inline void PassgenerRoomDomeLightRequest::clear_setmode() {
  setmode_ = false;
}
inline bool PassgenerRoomDomeLightRequest::_internal_setmode() const {
  return setmode_;
}
inline bool PassgenerRoomDomeLightRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.PassgenerRoomDomeLightRequest.setMode)
  return _internal_setmode();
}
inline void PassgenerRoomDomeLightRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void PassgenerRoomDomeLightRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.PassgenerRoomDomeLightRequest.setMode)
}

// bool flag = 2;
inline void PassgenerRoomDomeLightRequest::clear_flag() {
  flag_ = false;
}
inline bool PassgenerRoomDomeLightRequest::_internal_flag() const {
  return flag_;
}
inline bool PassgenerRoomDomeLightRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.PassgenerRoomDomeLightRequest.flag)
  return _internal_flag();
}
inline void PassgenerRoomDomeLightRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void PassgenerRoomDomeLightRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.PassgenerRoomDomeLightRequest.flag)
}

// -------------------------------------------------------------------

// ReadingLightDriverSideRequest

// bool setMode = 1;
inline void ReadingLightDriverSideRequest::clear_setmode() {
  setmode_ = false;
}
inline bool ReadingLightDriverSideRequest::_internal_setmode() const {
  return setmode_;
}
inline bool ReadingLightDriverSideRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReadingLightDriverSideRequest.setMode)
  return _internal_setmode();
}
inline void ReadingLightDriverSideRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void ReadingLightDriverSideRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReadingLightDriverSideRequest.setMode)
}

// bool flag = 2;
inline void ReadingLightDriverSideRequest::clear_flag() {
  flag_ = false;
}
inline bool ReadingLightDriverSideRequest::_internal_flag() const {
  return flag_;
}
inline bool ReadingLightDriverSideRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReadingLightDriverSideRequest.flag)
  return _internal_flag();
}
inline void ReadingLightDriverSideRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void ReadingLightDriverSideRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReadingLightDriverSideRequest.flag)
}

// -------------------------------------------------------------------

// ReadingLightPassgenerSideRequest

// bool setMode = 1;
inline void ReadingLightPassgenerSideRequest::clear_setmode() {
  setmode_ = false;
}
inline bool ReadingLightPassgenerSideRequest::_internal_setmode() const {
  return setmode_;
}
inline bool ReadingLightPassgenerSideRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReadingLightPassgenerSideRequest.setMode)
  return _internal_setmode();
}
inline void ReadingLightPassgenerSideRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void ReadingLightPassgenerSideRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReadingLightPassgenerSideRequest.setMode)
}

// bool flag = 2;
inline void ReadingLightPassgenerSideRequest::clear_flag() {
  flag_ = false;
}
inline bool ReadingLightPassgenerSideRequest::_internal_flag() const {
  return flag_;
}
inline bool ReadingLightPassgenerSideRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReadingLightPassgenerSideRequest.flag)
  return _internal_flag();
}
inline void ReadingLightPassgenerSideRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void ReadingLightPassgenerSideRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReadingLightPassgenerSideRequest.flag)
}

// -------------------------------------------------------------------

// FrontRightPowerWindowsSwitchRequest

// bool setMode = 1;
inline void FrontRightPowerWindowsSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontRightPowerWindowsSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontRightPowerWindowsSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightPowerWindowsSwitchRequest.setMode)
  return _internal_setmode();
}
inline void FrontRightPowerWindowsSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontRightPowerWindowsSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightPowerWindowsSwitchRequest.setMode)
}

// bool flag = 2;
inline void FrontRightPowerWindowsSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontRightPowerWindowsSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontRightPowerWindowsSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightPowerWindowsSwitchRequest.flag)
  return _internal_flag();
}
inline void FrontRightPowerWindowsSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontRightPowerWindowsSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightPowerWindowsSwitchRequest.flag)
}

// -------------------------------------------------------------------

// FrontLeftPowerWindowsSwitchRequest

// bool setMode = 1;
inline void FrontLeftPowerWindowsSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontLeftPowerWindowsSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontLeftPowerWindowsSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftPowerWindowsSwitchRequest.setMode)
  return _internal_setmode();
}
inline void FrontLeftPowerWindowsSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontLeftPowerWindowsSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftPowerWindowsSwitchRequest.setMode)
}

// bool flag = 2;
inline void FrontLeftPowerWindowsSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontLeftPowerWindowsSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontLeftPowerWindowsSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftPowerWindowsSwitchRequest.flag)
  return _internal_flag();
}
inline void FrontLeftPowerWindowsSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontLeftPowerWindowsSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftPowerWindowsSwitchRequest.flag)
}

// -------------------------------------------------------------------

// RearRightPowerWindowsSwitchRequest

// bool setMode = 1;
inline void RearRightPowerWindowsSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearRightPowerWindowsSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearRightPowerWindowsSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightPowerWindowsSwitchRequest.setMode)
  return _internal_setmode();
}
inline void RearRightPowerWindowsSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearRightPowerWindowsSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightPowerWindowsSwitchRequest.setMode)
}

// bool flag = 2;
inline void RearRightPowerWindowsSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool RearRightPowerWindowsSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool RearRightPowerWindowsSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightPowerWindowsSwitchRequest.flag)
  return _internal_flag();
}
inline void RearRightPowerWindowsSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearRightPowerWindowsSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightPowerWindowsSwitchRequest.flag)
}

// -------------------------------------------------------------------

// RearLeftPowerWindowsSwitchRequest

// bool setMode = 1;
inline void RearLeftPowerWindowsSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearLeftPowerWindowsSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearLeftPowerWindowsSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftPowerWindowsSwitchRequest.setMode)
  return _internal_setmode();
}
inline void RearLeftPowerWindowsSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearLeftPowerWindowsSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftPowerWindowsSwitchRequest.setMode)
}

// bool flag = 2;
inline void RearLeftPowerWindowsSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool RearLeftPowerWindowsSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool RearLeftPowerWindowsSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftPowerWindowsSwitchRequest.flag)
  return _internal_flag();
}
inline void RearLeftPowerWindowsSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearLeftPowerWindowsSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftPowerWindowsSwitchRequest.flag)
}

// -------------------------------------------------------------------

// HornRequest

// bool setMode = 1;
inline void HornRequest::clear_setmode() {
  setmode_ = false;
}
inline bool HornRequest::_internal_setmode() const {
  return setmode_;
}
inline bool HornRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.HornRequest.setMode)
  return _internal_setmode();
}
inline void HornRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void HornRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.HornRequest.setMode)
}

// bool flag = 2;
inline void HornRequest::clear_flag() {
  flag_ = false;
}
inline bool HornRequest::_internal_flag() const {
  return flag_;
}
inline bool HornRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.HornRequest.flag)
  return _internal_flag();
}
inline void HornRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void HornRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.HornRequest.flag)
}

// -------------------------------------------------------------------

// BuzzerRequest

// bool setMode = 1;
inline void BuzzerRequest::clear_setmode() {
  setmode_ = false;
}
inline bool BuzzerRequest::_internal_setmode() const {
  return setmode_;
}
inline bool BuzzerRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.BuzzerRequest.setMode)
  return _internal_setmode();
}
inline void BuzzerRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void BuzzerRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.BuzzerRequest.setMode)
}

// bool flag = 2;
inline void BuzzerRequest::clear_flag() {
  flag_ = false;
}
inline bool BuzzerRequest::_internal_flag() const {
  return flag_;
}
inline bool BuzzerRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.BuzzerRequest.flag)
  return _internal_flag();
}
inline void BuzzerRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void BuzzerRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.BuzzerRequest.flag)
}

// -------------------------------------------------------------------

// AirConditionerRequest

// bool setMode = 1;
inline void AirConditionerRequest::clear_setmode() {
  setmode_ = false;
}
inline bool AirConditionerRequest::_internal_setmode() const {
  return setmode_;
}
inline bool AirConditionerRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirConditionerRequest.setMode)
  return _internal_setmode();
}
inline void AirConditionerRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void AirConditionerRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirConditionerRequest.setMode)
}

// bool flag = 2;
inline void AirConditionerRequest::clear_flag() {
  flag_ = false;
}
inline bool AirConditionerRequest::_internal_flag() const {
  return flag_;
}
inline bool AirConditionerRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirConditionerRequest.flag)
  return _internal_flag();
}
inline void AirConditionerRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void AirConditionerRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirConditionerRequest.flag)
}

// -------------------------------------------------------------------

// AirCondTemperatureRequest

// bool setMode = 1;
inline void AirCondTemperatureRequest::clear_setmode() {
  setmode_ = false;
}
inline bool AirCondTemperatureRequest::_internal_setmode() const {
  return setmode_;
}
inline bool AirCondTemperatureRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirCondTemperatureRequest.setMode)
  return _internal_setmode();
}
inline void AirCondTemperatureRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void AirCondTemperatureRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirCondTemperatureRequest.setMode)
}

// double temperature = 2;
inline void AirCondTemperatureRequest::clear_temperature() {
  temperature_ = 0;
}
inline double AirCondTemperatureRequest::_internal_temperature() const {
  return temperature_;
}
inline double AirCondTemperatureRequest::temperature() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirCondTemperatureRequest.temperature)
  return _internal_temperature();
}
inline void AirCondTemperatureRequest::_internal_set_temperature(double value) {
  
  temperature_ = value;
}
inline void AirCondTemperatureRequest::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirCondTemperatureRequest.temperature)
}

// -------------------------------------------------------------------

// AirConditionerFanSpeedRequest

// bool setMode = 1;
inline void AirConditionerFanSpeedRequest::clear_setmode() {
  setmode_ = false;
}
inline bool AirConditionerFanSpeedRequest::_internal_setmode() const {
  return setmode_;
}
inline bool AirConditionerFanSpeedRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirConditionerFanSpeedRequest.setMode)
  return _internal_setmode();
}
inline void AirConditionerFanSpeedRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void AirConditionerFanSpeedRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirConditionerFanSpeedRequest.setMode)
}

// int32 fanSpeed = 2;
inline void AirConditionerFanSpeedRequest::clear_fanspeed() {
  fanspeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AirConditionerFanSpeedRequest::_internal_fanspeed() const {
  return fanspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AirConditionerFanSpeedRequest::fanspeed() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirConditionerFanSpeedRequest.fanSpeed)
  return _internal_fanspeed();
}
inline void AirConditionerFanSpeedRequest::_internal_set_fanspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fanspeed_ = value;
}
inline void AirConditionerFanSpeedRequest::set_fanspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fanspeed(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirConditionerFanSpeedRequest.fanSpeed)
}

// -------------------------------------------------------------------

// HandlingRequest

// bool setMode = 1;
inline void HandlingRequest::clear_setmode() {
  setmode_ = false;
}
inline bool HandlingRequest::_internal_setmode() const {
  return setmode_;
}
inline bool HandlingRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.HandlingRequest.setMode)
  return _internal_setmode();
}
inline void HandlingRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void HandlingRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.HandlingRequest.setMode)
}

// bool flag = 2;
inline void HandlingRequest::clear_flag() {
  flag_ = false;
}
inline bool HandlingRequest::_internal_flag() const {
  return flag_;
}
inline bool HandlingRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.HandlingRequest.flag)
  return _internal_flag();
}
inline void HandlingRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void HandlingRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.HandlingRequest.flag)
}

// -------------------------------------------------------------------

// CentralDoorLockSwitchRequest

// bool setMode = 1;
inline void CentralDoorLockSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool CentralDoorLockSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool CentralDoorLockSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.CentralDoorLockSwitchRequest.setMode)
  return _internal_setmode();
}
inline void CentralDoorLockSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void CentralDoorLockSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.CentralDoorLockSwitchRequest.setMode)
}

// bool flag = 2;
inline void CentralDoorLockSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool CentralDoorLockSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool CentralDoorLockSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.CentralDoorLockSwitchRequest.flag)
  return _internal_flag();
}
inline void CentralDoorLockSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void CentralDoorLockSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.CentralDoorLockSwitchRequest.flag)
}

// -------------------------------------------------------------------

// FrontRightDoorLockSwitchRequest

// bool setMode = 1;
inline void FrontRightDoorLockSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontRightDoorLockSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontRightDoorLockSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightDoorLockSwitchRequest.setMode)
  return _internal_setmode();
}
inline void FrontRightDoorLockSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontRightDoorLockSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightDoorLockSwitchRequest.setMode)
}

// bool flag = 2;
inline void FrontRightDoorLockSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontRightDoorLockSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontRightDoorLockSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightDoorLockSwitchRequest.flag)
  return _internal_flag();
}
inline void FrontRightDoorLockSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontRightDoorLockSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightDoorLockSwitchRequest.flag)
}

// -------------------------------------------------------------------

// FrontLeftDoorLockSwitchRequest

// bool setMode = 1;
inline void FrontLeftDoorLockSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool FrontLeftDoorLockSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool FrontLeftDoorLockSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftDoorLockSwitchRequest.setMode)
  return _internal_setmode();
}
inline void FrontLeftDoorLockSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void FrontLeftDoorLockSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftDoorLockSwitchRequest.setMode)
}

// bool flag = 2;
inline void FrontLeftDoorLockSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool FrontLeftDoorLockSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool FrontLeftDoorLockSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftDoorLockSwitchRequest.flag)
  return _internal_flag();
}
inline void FrontLeftDoorLockSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void FrontLeftDoorLockSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftDoorLockSwitchRequest.flag)
}

// -------------------------------------------------------------------

// RearRightDoorLockSwitchRequest

// bool setMode = 1;
inline void RearRightDoorLockSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearRightDoorLockSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearRightDoorLockSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightDoorLockSwitchRequest.setMode)
  return _internal_setmode();
}
inline void RearRightDoorLockSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearRightDoorLockSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightDoorLockSwitchRequest.setMode)
}

// bool flag = 2;
inline void RearRightDoorLockSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool RearRightDoorLockSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool RearRightDoorLockSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightDoorLockSwitchRequest.flag)
  return _internal_flag();
}
inline void RearRightDoorLockSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearRightDoorLockSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightDoorLockSwitchRequest.flag)
}

// -------------------------------------------------------------------

// RearLeftDoorLockSwitchRequest

// bool setMode = 1;
inline void RearLeftDoorLockSwitchRequest::clear_setmode() {
  setmode_ = false;
}
inline bool RearLeftDoorLockSwitchRequest::_internal_setmode() const {
  return setmode_;
}
inline bool RearLeftDoorLockSwitchRequest::setmode() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftDoorLockSwitchRequest.setMode)
  return _internal_setmode();
}
inline void RearLeftDoorLockSwitchRequest::_internal_set_setmode(bool value) {
  
  setmode_ = value;
}
inline void RearLeftDoorLockSwitchRequest::set_setmode(bool value) {
  _internal_set_setmode(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftDoorLockSwitchRequest.setMode)
}

// bool flag = 2;
inline void RearLeftDoorLockSwitchRequest::clear_flag() {
  flag_ = false;
}
inline bool RearLeftDoorLockSwitchRequest::_internal_flag() const {
  return flag_;
}
inline bool RearLeftDoorLockSwitchRequest::flag() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftDoorLockSwitchRequest.flag)
  return _internal_flag();
}
inline void RearLeftDoorLockSwitchRequest::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void RearLeftDoorLockSwitchRequest::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftDoorLockSwitchRequest.flag)
}

// -------------------------------------------------------------------

// FrontLowLightReply

// bool status = 1;
inline void FrontLowLightReply::clear_status() {
  status_ = false;
}
inline bool FrontLowLightReply::_internal_status() const {
  return status_;
}
inline bool FrontLowLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLowLightReply.status)
  return _internal_status();
}
inline void FrontLowLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontLowLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLowLightReply.status)
}

// -------------------------------------------------------------------

// FrontHighLightReply

// bool status = 1;
inline void FrontHighLightReply::clear_status() {
  status_ = false;
}
inline bool FrontHighLightReply::_internal_status() const {
  return status_;
}
inline bool FrontHighLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontHighLightReply.status)
  return _internal_status();
}
inline void FrontHighLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontHighLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontHighLightReply.status)
}

// -------------------------------------------------------------------

// RearLightReply

// bool status = 1;
inline void RearLightReply::clear_status() {
  status_ = false;
}
inline bool RearLightReply::_internal_status() const {
  return status_;
}
inline bool RearLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLightReply.status)
  return _internal_status();
}
inline void RearLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLightReply.status)
}

// -------------------------------------------------------------------

// FrontDaytimeLightReply

// bool status = 1;
inline void FrontDaytimeLightReply::clear_status() {
  status_ = false;
}
inline bool FrontDaytimeLightReply::_internal_status() const {
  return status_;
}
inline bool FrontDaytimeLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontDaytimeLightReply.status)
  return _internal_status();
}
inline void FrontDaytimeLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontDaytimeLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontDaytimeLightReply.status)
}

// -------------------------------------------------------------------

// BrakeLightReply

// bool status = 1;
inline void BrakeLightReply::clear_status() {
  status_ = false;
}
inline bool BrakeLightReply::_internal_status() const {
  return status_;
}
inline bool BrakeLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.BrakeLightReply.status)
  return _internal_status();
}
inline void BrakeLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void BrakeLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.BrakeLightReply.status)
}

// -------------------------------------------------------------------

// ReverseLightReply

// bool status = 1;
inline void ReverseLightReply::clear_status() {
  status_ = false;
}
inline bool ReverseLightReply::_internal_status() const {
  return status_;
}
inline bool ReverseLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReverseLightReply.status)
  return _internal_status();
}
inline void ReverseLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ReverseLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReverseLightReply.status)
}

// -------------------------------------------------------------------

// FrontFogLightReply

// bool status = 1;
inline void FrontFogLightReply::clear_status() {
  status_ = false;
}
inline bool FrontFogLightReply::_internal_status() const {
  return status_;
}
inline bool FrontFogLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontFogLightReply.status)
  return _internal_status();
}
inline void FrontFogLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontFogLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontFogLightReply.status)
}

// -------------------------------------------------------------------

// RearFogLightReply

// bool status = 1;
inline void RearFogLightReply::clear_status() {
  status_ = false;
}
inline bool RearFogLightReply::_internal_status() const {
  return status_;
}
inline bool RearFogLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearFogLightReply.status)
  return _internal_status();
}
inline void RearFogLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearFogLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearFogLightReply.status)
}

// -------------------------------------------------------------------

// ClearanceLampReply

// bool status = 1;
inline void ClearanceLampReply::clear_status() {
  status_ = false;
}
inline bool ClearanceLampReply::_internal_status() const {
  return status_;
}
inline bool ClearanceLampReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ClearanceLampReply.status)
  return _internal_status();
}
inline void ClearanceLampReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ClearanceLampReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ClearanceLampReply.status)
}

// -------------------------------------------------------------------

// FrontLeftBlinkerLightReply

// bool status = 1;
inline void FrontLeftBlinkerLightReply::clear_status() {
  status_ = false;
}
inline bool FrontLeftBlinkerLightReply::_internal_status() const {
  return status_;
}
inline bool FrontLeftBlinkerLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftBlinkerLightReply.status)
  return _internal_status();
}
inline void FrontLeftBlinkerLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontLeftBlinkerLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftBlinkerLightReply.status)
}

// -------------------------------------------------------------------

// FrontRightBlinkerLightReply

// bool status = 1;
inline void FrontRightBlinkerLightReply::clear_status() {
  status_ = false;
}
inline bool FrontRightBlinkerLightReply::_internal_status() const {
  return status_;
}
inline bool FrontRightBlinkerLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightBlinkerLightReply.status)
  return _internal_status();
}
inline void FrontRightBlinkerLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontRightBlinkerLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightBlinkerLightReply.status)
}

// -------------------------------------------------------------------

// RearLeftBlinkerLightReply

// bool status = 1;
inline void RearLeftBlinkerLightReply::clear_status() {
  status_ = false;
}
inline bool RearLeftBlinkerLightReply::_internal_status() const {
  return status_;
}
inline bool RearLeftBlinkerLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftBlinkerLightReply.status)
  return _internal_status();
}
inline void RearLeftBlinkerLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearLeftBlinkerLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftBlinkerLightReply.status)
}

// -------------------------------------------------------------------

// RearRightBlinkerLightReply

// bool status = 1;
inline void RearRightBlinkerLightReply::clear_status() {
  status_ = false;
}
inline bool RearRightBlinkerLightReply::_internal_status() const {
  return status_;
}
inline bool RearRightBlinkerLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightBlinkerLightReply.status)
  return _internal_status();
}
inline void RearRightBlinkerLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearRightBlinkerLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightBlinkerLightReply.status)
}

// -------------------------------------------------------------------

// FrontWiperReply

// bool status = 1;
inline void FrontWiperReply::clear_status() {
  status_ = false;
}
inline bool FrontWiperReply::_internal_status() const {
  return status_;
}
inline bool FrontWiperReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontWiperReply.status)
  return _internal_status();
}
inline void FrontWiperReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontWiperReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontWiperReply.status)
}

// -------------------------------------------------------------------

// RearWiperReply

// bool status = 1;
inline void RearWiperReply::clear_status() {
  status_ = false;
}
inline bool RearWiperReply::_internal_status() const {
  return status_;
}
inline bool RearWiperReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearWiperReply.status)
  return _internal_status();
}
inline void RearWiperReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearWiperReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearWiperReply.status)
}

// -------------------------------------------------------------------

// LeftSideMirrorReply

// double angle = 1;
inline void LeftSideMirrorReply::clear_angle() {
  angle_ = 0;
}
inline double LeftSideMirrorReply::_internal_angle() const {
  return angle_;
}
inline double LeftSideMirrorReply::angle() const {
  // @@protoc_insertion_point(field_get:UnityAPI.LeftSideMirrorReply.angle)
  return _internal_angle();
}
inline void LeftSideMirrorReply::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void LeftSideMirrorReply::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:UnityAPI.LeftSideMirrorReply.angle)
}

// -------------------------------------------------------------------

// RightSideMirrorReply

// double angle = 1;
inline void RightSideMirrorReply::clear_angle() {
  angle_ = 0;
}
inline double RightSideMirrorReply::_internal_angle() const {
  return angle_;
}
inline double RightSideMirrorReply::angle() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RightSideMirrorReply.angle)
  return _internal_angle();
}
inline void RightSideMirrorReply::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void RightSideMirrorReply::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RightSideMirrorReply.angle)
}

// -------------------------------------------------------------------

// FrontRightDoorReply

// bool status = 1;
inline void FrontRightDoorReply::clear_status() {
  status_ = false;
}
inline bool FrontRightDoorReply::_internal_status() const {
  return status_;
}
inline bool FrontRightDoorReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightDoorReply.status)
  return _internal_status();
}
inline void FrontRightDoorReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontRightDoorReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightDoorReply.status)
}

// -------------------------------------------------------------------

// FrontLeftDoorReply

// bool status = 1;
inline void FrontLeftDoorReply::clear_status() {
  status_ = false;
}
inline bool FrontLeftDoorReply::_internal_status() const {
  return status_;
}
inline bool FrontLeftDoorReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftDoorReply.status)
  return _internal_status();
}
inline void FrontLeftDoorReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontLeftDoorReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftDoorReply.status)
}

// -------------------------------------------------------------------

// RearRightDoorReply

// bool status = 1;
inline void RearRightDoorReply::clear_status() {
  status_ = false;
}
inline bool RearRightDoorReply::_internal_status() const {
  return status_;
}
inline bool RearRightDoorReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightDoorReply.status)
  return _internal_status();
}
inline void RearRightDoorReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearRightDoorReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightDoorReply.status)
}

// -------------------------------------------------------------------

// RearLeftDoorReply

// bool status = 1;
inline void RearLeftDoorReply::clear_status() {
  status_ = false;
}
inline bool RearLeftDoorReply::_internal_status() const {
  return status_;
}
inline bool RearLeftDoorReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftDoorReply.status)
  return _internal_status();
}
inline void RearLeftDoorReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearLeftDoorReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftDoorReply.status)
}

// -------------------------------------------------------------------

// TrunkReply

// bool status = 1;
inline void TrunkReply::clear_status() {
  status_ = false;
}
inline bool TrunkReply::_internal_status() const {
  return status_;
}
inline bool TrunkReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.TrunkReply.status)
  return _internal_status();
}
inline void TrunkReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void TrunkReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.TrunkReply.status)
}

// -------------------------------------------------------------------

// SunRoofReply

// bool status = 1;
inline void SunRoofReply::clear_status() {
  status_ = false;
}
inline bool SunRoofReply::_internal_status() const {
  return status_;
}
inline bool SunRoofReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.SunRoofReply.status)
  return _internal_status();
}
inline void SunRoofReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SunRoofReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.SunRoofReply.status)
}

// -------------------------------------------------------------------

// FrontRightPowerWindowsReply

// double highLevel = 1;
inline void FrontRightPowerWindowsReply::clear_highlevel() {
  highlevel_ = 0;
}
inline double FrontRightPowerWindowsReply::_internal_highlevel() const {
  return highlevel_;
}
inline double FrontRightPowerWindowsReply::highlevel() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightPowerWindowsReply.highLevel)
  return _internal_highlevel();
}
inline void FrontRightPowerWindowsReply::_internal_set_highlevel(double value) {
  
  highlevel_ = value;
}
inline void FrontRightPowerWindowsReply::set_highlevel(double value) {
  _internal_set_highlevel(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightPowerWindowsReply.highLevel)
}

// -------------------------------------------------------------------

// FrontLeftPowerWindowsReply

// double highLevel = 1;
inline void FrontLeftPowerWindowsReply::clear_highlevel() {
  highlevel_ = 0;
}
inline double FrontLeftPowerWindowsReply::_internal_highlevel() const {
  return highlevel_;
}
inline double FrontLeftPowerWindowsReply::highlevel() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftPowerWindowsReply.highLevel)
  return _internal_highlevel();
}
inline void FrontLeftPowerWindowsReply::_internal_set_highlevel(double value) {
  
  highlevel_ = value;
}
inline void FrontLeftPowerWindowsReply::set_highlevel(double value) {
  _internal_set_highlevel(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftPowerWindowsReply.highLevel)
}

// -------------------------------------------------------------------

// RearRightPowerWindowsReply

// double highLevel = 1;
inline void RearRightPowerWindowsReply::clear_highlevel() {
  highlevel_ = 0;
}
inline double RearRightPowerWindowsReply::_internal_highlevel() const {
  return highlevel_;
}
inline double RearRightPowerWindowsReply::highlevel() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightPowerWindowsReply.highLevel)
  return _internal_highlevel();
}
inline void RearRightPowerWindowsReply::_internal_set_highlevel(double value) {
  
  highlevel_ = value;
}
inline void RearRightPowerWindowsReply::set_highlevel(double value) {
  _internal_set_highlevel(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightPowerWindowsReply.highLevel)
}

// -------------------------------------------------------------------

// RearLeftPowerWindowsReply

// double highLevel = 1;
inline void RearLeftPowerWindowsReply::clear_highlevel() {
  highlevel_ = 0;
}
inline double RearLeftPowerWindowsReply::_internal_highlevel() const {
  return highlevel_;
}
inline double RearLeftPowerWindowsReply::highlevel() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftPowerWindowsReply.highLevel)
  return _internal_highlevel();
}
inline void RearLeftPowerWindowsReply::_internal_set_highlevel(double value) {
  
  highlevel_ = value;
}
inline void RearLeftPowerWindowsReply::set_highlevel(double value) {
  _internal_set_highlevel(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftPowerWindowsReply.highLevel)
}

// -------------------------------------------------------------------

// SideMirrorSwitchReply

// bool status = 1;
inline void SideMirrorSwitchReply::clear_status() {
  status_ = false;
}
inline bool SideMirrorSwitchReply::_internal_status() const {
  return status_;
}
inline bool SideMirrorSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.SideMirrorSwitchReply.status)
  return _internal_status();
}
inline void SideMirrorSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SideMirrorSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.SideMirrorSwitchReply.status)
}

// -------------------------------------------------------------------

// InstrumentLightReply

// bool status = 1;
inline void InstrumentLightReply::clear_status() {
  status_ = false;
}
inline bool InstrumentLightReply::_internal_status() const {
  return status_;
}
inline bool InstrumentLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.InstrumentLightReply.status)
  return _internal_status();
}
inline void InstrumentLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void InstrumentLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.InstrumentLightReply.status)
}

// -------------------------------------------------------------------

// PassgenerRoomDomeLightReply

// bool status = 1;
inline void PassgenerRoomDomeLightReply::clear_status() {
  status_ = false;
}
inline bool PassgenerRoomDomeLightReply::_internal_status() const {
  return status_;
}
inline bool PassgenerRoomDomeLightReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.PassgenerRoomDomeLightReply.status)
  return _internal_status();
}
inline void PassgenerRoomDomeLightReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void PassgenerRoomDomeLightReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.PassgenerRoomDomeLightReply.status)
}

// -------------------------------------------------------------------

// ReadingLightDriverSideReply

// bool status = 1;
inline void ReadingLightDriverSideReply::clear_status() {
  status_ = false;
}
inline bool ReadingLightDriverSideReply::_internal_status() const {
  return status_;
}
inline bool ReadingLightDriverSideReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReadingLightDriverSideReply.status)
  return _internal_status();
}
inline void ReadingLightDriverSideReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ReadingLightDriverSideReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReadingLightDriverSideReply.status)
}

// -------------------------------------------------------------------

// ReadingLightPassgenerSideReply

// bool status = 1;
inline void ReadingLightPassgenerSideReply::clear_status() {
  status_ = false;
}
inline bool ReadingLightPassgenerSideReply::_internal_status() const {
  return status_;
}
inline bool ReadingLightPassgenerSideReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.ReadingLightPassgenerSideReply.status)
  return _internal_status();
}
inline void ReadingLightPassgenerSideReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ReadingLightPassgenerSideReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.ReadingLightPassgenerSideReply.status)
}

// -------------------------------------------------------------------

// FrontRightPowerWindowsSwitchReply

// bool status = 1;
inline void FrontRightPowerWindowsSwitchReply::clear_status() {
  status_ = false;
}
inline bool FrontRightPowerWindowsSwitchReply::_internal_status() const {
  return status_;
}
inline bool FrontRightPowerWindowsSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightPowerWindowsSwitchReply.status)
  return _internal_status();
}
inline void FrontRightPowerWindowsSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontRightPowerWindowsSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightPowerWindowsSwitchReply.status)
}

// -------------------------------------------------------------------

// FrontLeftPowerWindowsSwitchReply

// bool status = 1;
inline void FrontLeftPowerWindowsSwitchReply::clear_status() {
  status_ = false;
}
inline bool FrontLeftPowerWindowsSwitchReply::_internal_status() const {
  return status_;
}
inline bool FrontLeftPowerWindowsSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftPowerWindowsSwitchReply.status)
  return _internal_status();
}
inline void FrontLeftPowerWindowsSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontLeftPowerWindowsSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftPowerWindowsSwitchReply.status)
}

// -------------------------------------------------------------------

// RearRightPowerWindowsSwitchReply

// bool status = 1;
inline void RearRightPowerWindowsSwitchReply::clear_status() {
  status_ = false;
}
inline bool RearRightPowerWindowsSwitchReply::_internal_status() const {
  return status_;
}
inline bool RearRightPowerWindowsSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightPowerWindowsSwitchReply.status)
  return _internal_status();
}
inline void RearRightPowerWindowsSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearRightPowerWindowsSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightPowerWindowsSwitchReply.status)
}

// -------------------------------------------------------------------

// RearLeftPowerWindowsSwitchReply

// bool status = 1;
inline void RearLeftPowerWindowsSwitchReply::clear_status() {
  status_ = false;
}
inline bool RearLeftPowerWindowsSwitchReply::_internal_status() const {
  return status_;
}
inline bool RearLeftPowerWindowsSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftPowerWindowsSwitchReply.status)
  return _internal_status();
}
inline void RearLeftPowerWindowsSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearLeftPowerWindowsSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftPowerWindowsSwitchReply.status)
}

// -------------------------------------------------------------------

// HornReply

// bool status = 1;
inline void HornReply::clear_status() {
  status_ = false;
}
inline bool HornReply::_internal_status() const {
  return status_;
}
inline bool HornReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.HornReply.status)
  return _internal_status();
}
inline void HornReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void HornReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.HornReply.status)
}

// -------------------------------------------------------------------

// BuzzerReply

// bool status = 1;
inline void BuzzerReply::clear_status() {
  status_ = false;
}
inline bool BuzzerReply::_internal_status() const {
  return status_;
}
inline bool BuzzerReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.BuzzerReply.status)
  return _internal_status();
}
inline void BuzzerReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void BuzzerReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.BuzzerReply.status)
}

// -------------------------------------------------------------------

// AirConditionerReply

// bool status = 1;
inline void AirConditionerReply::clear_status() {
  status_ = false;
}
inline bool AirConditionerReply::_internal_status() const {
  return status_;
}
inline bool AirConditionerReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirConditionerReply.status)
  return _internal_status();
}
inline void AirConditionerReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void AirConditionerReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirConditionerReply.status)
}

// -------------------------------------------------------------------

// AirCondTemperatureReply

// double temperature = 1;
inline void AirCondTemperatureReply::clear_temperature() {
  temperature_ = 0;
}
inline double AirCondTemperatureReply::_internal_temperature() const {
  return temperature_;
}
inline double AirCondTemperatureReply::temperature() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirCondTemperatureReply.temperature)
  return _internal_temperature();
}
inline void AirCondTemperatureReply::_internal_set_temperature(double value) {
  
  temperature_ = value;
}
inline void AirCondTemperatureReply::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirCondTemperatureReply.temperature)
}

// -------------------------------------------------------------------

// AirConditionerFanSpeedReply

// int32 fanSpeed = 1;
inline void AirConditionerFanSpeedReply::clear_fanspeed() {
  fanspeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AirConditionerFanSpeedReply::_internal_fanspeed() const {
  return fanspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AirConditionerFanSpeedReply::fanspeed() const {
  // @@protoc_insertion_point(field_get:UnityAPI.AirConditionerFanSpeedReply.fanSpeed)
  return _internal_fanspeed();
}
inline void AirConditionerFanSpeedReply::_internal_set_fanspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fanspeed_ = value;
}
inline void AirConditionerFanSpeedReply::set_fanspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fanspeed(value);
  // @@protoc_insertion_point(field_set:UnityAPI.AirConditionerFanSpeedReply.fanSpeed)
}

// -------------------------------------------------------------------

// HandlingReply

// bool status = 1;
inline void HandlingReply::clear_status() {
  status_ = false;
}
inline bool HandlingReply::_internal_status() const {
  return status_;
}
inline bool HandlingReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.HandlingReply.status)
  return _internal_status();
}
inline void HandlingReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void HandlingReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.HandlingReply.status)
}

// -------------------------------------------------------------------

// CentralDoorLockSwitchReply

// bool status = 1;
inline void CentralDoorLockSwitchReply::clear_status() {
  status_ = false;
}
inline bool CentralDoorLockSwitchReply::_internal_status() const {
  return status_;
}
inline bool CentralDoorLockSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.CentralDoorLockSwitchReply.status)
  return _internal_status();
}
inline void CentralDoorLockSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void CentralDoorLockSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.CentralDoorLockSwitchReply.status)
}

// -------------------------------------------------------------------

// FrontRightDoorLockSwitchReply

// bool status = 1;
inline void FrontRightDoorLockSwitchReply::clear_status() {
  status_ = false;
}
inline bool FrontRightDoorLockSwitchReply::_internal_status() const {
  return status_;
}
inline bool FrontRightDoorLockSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontRightDoorLockSwitchReply.status)
  return _internal_status();
}
inline void FrontRightDoorLockSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontRightDoorLockSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontRightDoorLockSwitchReply.status)
}

// -------------------------------------------------------------------

// FrontLeftDoorLockSwitchReply

// bool status = 1;
inline void FrontLeftDoorLockSwitchReply::clear_status() {
  status_ = false;
}
inline bool FrontLeftDoorLockSwitchReply::_internal_status() const {
  return status_;
}
inline bool FrontLeftDoorLockSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.FrontLeftDoorLockSwitchReply.status)
  return _internal_status();
}
inline void FrontLeftDoorLockSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FrontLeftDoorLockSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.FrontLeftDoorLockSwitchReply.status)
}

// -------------------------------------------------------------------

// RearRightDoorLockSwitchReply

// bool status = 1;
inline void RearRightDoorLockSwitchReply::clear_status() {
  status_ = false;
}
inline bool RearRightDoorLockSwitchReply::_internal_status() const {
  return status_;
}
inline bool RearRightDoorLockSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearRightDoorLockSwitchReply.status)
  return _internal_status();
}
inline void RearRightDoorLockSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearRightDoorLockSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearRightDoorLockSwitchReply.status)
}

// -------------------------------------------------------------------

// RearLeftDoorLockSwitchReply

// bool status = 1;
inline void RearLeftDoorLockSwitchReply::clear_status() {
  status_ = false;
}
inline bool RearLeftDoorLockSwitchReply::_internal_status() const {
  return status_;
}
inline bool RearLeftDoorLockSwitchReply::status() const {
  // @@protoc_insertion_point(field_get:UnityAPI.RearLeftDoorLockSwitchReply.status)
  return _internal_status();
}
inline void RearLeftDoorLockSwitchReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RearLeftDoorLockSwitchReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UnityAPI.RearLeftDoorLockSwitchReply.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UnityAPI

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UnityAPI_2eproto
